{"ast":null,"code":"import { OpKind, RpcClient } from '@taquito/rpc';\nexport { OpKind } from '@taquito/rpc';\nimport { Observable, ReplaySubject, defer, throwError, of, EMPTY, combineLatest, from, range, concat, Subject, NEVER, BehaviorSubject, timer } from 'rxjs';\nimport { switchMap, timeoutWith, shareReplay, map, filter, first, catchError, tap, distinctUntilChanged, takeWhile, startWith, concatMap, takeUntil, retry, pluck, distinctUntilKeyChanged, publish, refCount } from 'rxjs/operators';\nimport { Schema, ParameterSchema, ViewSchema, MichelsonMap } from '@taquito/michelson-encoder';\nexport { MichelsonMap, UnitValue } from '@taquito/michelson-encoder';\nimport BigNumber from 'bignumber.js';\nimport { validateOperation, ValidationResult, InvalidOperationHashError, InvalidOperationKindError, DeprecationError, validateAddress, InvalidAddressError, validateKeyHash, InvalidKeyHashError, validateContractAddress, InvalidContractAddressError, validateChain, InvalidChainIdError, encodeExpr } from '@taquito/utils';\nimport { HttpResponseError, STATUS_CODE } from '@taquito/http-utils';\nimport { Parser, packDataBytes } from '@taquito/michel-codec';\nimport { LocalForger } from '@taquito/local-forging';\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nclass RpcInjector {\n  constructor(context) {\n    this.context = context;\n  }\n\n  inject(signedOperationBytes) {\n    return this.context.rpc.injectOperation(signedOperationBytes);\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates the signer has been unconfigured in the TezosToolkit instance\r\n */\n\n\nclass UnconfiguredSignerError extends Error {\n  constructor() {\n    super('No signer has been configured. Please configure one by calling setProvider({signer}) on your TezosToolkit instance.');\n    this.name = 'UnconfiguredSignerError';\n  }\n\n}\n/**\r\n * @description Default signer implementation which does nothing and produce invalid signature\r\n */\n\n\nclass NoopSigner {\n  publicKey() {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new UnconfiguredSignerError();\n    });\n  }\n\n  publicKeyHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new UnconfiguredSignerError();\n    });\n  }\n\n  secretKey() {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new UnconfiguredSignerError();\n    });\n  }\n\n  sign(_bytes, _watermark) {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new UnconfiguredSignerError();\n    });\n  }\n\n}\n\nfunction createObservableFromSubscription(sub) {\n  return new Observable(subscriber => {\n    sub.on('data', data => {\n      subscriber.next(data);\n    });\n    sub.on('error', error => {\n      subscriber.error(error);\n    });\n    sub.on('close', () => {\n      subscriber.complete();\n    });\n    return () => {\n      sub.close();\n    };\n  });\n}\n\nvar DEFAULT_GAS_LIMIT;\n\n(function (DEFAULT_GAS_LIMIT) {\n  DEFAULT_GAS_LIMIT[DEFAULT_GAS_LIMIT[\"DELEGATION\"] = 10600] = \"DELEGATION\";\n  DEFAULT_GAS_LIMIT[DEFAULT_GAS_LIMIT[\"ORIGINATION\"] = 10600] = \"ORIGINATION\";\n  DEFAULT_GAS_LIMIT[DEFAULT_GAS_LIMIT[\"TRANSFER\"] = 10600] = \"TRANSFER\";\n  DEFAULT_GAS_LIMIT[DEFAULT_GAS_LIMIT[\"REVEAL\"] = 1100] = \"REVEAL\";\n})(DEFAULT_GAS_LIMIT || (DEFAULT_GAS_LIMIT = {}));\n\nvar DEFAULT_FEE;\n\n(function (DEFAULT_FEE) {\n  DEFAULT_FEE[DEFAULT_FEE[\"DELEGATION\"] = 1257] = \"DELEGATION\";\n  DEFAULT_FEE[DEFAULT_FEE[\"ORIGINATION\"] = 10000] = \"ORIGINATION\";\n  DEFAULT_FEE[DEFAULT_FEE[\"TRANSFER\"] = 10000] = \"TRANSFER\";\n  DEFAULT_FEE[DEFAULT_FEE[\"REVEAL\"] = 374] = \"REVEAL\";\n})(DEFAULT_FEE || (DEFAULT_FEE = {}));\n\nvar DEFAULT_STORAGE_LIMIT;\n\n(function (DEFAULT_STORAGE_LIMIT) {\n  DEFAULT_STORAGE_LIMIT[DEFAULT_STORAGE_LIMIT[\"DELEGATION\"] = 0] = \"DELEGATION\";\n  DEFAULT_STORAGE_LIMIT[DEFAULT_STORAGE_LIMIT[\"ORIGINATION\"] = 257] = \"ORIGINATION\";\n  DEFAULT_STORAGE_LIMIT[DEFAULT_STORAGE_LIMIT[\"TRANSFER\"] = 257] = \"TRANSFER\";\n  DEFAULT_STORAGE_LIMIT[DEFAULT_STORAGE_LIMIT[\"REVEAL\"] = 0] = \"REVEAL\";\n})(DEFAULT_STORAGE_LIMIT || (DEFAULT_STORAGE_LIMIT = {}));\n\nvar Protocols;\n\n(function (Protocols) {\n  Protocols[\"Pt24m4xi\"] = \"Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd\";\n  Protocols[\"PsBABY5H\"] = \"PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU\";\n  Protocols[\"PsBabyM1\"] = \"PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS\";\n  Protocols[\"PsCARTHA\"] = \"PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb\";\n  Protocols[\"PsDELPH1\"] = \"PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo\";\n  Protocols[\"PtEdo2Zk\"] = \"PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA\";\n  Protocols[\"PsFLorena\"] = \"PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i\";\n  Protocols[\"PtGRANADs\"] = \"PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV\";\n  Protocols[\"PtHangz2\"] = \"PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx\";\n  Protocols[\"PsiThaCa\"] = \"PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP\";\n  Protocols[\"Psithaca2\"] = \"Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A\";\n  Protocols[\"PtJakart2\"] = \"PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY\";\n  Protocols[\"ProtoALpha\"] = \"ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK\";\n})(Protocols || (Protocols = {}));\n\nconst protocols = {\n  '004': [Protocols.Pt24m4xi],\n  '005': [Protocols.PsBABY5H, Protocols.PsBabyM1],\n  '006': [Protocols.PsCARTHA],\n  '007': [Protocols.PsDELPH1],\n  '008': [Protocols.PtEdo2Zk],\n  '009': [Protocols.PsFLorena],\n  '010': [Protocols.PtGRANADs],\n  '011': [Protocols.PtHangz2],\n  '012': [Protocols.PsiThaCa, Protocols.Psithaca2],\n  '013': [Protocols.PtJakart2],\n  '014': [Protocols.ProtoALpha]\n};\nvar ChainIds;\n\n(function (ChainIds) {\n  ChainIds[\"MAINNET\"] = \"NetXdQprcVkpaWU\";\n  ChainIds[\"CARTHAGENET\"] = \"NetXjD3HPJJjmcd\";\n  ChainIds[\"DELPHINET\"] = \"NetXm8tYqnMWky1\";\n  ChainIds[\"EDONET\"] = \"NetXSgo1ZT2DRUG\";\n  ChainIds[\"FLORENCENET\"] = \"NetXxkAx4woPLyu\";\n  ChainIds[\"GRANADANET\"] = \"NetXz969SFaFn8k\";\n  ChainIds[\"HANGZHOUNET\"] = \"NetXZSsxBpMQeAT\";\n  ChainIds[\"ITHACANET\"] = \"NetXbhmtAbMukLc\";\n  ChainIds[\"ITHACANET2\"] = \"NetXnHfVqm9iesp\";\n  ChainIds[\"JAKARTANET2\"] = \"NetXLH1uAxK7CCh\";\n})(ChainIds || (ChainIds = {}));\n\nconst TZ_DECIMALS = 6;\nconst MTZ_DECIMALS = 3;\n\nfunction getDecimal(format) {\n  switch (format) {\n    case 'tz':\n      return TZ_DECIMALS;\n\n    case 'mtz':\n      return MTZ_DECIMALS;\n\n    case 'mutez':\n    default:\n      return 0;\n  }\n}\n\nfunction format() {\n  let from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'mutez';\n  let to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mutez';\n  let amount = arguments.length > 2 ? arguments[2] : undefined;\n  const bigNum = new BigNumber(amount);\n\n  if (bigNum.isNaN()) {\n    return amount;\n  }\n\n  return bigNum.multipliedBy(Math.pow(10, getDecimal(from))).dividedBy(Math.pow(10, getDecimal(to)));\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates invalid smart contract parameters being passed or used\r\n */\n\n\nclass InvalidParameterError extends Error {\n  constructor(smartContractMethodName, sigs, args) {\n    super(`${smartContractMethodName} Received ${args.length} arguments while expecting one of the following signatures (${JSON.stringify(sigs)})`);\n    this.smartContractMethodName = smartContractMethodName;\n    this.sigs = sigs;\n    this.args = args;\n    this.name = 'Invalid parameters error';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid delegation source contract address being passed or used\r\n */\n\n\nclass InvalidDelegationSource extends Error {\n  constructor(source) {\n    super(`Since Babylon delegation source can no longer be a contract address ${source}. Please use the smart contract abstraction to set your delegate.`);\n    this.source = source;\n    this.name = 'Invalid delegation source error';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid smart contract code parameter being passed or used\r\n */\n\n\nclass InvalidCodeParameter extends Error {\n  constructor(message, data) {\n    super(message);\n    this.message = message;\n    this.data = data;\n    this.name = 'InvalidCodeParameter';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates invalid smart contract init parameter being passed or used\r\n */\n\n\nclass InvalidInitParameter extends Error {\n  constructor(message, data) {\n    super(message);\n    this.message = message;\n    this.data = data;\n    this.name = 'InvalidInitParameter';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates invalid view parameter of a smart contract\r\n */\n\n\nclass InvalidViewParameterError extends Error {\n  constructor(smartContractViewName, sigs, args, originalError) {\n    super(`Unable to encode the parameter of the view: ${smartContractViewName}. Received ${args} as parameter while expecting one of the following signatures (${JSON.stringify(sigs)})`);\n    this.smartContractViewName = smartContractViewName;\n    this.sigs = sigs;\n    this.args = args;\n    this.originalError = originalError;\n    this.name = 'Invalid view parameters error';\n    this.cause = originalError;\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when conducting a view simulation\r\n */\n\n\nclass ViewSimulationError extends Error {\n  constructor(message, viewName, failWith, originalError) {\n    super(message);\n    this.message = message;\n    this.viewName = viewName;\n    this.failWith = failWith;\n    this.originalError = originalError;\n    this.name = 'ViewSimulationError';\n  }\n\n}\n\nconst validateAndExtractFailwith = error => {\n  if (isJsonString(error.body)) {\n    const parsedError = JSON.parse(error.body);\n\n    if (Array.isArray(parsedError) && 'with' in parsedError[parsedError.length - 1]) {\n      return parsedError[parsedError.length - 1].with;\n    }\n  }\n};\n\nconst isJsonString = str => {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n/**\r\n *  @category Error\r\n *  @description Error that indicates invalid or unconfigured context when executing a view\r\n */\n\n\nclass InvalidViewSimulationContext extends Error {\n  constructor(info) {\n    super(`${info} Please configure the context of the view execution in the executeView method.`);\n    this.info = info;\n    this.name = 'InvalidViewSimulationContext';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a mistake happening during the reveal operation\r\n */\n\n\nclass RevealOperationError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'RevealOperationError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a mistake in the parameters in the preparation of an Origination operation\r\n */\n\n\nclass OriginationParameterError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'OriginationParameterError';\n  }\n\n}\n\nconst createOriginationOperation = _ref => {\n  let {\n    code,\n    init,\n    balance = '0',\n    delegate,\n    storage,\n    fee = DEFAULT_FEE.ORIGINATION,\n    gasLimit = DEFAULT_GAS_LIMIT.ORIGINATION,\n    storageLimit = DEFAULT_STORAGE_LIMIT.ORIGINATION,\n    mutez = false\n  } = _ref;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    if (storage !== undefined && init !== undefined) {\n      throw new OriginationParameterError('Storage and Init cannot be set a the same time. Please either use storage or init but not both.');\n    }\n\n    if (!Array.isArray(code)) {\n      throw new InvalidCodeParameter('Wrong code parameter type, expected an array', code);\n    }\n\n    let contractStorage;\n\n    if (storage !== undefined) {\n      const storageType = code.find(p => 'prim' in p && p.prim === 'storage');\n\n      if ((storageType === null || storageType === void 0 ? void 0 : storageType.args) === undefined) {\n        throw new InvalidCodeParameter('The storage section is missing from the script', code);\n      }\n\n      const schema = new Schema(storageType.args[0]); // TODO\n\n      contractStorage = schema.Encode(storage);\n    } else if (init !== undefined && typeof init === 'object') {\n      contractStorage = init;\n    } else {\n      throw new InvalidInitParameter('Wrong init parameter type, expected JSON Michelson', init);\n    }\n\n    const script = {\n      code,\n      storage: contractStorage\n    };\n    const operation = {\n      kind: OpKind.ORIGINATION,\n      fee,\n      gas_limit: gasLimit,\n      storage_limit: storageLimit,\n      balance: mutez ? balance.toString() : format('tz', 'mutez', balance).toString(),\n      script\n    };\n\n    if (delegate) {\n      operation.delegate = delegate;\n    }\n\n    return operation;\n  });\n};\n\nconst createTransferOperation = _ref2 => {\n  let {\n    to,\n    amount,\n    parameter,\n    fee = DEFAULT_FEE.TRANSFER,\n    gasLimit = DEFAULT_GAS_LIMIT.TRANSFER,\n    storageLimit = DEFAULT_STORAGE_LIMIT.TRANSFER,\n    mutez = false\n  } = _ref2;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    const operation = {\n      kind: OpKind.TRANSACTION,\n      fee,\n      gas_limit: gasLimit,\n      storage_limit: storageLimit,\n      amount: mutez ? amount.toString() : format('tz', 'mutez', amount).toString(),\n      destination: to,\n      parameters: parameter\n    };\n    return operation;\n  });\n};\n\nconst createSetDelegateOperation = _ref3 => {\n  let {\n    delegate,\n    source,\n    fee = DEFAULT_FEE.DELEGATION,\n    gasLimit = DEFAULT_GAS_LIMIT.DELEGATION,\n    storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION\n  } = _ref3;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    const operation = {\n      kind: OpKind.DELEGATION,\n      source,\n      fee,\n      gas_limit: gasLimit,\n      storage_limit: storageLimit,\n      delegate\n    };\n    return operation;\n  });\n};\n\nconst createRegisterDelegateOperation = (_ref4, source) => {\n  let {\n    fee = DEFAULT_FEE.DELEGATION,\n    gasLimit = DEFAULT_GAS_LIMIT.DELEGATION,\n    storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION\n  } = _ref4;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    return {\n      kind: OpKind.DELEGATION,\n      fee,\n      gas_limit: gasLimit,\n      storage_limit: storageLimit,\n      delegate: source\n    };\n  });\n};\n\nconst createRevealOperation = (_ref5, source, publicKey) => {\n  let {\n    fee = DEFAULT_FEE.REVEAL,\n    gasLimit = DEFAULT_GAS_LIMIT.REVEAL,\n    storageLimit = DEFAULT_STORAGE_LIMIT.REVEAL\n  } = _ref5;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    return {\n      kind: OpKind.REVEAL,\n      fee,\n      public_key: publicKey,\n      source,\n      gas_limit: gasLimit,\n      storage_limit: storageLimit\n    };\n  });\n};\n\nconst createRegisterGlobalConstantOperation = _ref6 => {\n  let {\n    value,\n    source,\n    fee,\n    gasLimit,\n    storageLimit\n  } = _ref6;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    return {\n      kind: OpKind.REGISTER_GLOBAL_CONSTANT,\n      value,\n      fee,\n      gas_limit: gasLimit,\n      storage_limit: storageLimit,\n      source\n    };\n  });\n};\n\nconst createTxRollupOriginationOperation = _ref7 => {\n  let {\n    source,\n    fee,\n    gasLimit,\n    storageLimit\n  } = _ref7;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    return {\n      kind: OpKind.TX_ROLLUP_ORIGINATION,\n      fee,\n      gas_limit: gasLimit,\n      storage_limit: storageLimit,\n      source,\n      tx_rollup_origination: {}\n    };\n  });\n};\n\nconst createTxRollupBatchOperation = _ref8 => {\n  let {\n    content,\n    rollup,\n    source,\n    fee,\n    gasLimit,\n    storageLimit\n  } = _ref8;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    return {\n      kind: OpKind.TX_ROLLUP_SUBMIT_BATCH,\n      fee,\n      gas_limit: gasLimit,\n      storage_limit: storageLimit,\n      source,\n      content,\n      rollup\n    };\n  });\n};\n\nconst attachKind = (op, kind) => {\n  return Object.assign(Object.assign({}, op), {\n    kind\n  });\n};\n\nconst findWithKind = (arr, kind) => {\n  if (Array.isArray(arr)) {\n    const found = arr.find(op => op.kind === kind);\n\n    if (found && isKind(found, kind)) {\n      return found;\n    }\n  }\n};\n\nconst isKind = (op, kind) => {\n  return op.kind === kind;\n};\n\nconst isOpWithFee = op => {\n  return ['transaction', 'delegation', 'origination', 'reveal', 'register_global_constant', 'tx_rollup_origination', 'tx_rollup_submit_batch'].indexOf(op.kind) !== -1;\n};\n\nconst isOpRequireReveal = op => {\n  return ['transaction', 'delegation', 'origination', 'register_global_constant', 'tx_rollup_origination', 'tx_rollup_submit_batch'].indexOf(op.kind) !== -1;\n};\n\nconst hasMetadata = op => {\n  return 'metadata' in op;\n};\n\nconst hasMetadataWithResult = op => {\n  return hasMetadata(op) && 'operation_result' in op.metadata;\n};\n\nconst hasMetadataWithInternalOperationResult = op => {\n  return hasMetadata(op) && 'internal_operation_results' in op.metadata;\n};\n\nconst isErrorWithMessage = error => {\n  return 'with' in error;\n};\n/**\r\n *  @category Error\r\n *  @description Generic tezos error that will be thrown when a mistake occurs when doing an operation; more details here https://tezos.gitlab.io/api/errors.html\r\n */\n\n\nclass TezosOperationError extends Error {\n  constructor(errors, errorDetails) {\n    super();\n    this.errors = errors;\n    this.errorDetails = errorDetails;\n    this.name = 'TezosOperationError'; // Last error is 'often' the one with more detail\n\n    const lastError = errors[errors.length - 1];\n    this.id = lastError.id;\n    this.kind = lastError.kind;\n    this.message = `(${this.kind}) ${this.id}`;\n\n    if (isErrorWithMessage(lastError)) {\n      if (lastError.with.string) {\n        this.message = lastError.with.string;\n      } else if (lastError.with.int) {\n        this.message = lastError.with.int;\n      } else {\n        this.message = JSON.stringify(lastError.with);\n      }\n    }\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Tezos error that will be thrown when a mistake happens during the preapply stage\r\n */\n\n\nclass TezosPreapplyFailureError extends Error {\n  constructor(result) {\n    super('Preapply returned an unexpected result');\n    this.result = result;\n    this.name = 'TezosPreapplyFailureError';\n  }\n\n} // Flatten all operation content results and internal operation results into a single array\n// Some cases where we can have multiple operation results or internal operation results are:\n// - When an operation includes a reveal operation\n// - When an operation is made using the batch API\n// - Smart contract call can contains internal operation results when they call other smart contract internally or originate contracts\n\n\nconst flattenOperationResult = response => {\n  const results = Array.isArray(response) ? response : [response];\n  const returnedResults = [];\n\n  for (let i = 0; i < results.length; i++) {\n    for (let j = 0; j < results[i].contents.length; j++) {\n      const content = results[i].contents[j];\n\n      if (hasMetadataWithResult(content)) {\n        returnedResults.push(Object.assign({\n          fee: content.fee\n        }, content.metadata.operation_result));\n\n        if (Array.isArray(content.metadata.internal_operation_results)) {\n          content.metadata.internal_operation_results.forEach(x => returnedResults.push(x.result));\n        }\n      }\n    }\n  }\n\n  return returnedResults;\n};\n/***\r\n * @description Flatten all error from preapply response (including internal error)\r\n */\n\n\nconst flattenErrors = function (response) {\n  let status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'failed';\n  const results = Array.isArray(response) ? response : [response];\n  let errors = []; // Transaction that do not fail will be backtracked in case one failure occur\n\n  for (let i = 0; i < results.length; i++) {\n    for (let j = 0; j < results[i].contents.length; j++) {\n      const content = results[i].contents[j];\n\n      if (hasMetadata(content)) {\n        if (hasMetadataWithResult(content) && content.metadata.operation_result.status === status) {\n          errors = errors.concat(content.metadata.operation_result.errors || []);\n        }\n\n        if (hasMetadataWithInternalOperationResult(content) && Array.isArray(content.metadata.internal_operation_results)) {\n          for (const internalResult of content.metadata.internal_operation_results) {\n            if ('result' in internalResult && internalResult.result.status === status) {\n              errors = errors.concat(internalResult.result.errors || []);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n/**\r\n *  @category Error\r\n *  @description Error that indicates a general failure happening during an origination operation\r\n */\n\n\nclass OriginationOperationError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'OriginationOperationError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates invalid confirmation count has been passed or configured\r\n */\n\n\nclass InvalidConfirmationCountError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'InvalidConfirmationCountError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates undefined confirmation has not been specified or configured\r\n */\n\n\nclass ConfirmationUndefinedError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'ConfirmationUndefinedError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid filter expression being passed or used\r\n */\n\n\nclass InvalidFilterExpressionError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'InvalidFilterExpressionError';\n  }\n\n}\n/**\r\n * @description Utility class to interact with Tezos operations\r\n */\n\n\nclass Operation {\n  /**\r\n   *\r\n   * @param hash Operation hash\r\n   * @param raw Raw operation that was injected\r\n   * @param context Taquito context allowing access to rpc and signer\r\n   */\n  constructor(hash, raw, results, context) {\n    this.hash = hash;\n    this.raw = raw;\n    this.results = results;\n    this.context = context;\n    this._pollingConfig$ = new ReplaySubject(1);\n    this.currentHead$ = this._pollingConfig$.pipe(switchMap(config => {\n      return defer(() => createObservableFromSubscription(this.context.stream.subscribeBlock('head'))).pipe(timeoutWith(config.timeout * 1000, throwError(new Error('Confirmation polling timed out'))));\n    }), shareReplay({\n      refCount: true\n    })); // Observable that emit once operation is seen in a block\n\n    this.confirmed$ = this.currentHead$.pipe(map(head => {\n      for (let i = 3; i >= 0; i--) {\n        head.operations[i].forEach(op => {\n          if (op.hash === this.hash) {\n            this._foundAt = head.header.level;\n          }\n        });\n      }\n\n      if (head.header.level - this._foundAt >= 0) {\n        return this._foundAt;\n      }\n    }), filter(x => x !== undefined), first(), shareReplay());\n    this._foundAt = Number.POSITIVE_INFINITY;\n\n    if (validateOperation(this.hash) !== ValidationResult.VALID) {\n      throw new InvalidOperationHashError(this.hash);\n    }\n\n    this.confirmed$.pipe(first(), catchError(() => {\n      return of(EMPTY);\n    })).subscribe();\n  }\n\n  get includedInBlock() {\n    return this._foundAt;\n  }\n\n  get revealOperation() {\n    return Array.isArray(this.results) && this.results.find(op => op.kind === 'reveal');\n  }\n\n  get revealStatus() {\n    if (this.revealOperation) {\n      return this.revealOperation.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get status() {\n    return this.results.map(result => {\n      if (hasMetadataWithResult(result)) {\n        return result.metadata.operation_result.status;\n      } else {\n        return 'unknown';\n      }\n    })[0] || 'unknown';\n  }\n  /**\r\n   *\r\n   * @param confirmations [0] Number of confirmation to wait for\r\n   * @param timeout [180] Timeout\r\n   */\n\n\n  confirmation(confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof confirmations !== 'undefined' && confirmations < 1) {\n        throw new InvalidConfirmationCountError('Confirmation count must be at least 1');\n      }\n\n      const {\n        defaultConfirmationCount,\n        confirmationPollingTimeoutSecond\n      } = this.context.config;\n\n      this._pollingConfig$.next({\n        timeout: timeout || confirmationPollingTimeoutSecond\n      });\n\n      const conf = confirmations !== undefined ? confirmations : defaultConfirmationCount;\n      return new Promise((resolve, reject) => {\n        this.confirmed$.pipe(switchMap(() => this.currentHead$), filter(head => head.header.level - this._foundAt >= conf - 1), first()).subscribe(_ => {\n          resolve(this._foundAt + (conf - 1));\n        }, reject);\n      });\n    });\n  }\n\n}\n\nclass BatchOperation extends Operation {\n  constructor(hash, params, source, raw, results, context) {\n    super(hash, raw, results, context);\n    this.params = params;\n    this.source = source;\n  }\n\n  sumProp(arr, prop) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  get status() {\n    return this.results.filter(result => BATCH_KINDS.indexOf(result.kind) !== -1).map(result => {\n      if (hasMetadataWithResult(result)) {\n        return result.metadata.operation_result.status;\n      } else {\n        return 'unknown';\n      }\n    })[0] || 'unknown';\n  }\n\n  get fee() {\n    return this.sumProp(this.params, 'fee');\n  }\n\n  get gasLimit() {\n    return this.sumProp(this.params, 'gas_limit');\n  }\n\n  get storageLimit() {\n    return this.sumProp(this.params, 'storage_limit');\n  }\n\n  get consumedGas() {\n    return String(this.sumProp(flattenOperationResult({\n      contents: this.results\n    }), 'consumed_gas'));\n  }\n\n  get storageDiff() {\n    return String(this.sumProp(flattenOperationResult({\n      contents: this.results\n    }), 'paid_storage_size_diff'));\n  }\n\n  get errors() {\n    return flattenErrors({\n      contents: this.results\n    });\n  }\n\n}\n\nclass OperationEmitter {\n  constructor(context) {\n    this.context = context;\n  }\n\n  get rpc() {\n    return this.context.rpc;\n  }\n\n  get signer() {\n    return this.context.signer;\n  }\n\n  isRevealOpNeeded(op, pkh) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return !(yield this.isAccountRevealRequired(pkh)) || !this.isRevealRequiredForOpType(op) ? false : true;\n    });\n  }\n\n  isAccountRevealRequired(publicKeyHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return !(yield this.context.readProvider.isAccountRevealed(publicKeyHash, 'head'));\n    });\n  }\n\n  isRevealRequiredForOpType(op) {\n    let opRequireReveal = false;\n\n    for (const operation of op) {\n      if (isOpRequireReveal(operation)) {\n        opRequireReveal = true;\n      }\n    }\n\n    return opRequireReveal;\n  } // Originally from sotez (Copyright (c) 2018 Andrew Kishino)\n\n\n  prepareOperation(_ref9, pkh) {\n    let {\n      operation,\n      source\n    } = _ref9;\n    return __awaiter(this, void 0, void 0, function* () {\n      const counters = {};\n      let ops = [];\n      const blockHashPromise = this.context.readProvider.getBlockHash('head~2');\n      const blockProtoPromise = this.context.readProvider.getNextProtocol('head');\n\n      if (Array.isArray(operation)) {\n        ops = [...operation];\n      } else {\n        ops = [operation];\n      } // Implicit account who emit the operation\n\n\n      const publicKeyHash = pkh ? pkh : yield this.signer.publicKeyHash();\n      let counterPromise = Promise.resolve(undefined);\n\n      for (let i = 0; i < ops.length; i++) {\n        if (isOpRequireReveal(ops[i]) || ops[i].kind === 'reveal') {\n          counterPromise = this.context.readProvider.getCounter(publicKeyHash, 'head');\n          break;\n        }\n      }\n\n      const [hash, protocol, headCounter] = yield Promise.all([blockHashPromise, blockProtoPromise, counterPromise]);\n      const counter = parseInt(headCounter || '0', 10);\n\n      if (!counters[publicKeyHash] || counters[publicKeyHash] < counter) {\n        counters[publicKeyHash] = counter;\n      }\n\n      const getFee = op => {\n        const opCounter = ++counters[publicKeyHash];\n        return {\n          counter: `${opCounter}`,\n          fee: typeof op.fee === 'undefined' ? '0' : `${op.fee}`,\n          gas_limit: typeof op.gas_limit === 'undefined' ? '0' : `${op.gas_limit}`,\n          storage_limit: typeof op.storage_limit === 'undefined' ? '0' : `${op.storage_limit}`\n        };\n      };\n\n      const getSource = op => {\n        return {\n          source: typeof op.source === 'undefined' ? source || publicKeyHash : op.source\n        };\n      };\n\n      const constructOps = cOps => cOps.map(op => {\n        switch (op.kind) {\n          case OpKind.ACTIVATION:\n            return Object.assign({}, op);\n\n          case OpKind.ORIGINATION:\n            return Object.assign(Object.assign(Object.assign(Object.assign({}, op), {\n              balance: typeof op.balance !== 'undefined' ? `${op.balance}` : '0'\n            }), getSource(op)), getFee(op));\n\n          case OpKind.TRANSACTION:\n            {\n              const cops = Object.assign(Object.assign(Object.assign(Object.assign({}, op), {\n                amount: typeof op.amount !== 'undefined' ? `${op.amount}` : '0'\n              }), getSource(op)), getFee(op));\n\n              if (cops.source.toLowerCase().startsWith('kt1')) {\n                throw new DeprecationError(`KT1 addresses are not supported as source since ${Protocols.PsBabyM1}`);\n              }\n\n              return cops;\n            }\n\n          case OpKind.REVEAL:\n          case OpKind.DELEGATION:\n          case OpKind.REGISTER_GLOBAL_CONSTANT:\n          case OpKind.TX_ROLLUP_ORIGINATION:\n          case OpKind.TX_ROLLUP_SUBMIT_BATCH:\n            return Object.assign(Object.assign(Object.assign({}, op), getSource(op)), getFee(op));\n\n          default:\n            throw new InvalidOperationKindError(op.kind);\n        }\n      });\n\n      const contents = constructOps(ops);\n      return {\n        opOb: {\n          branch: hash,\n          contents,\n          protocol\n        },\n        counter\n      };\n    });\n  }\n\n  forge(_ref10) {\n    let {\n      opOb: {\n        branch,\n        contents,\n        protocol\n      },\n      counter\n    } = _ref10;\n    return __awaiter(this, void 0, void 0, function* () {\n      const forgedBytes = yield this.context.forger.forge({\n        branch,\n        contents\n      });\n      return {\n        opbytes: forgedBytes,\n        opOb: {\n          branch,\n          contents,\n          protocol\n        },\n        counter\n      };\n    });\n  }\n\n  simulate(op) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {\n        opResponse: yield this.rpc.runOperation(op),\n        op,\n        context: this.context.clone()\n      };\n    });\n  }\n\n  estimate(_a, estimator) {\n    var {\n      fee,\n      gasLimit,\n      storageLimit\n    } = _a,\n        rest = __rest(_a, [\"fee\", \"gasLimit\", \"storageLimit\"]);\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let calculatedFee = fee;\n      let calculatedGas = gasLimit;\n      let calculatedStorage = storageLimit;\n\n      if (fee === undefined || gasLimit === undefined || storageLimit === undefined) {\n        const estimation = yield estimator(Object.assign({\n          fee,\n          gasLimit,\n          storageLimit\n        }, rest));\n\n        if (calculatedFee === undefined) {\n          calculatedFee = estimation.suggestedFeeMutez;\n        }\n\n        if (calculatedGas === undefined) {\n          calculatedGas = estimation.gasLimit;\n        }\n\n        if (calculatedStorage === undefined) {\n          calculatedStorage = estimation.storageLimit;\n        }\n      }\n\n      return {\n        fee: calculatedFee,\n        gasLimit: calculatedGas,\n        storageLimit: calculatedStorage\n      };\n    });\n  }\n\n  signAndInject(forgedBytes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signed = yield this.signer.sign(forgedBytes.opbytes, new Uint8Array([3]));\n      forgedBytes.opbytes = signed.sbytes;\n      forgedBytes.opOb.signature = signed.prefixSig;\n      const opResponse = [];\n      const results = yield this.rpc.preapplyOperations([forgedBytes.opOb]);\n\n      if (!Array.isArray(results)) {\n        throw new TezosPreapplyFailureError(results);\n      }\n\n      for (let i = 0; i < results.length; i++) {\n        for (let j = 0; j < results[i].contents.length; j++) {\n          opResponse.push(results[i].contents[j]);\n        }\n      }\n\n      const errors = flattenErrors(results);\n\n      if (errors.length) {\n        throw new TezosOperationError(errors, 'Error occurred during validation simulation of operation');\n      }\n\n      return {\n        hash: yield this.context.injector.inject(forgedBytes.opbytes),\n        forgedBytes,\n        opResponse,\n        context: this.context.clone()\n      };\n    });\n  }\n\n}\n\nconst BATCH_KINDS = [OpKind.ACTIVATION, OpKind.ORIGINATION, OpKind.TRANSACTION, OpKind.DELEGATION];\n\nclass OperationBatch extends OperationEmitter {\n  constructor(context, estimator) {\n    super(context);\n    this.estimator = estimator;\n    this.operations = [];\n  }\n  /**\r\n   *\r\n   * @description Add a transaction operation to the batch\r\n   *\r\n   * @param params Transfer operation parameter\r\n   */\n\n\n  withTransfer(params) {\n    if (validateAddress(params.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.to);\n    }\n\n    this.operations.push(Object.assign({\n      kind: OpKind.TRANSACTION\n    }, params));\n    return this;\n  }\n  /**\r\n   *\r\n   * @description Add a transaction operation to the batch\r\n   *\r\n   * @param params Transfer operation parameter\r\n   */\n\n\n  withContractCall(params) {\n    return this.withTransfer(params.toTransferParams());\n  }\n  /**\r\n   *\r\n   * @description Add a delegation operation to the batch\r\n   *\r\n   * @param params Delegation operation parameter\r\n   */\n\n\n  withDelegation(params) {\n    if (params.source && validateAddress(params.source) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.source);\n    }\n\n    if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.delegate);\n    }\n\n    this.operations.push(Object.assign({\n      kind: OpKind.DELEGATION\n    }, params));\n    return this;\n  }\n  /**\r\n   *\r\n   * @description Add an activation operation to the batch\r\n   *\r\n   * @param params Activation operation parameter\r\n   */\n\n\n  withActivation(_ref11) {\n    let {\n      pkh,\n      secret\n    } = _ref11;\n\n    if (validateKeyHash(pkh) !== ValidationResult.VALID) {\n      throw new InvalidKeyHashError(pkh);\n    }\n\n    this.operations.push({\n      kind: OpKind.ACTIVATION,\n      pkh,\n      secret\n    });\n    return this;\n  }\n  /**\r\n   *\r\n   * @description Add an origination operation to the batch\r\n   *\r\n   * @param params Origination operation parameter\r\n   */\n\n\n  withOrigination(params) {\n    this.operations.push(Object.assign({\n      kind: OpKind.ORIGINATION\n    }, params));\n    return this;\n  }\n  /**\r\n   *\r\n   * @description Add an operation to register a global constant to the batch\r\n   *\r\n   * @param params RegisterGlobalConstant operation parameter\r\n   */\n\n\n  withRegisterGlobalConstant(params) {\n    this.operations.push(Object.assign({\n      kind: OpKind.REGISTER_GLOBAL_CONSTANT\n    }, params));\n    return this;\n  }\n  /**\r\n   *\r\n   * @description Add an operation to originate a rollup to the batch\r\n   *\r\n   * @param params Rollup origination operation parameter\r\n   */\n\n\n  withTxRollupOrigination(params) {\n    this.operations.push(Object.assign({\n      kind: OpKind.TX_ROLLUP_ORIGINATION\n    }, params));\n    return this;\n  }\n  /**\r\n   *\r\n   * @description Add an operation to submit a tx rollup batch to the batch\r\n   *\r\n   * @param params Tx rollup batch operation parameter\r\n   */\n\n\n  withTxRollupSubmitBatch(params) {\n    this.operations.push(Object.assign({\n      kind: OpKind.TX_ROLLUP_SUBMIT_BATCH\n    }, params));\n    return this;\n  }\n\n  getRPCOp(param) {\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          return createTransferOperation(Object.assign({}, param));\n\n        case OpKind.ORIGINATION:\n          return createOriginationOperation(yield this.context.parser.prepareCodeOrigination(Object.assign({}, param)));\n\n        case OpKind.DELEGATION:\n          return createSetDelegateOperation(Object.assign({}, param));\n\n        case OpKind.ACTIVATION:\n          return Object.assign({}, param);\n\n        case OpKind.REGISTER_GLOBAL_CONSTANT:\n          return createRegisterGlobalConstantOperation(Object.assign({}, param));\n\n        case OpKind.TX_ROLLUP_ORIGINATION:\n          return createTxRollupOriginationOperation(Object.assign({}, param));\n\n        case OpKind.TX_ROLLUP_SUBMIT_BATCH:\n          return createTxRollupBatchOperation(Object.assign({}, param));\n\n        default:\n          throw new InvalidOperationKindError(param.kind);\n      }\n    });\n  }\n  /**\r\n   *\r\n   * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array\r\n   *\r\n   * @param params Operations parameter\r\n   */\n\n\n  with(params) {\n    for (const param of params) {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          this.withTransfer(param);\n          break;\n\n        case OpKind.ORIGINATION:\n          this.withOrigination(param);\n          break;\n\n        case OpKind.DELEGATION:\n          this.withDelegation(param);\n          break;\n\n        case OpKind.ACTIVATION:\n          this.withActivation(param);\n          break;\n\n        case OpKind.REGISTER_GLOBAL_CONSTANT:\n          this.withRegisterGlobalConstant(param);\n          break;\n\n        case OpKind.TX_ROLLUP_ORIGINATION:\n          this.withTxRollupOrigination(param);\n          break;\n\n        case OpKind.TX_ROLLUP_SUBMIT_BATCH:\n          this.withTxRollupSubmitBatch(param);\n          break;\n\n        default:\n          throw new InvalidOperationKindError(param.kind);\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   *\r\n   * @description Forge and Inject the operation batch\r\n   *\r\n   * @param params Optionally specify the source of the operation\r\n   */\n\n\n  send(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const publicKeyHash = yield this.signer.publicKeyHash();\n      const publicKey = yield this.signer.publicKey();\n      const estimates = yield this.estimator.batch(this.operations);\n      const revealNeeded = yield this.isRevealOpNeeded(this.operations, publicKeyHash);\n      let i = revealNeeded ? 1 : 0;\n      const ops = [];\n\n      for (const op of this.operations) {\n        if (isOpWithFee(op)) {\n          const estimated = yield this.estimate(op, () => __awaiter(this, void 0, void 0, function* () {\n            return estimates[i];\n          }));\n          ops.push(yield this.getRPCOp(Object.assign(Object.assign({}, op), estimated)));\n        } else {\n          ops.push(Object.assign({}, op));\n        }\n\n        i++;\n      }\n\n      if (revealNeeded) {\n        const reveal = {\n          kind: OpKind.REVEAL\n        };\n        const estimatedReveal = yield this.estimate(reveal, () => __awaiter(this, void 0, void 0, function* () {\n          return estimates[0];\n        }));\n        ops.unshift(yield createRevealOperation(Object.assign({}, estimatedReveal), publicKeyHash, publicKey));\n      }\n\n      const source = params && params.source || publicKeyHash;\n      const prepared = yield this.prepareOperation({\n        operation: ops,\n        source\n      });\n      const opBytes = yield this.forge(prepared);\n      const {\n        hash,\n        context,\n        forgedBytes,\n        opResponse\n      } = yield this.signAndInject(opBytes);\n      return new BatchOperation(hash, ops, source, forgedBytes, opResponse, context);\n    });\n  }\n\n}\n\nclass RPCBatchProvider {\n  constructor(context, estimator) {\n    this.context = context;\n    this.estimator = estimator;\n  }\n  /***\r\n   *\r\n   * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch\r\n   *\r\n   * @param params List of operation to batch together\r\n   */\n\n\n  batch(params) {\n    const batch = new OperationBatch(this.context, this.estimator);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n\n}\n\nconst receiptFromOperation = function (op) {\n  let {\n    ALLOCATION_BURN,\n    ORIGINATION_BURN\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    ALLOCATION_BURN: 257,\n    ORIGINATION_BURN: 257\n  };\n  const operationResults = flattenOperationResult({\n    contents: op\n  });\n  let totalGas = new BigNumber(0);\n  let totalStorage = new BigNumber(0);\n  let totalFee = new BigNumber(0);\n  let totalOriginationBurn = new BigNumber(0);\n  let totalAllocationBurn = new BigNumber(0);\n  let totalPaidStorageDiff = new BigNumber(0);\n  operationResults.forEach(result => {\n    totalFee = totalFee.plus(result.fee || 0);\n    totalOriginationBurn = totalOriginationBurn.plus(Array.isArray(result.originated_contracts) ? result.originated_contracts.length * ORIGINATION_BURN : 0);\n    totalAllocationBurn = totalAllocationBurn.plus('allocated_destination_contract' in result ? ALLOCATION_BURN : 0);\n    totalGas = totalGas.plus(result.consumed_gas || 0);\n    totalPaidStorageDiff = totalPaidStorageDiff.plus('paid_storage_size_diff' in result ? Number(result.paid_storage_size_diff) || 0 : 0);\n  });\n  totalStorage = totalStorage.plus(totalAllocationBurn).plus(totalOriginationBurn).plus(totalPaidStorageDiff);\n  return {\n    totalFee,\n    totalGas,\n    totalStorage,\n    totalAllocationBurn,\n    totalOriginationBurn,\n    totalPaidStorageDiff,\n    totalStorageBurn: new BigNumber(totalStorage.multipliedBy(1000))\n  };\n};\n/**\r\n *  @category Error\r\n *  @description Error that indicates a missed block when polling to retrieve new head block. This may happen when the polling interval is greater than the time between blocks.\r\n */\n\n\nclass MissedBlockDuringConfirmationError extends Error {\n  constructor() {\n    super('Taquito missed a block while waiting for operation confirmation and was not able to find the operation');\n    this.name = 'MissedBlockDuringConfirmationError';\n  }\n\n}\n\nconst MAX_BRANCH_ANCESTORS = 60;\n/**\r\n * @description WalletOperation allows to monitor operation inclusion on chains and surface information related to the operation\r\n */\n\nclass WalletOperation {\n  /**\r\n   *\r\n   * @param opHash Operation hash\r\n   * @param raw Raw operation that was injected\r\n   * @param context Taquito context allowing access to rpc and signer\r\n   */\n  constructor(opHash, context, _newHead$) {\n    this.opHash = opHash;\n    this.context = context;\n    this._newHead$ = _newHead$;\n    this._operationResult = new ReplaySubject(1);\n    this._includedInBlock = new ReplaySubject(1);\n    this._included = false;\n    this.newHead$ = this._newHead$.pipe(tap(newHead => {\n      if (!this._included && this.lastHead && newHead.header.level - this.lastHead.header.level > 1) {\n        throw new MissedBlockDuringConfirmationError();\n      }\n\n      this.lastHead = newHead;\n    }), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    })); // Observable that emit once operation is seen in a block\n\n    this.confirmed$ = this.newHead$.pipe(map(head => {\n      for (const opGroup of head.operations) {\n        for (const op of opGroup) {\n          if (op.hash === this.opHash) {\n            this._included = true;\n\n            this._includedInBlock.next(head);\n\n            this._operationResult.next(op.contents); // Return the block where the operation was found\n\n\n            return head;\n          }\n        }\n      }\n    }), filter(x => {\n      return typeof x !== 'undefined';\n    }), first(), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n\n    if (validateOperation(this.opHash) !== ValidationResult.VALID) {\n      throw new InvalidOperationHashError(this.opHash);\n    }\n\n    this.confirmed$.pipe(first(), catchError(() => of(undefined))).subscribe();\n  }\n\n  operationResults() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._operationResult.pipe(first()).toPromise();\n    });\n  }\n  /**\r\n   * @description Receipt expose the total amount of tezos token burn and spent on fees\r\n   * The promise returned by receipt will resolve only once the transaction is included\r\n   */\n\n\n  receipt() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return receiptFromOperation(yield this.operationResults());\n    });\n  }\n\n  getCurrentConfirmation() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._included) {\n        return 0;\n      }\n\n      return combineLatest([this._includedInBlock, from(this.context.readProvider.getBlock('head'))]).pipe(map(_ref12 => {\n        let [foundAtBlock, head] = _ref12;\n        return head.header.level - foundAtBlock.header.level + 1;\n      }), first()).toPromise();\n    });\n  }\n\n  isInCurrentBranch() {\n    let tipBlockIdentifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'head';\n    return __awaiter(this, void 0, void 0, function* () {\n      // By default it is assumed that the operation is in the current branch\n      if (!this._included) {\n        return true;\n      }\n\n      const tipBlockHeaderLevel = yield this.context.readProvider.getBlockLevel(tipBlockIdentifier);\n      const inclusionBlock = yield this._includedInBlock.pipe(first()).toPromise();\n      const levelDiff = tipBlockHeaderLevel - inclusionBlock.header.level; // Block produced before the operation is included are assumed to be part of the current branch\n\n      if (levelDiff <= 0) {\n        return true;\n      }\n\n      const tipBlockLevel = Math.min(inclusionBlock.header.level + levelDiff, inclusionBlock.header.level + MAX_BRANCH_ANCESTORS);\n      const blocks = new Set(yield this.context.readProvider.getLiveBlocks(tipBlockLevel));\n      return blocks.has(inclusionBlock.hash);\n    });\n  }\n\n  confirmationObservable(confirmations) {\n    if (typeof confirmations !== 'undefined' && confirmations < 1) {\n      throw new InvalidConfirmationCountError('Confirmation count must be at least 1');\n    }\n\n    const {\n      defaultConfirmationCount\n    } = this.context.config;\n    const conf = confirmations !== undefined ? confirmations : defaultConfirmationCount;\n\n    if (conf === undefined) {\n      throw new ConfirmationUndefinedError('Default confirmation count can not be undefined!');\n    }\n\n    return combineLatest([this._includedInBlock, this.newHead$]).pipe(distinctUntilChanged((_ref13, _ref14) => {\n      let [, previousHead] = _ref13;\n      let [, newHead] = _ref14;\n      return previousHead.hash === newHead.hash;\n    }), map(_ref15 => {\n      let [foundAtBlock, head] = _ref15;\n      return {\n        block: head,\n        expectedConfirmation: conf,\n        currentConfirmation: head.header.level - foundAtBlock.header.level + 1,\n        completed: head.header.level - foundAtBlock.header.level >= conf - 1,\n        isInCurrentBranch: () => this.isInCurrentBranch(head.hash)\n      };\n    }), takeWhile(_ref16 => {\n      let {\n        completed\n      } = _ref16;\n      return !completed;\n    }, true));\n  }\n  /**\r\n   *\r\n   * @param confirmations [0] Number of confirmation to wait for\r\n   */\n\n\n  confirmation(confirmations) {\n    return this.confirmationObservable(confirmations).toPromise();\n  }\n\n}\n\nclass BatchWalletOperation extends WalletOperation {\n  constructor(opHash, context, newHead$) {\n    super(opHash, context, newHead$);\n    this.opHash = opHash;\n    this.context = context;\n  }\n\n  revealOperation() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const operationResult = yield this.operationResults();\n      return operationResult.find(x => x.kind === OpKind.REVEAL);\n    });\n  }\n\n  status() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._included) {\n        return 'pending';\n      }\n\n      const op = yield this.operationResults();\n      return op.filter(result => BATCH_KINDS.indexOf(result.kind) !== -1).map(result => {\n        if (hasMetadataWithResult(result)) {\n          return result.metadata.operation_result.status;\n        } else {\n          return 'unknown';\n        }\n      })[0] || 'unknown';\n    });\n  }\n\n}\n\nclass DelegationWalletOperation extends WalletOperation {\n  constructor(opHash, context, newHead$) {\n    super(opHash, context, newHead$);\n    this.opHash = opHash;\n    this.context = context;\n  }\n\n  revealOperation() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const operationResult = yield this.operationResults();\n      return operationResult.find(x => x.kind === OpKind.REVEAL);\n    });\n  }\n\n  delegationOperation() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const operationResult = yield this.operationResults();\n      return operationResult.find(x => x.kind === OpKind.DELEGATION);\n    });\n  }\n\n  status() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._included) {\n        return 'pending';\n      }\n\n      const op = yield this.delegationOperation();\n\n      if (!op) {\n        return 'unknown';\n      }\n\n      return op.metadata.operation_result.status;\n    });\n  }\n\n}\n\nclass OriginationWalletOperation extends WalletOperation {\n  constructor(opHash, context, newHead$) {\n    super(opHash, context, newHead$);\n    this.opHash = opHash;\n    this.context = context;\n  }\n\n  originationOperation() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const operationResult = yield this.operationResults();\n      return findWithKind(operationResult, OpKind.ORIGINATION);\n    });\n  }\n\n  revealOperation() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const operationResult = yield this.operationResults();\n      return findWithKind(operationResult, OpKind.REVEAL);\n    });\n  }\n\n  status() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._included) {\n        return 'pending';\n      }\n\n      const op = yield this.originationOperation();\n\n      if (!op) {\n        return 'unknown';\n      }\n\n      return op.metadata.operation_result.status;\n    });\n  }\n\n  contract() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const op = yield this.originationOperation();\n      const address = ((op === null || op === void 0 ? void 0 : op.metadata.operation_result.originated_contracts) || [])[0];\n      return this.context.wallet.at(address);\n    });\n  }\n\n}\n\nclass TransactionWalletOperation extends WalletOperation {\n  constructor(opHash, context, newHead$) {\n    super(opHash, context, newHead$);\n    this.opHash = opHash;\n    this.context = context;\n  }\n\n  revealOperation() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const operationResult = yield this.operationResults();\n      return operationResult.find(x => x.kind === OpKind.REVEAL);\n    });\n  }\n\n  transactionOperation() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const operationResult = yield this.operationResults();\n      return operationResult.find(x => x.kind === OpKind.TRANSACTION);\n    });\n  }\n\n  status() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._included) {\n        return 'pending';\n      }\n\n      const op = yield this.transactionOperation();\n\n      if (!op) {\n        return 'unknown';\n      }\n\n      return op.metadata.operation_result.status;\n    });\n  }\n\n}\n\nconst createNewPollingBasedHeadObservable = (sharedHeadOb, context, scheduler) => {\n  return sharedHeadOb.pipe(timeoutWith(context.config.confirmationPollingTimeoutSecond * 1000, throwError(new Error('Confirmation polling timed out')), scheduler), shareReplay({\n    refCount: true,\n    scheduler\n  }));\n};\n\nclass OperationFactory {\n  constructor(context) {\n    this.context = context; // Cache the last block for one second across all operations\n\n    this.sharedHeadObs = defer(() => {\n      return createObservableFromSubscription(this.context.stream.subscribeBlock('head'));\n    });\n  }\n\n  createNewHeadObservable() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return createNewPollingBasedHeadObservable(this.sharedHeadObs, this.context);\n    });\n  }\n\n  createPastBlockWalker(startBlock) {\n    let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return from(this.context.readProvider.getBlock(startBlock)).pipe(switchMap(block => {\n      if (count === 1) {\n        return of(block);\n      }\n\n      return range(block.header.level, count - 1).pipe(startWith(block), concatMap(level => __awaiter(this, void 0, void 0, function* () {\n        return this.context.readProvider.getBlock(typeof level === 'number' ? level : level.header.level);\n      })));\n    }));\n  }\n\n  createHeadObservableFromConfig(_ref17) {\n    let {\n      blockIdentifier\n    } = _ref17;\n    return __awaiter(this, void 0, void 0, function* () {\n      const observableSequence = [];\n\n      if (blockIdentifier) {\n        observableSequence.push(this.createPastBlockWalker(blockIdentifier));\n      }\n\n      observableSequence.push(yield this.createNewHeadObservable());\n      return concat(...observableSequence);\n    });\n  }\n\n  createOperation(hash) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return new WalletOperation(hash, this.context.clone(), yield this.createHeadObservableFromConfig(config));\n    });\n  }\n\n  createBatchOperation(hash) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return new BatchWalletOperation(hash, this.context.clone(), yield this.createHeadObservableFromConfig(config));\n    });\n  }\n\n  createTransactionOperation(hash) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return new TransactionWalletOperation(hash, this.context.clone(), yield this.createHeadObservableFromConfig(config));\n    });\n  }\n\n  createDelegationOperation(hash) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return new DelegationWalletOperation(hash, this.context.clone(), yield this.createHeadObservableFromConfig(config));\n    });\n  }\n\n  createOriginationOperation(hash) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return new OriginationWalletOperation(hash, this.context.clone(), yield this.createHeadObservableFromConfig(config));\n    });\n  }\n\n}\n\nclass RpcTzProvider extends OperationEmitter {\n  constructor(context) {\n    super(context);\n  }\n\n  getBalance(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (validateAddress(address) !== ValidationResult.VALID) {\n        throw new InvalidAddressError(address);\n      }\n\n      return this.context.readProvider.getBalance(address, 'head');\n    });\n  }\n\n  getDelegate(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (validateAddress(address) !== ValidationResult.VALID) {\n        throw new InvalidAddressError(address);\n      }\n\n      return this.context.readProvider.getDelegate(address, 'head');\n    });\n  }\n\n  activate(pkh, secret) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (validateKeyHash(pkh) !== ValidationResult.VALID) {\n        throw new InvalidKeyHashError(pkh);\n      }\n\n      const operation = {\n        kind: OpKind.ACTIVATION,\n        pkh,\n        secret\n      };\n      const prepared = yield this.prepareOperation({\n        operation: [operation],\n        source: pkh\n      });\n      const forgedBytes = yield this.forge(prepared);\n      const bytes = `${forgedBytes.opbytes}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`;\n      return new Operation(yield this.rpc.injectOperation(bytes), Object.assign(Object.assign({}, forgedBytes), {\n        opbytes: bytes\n      }), [], this.context.clone());\n    });\n  }\n\n}\n\nconst MINIMAL_FEE_MUTEZ = 100;\nconst MINIMAL_FEE_PER_BYTE_MUTEZ = 1;\nconst MINIMAL_FEE_PER_GAS_MUTEZ = 0.1;\nconst GAS_BUFFER = 100;\n/**\r\n * Examples of use :\r\n *\r\n *  Estimate a transfer operation :\r\n * ```\r\n * // Assuming that provider and signer are already configured...\r\n *\r\n * const amount = 2;\r\n * const address = 'tz1h3rQ8wBxFd8L9B3d7Jhaawu6Z568XU3xY';\r\n *\r\n * // Estimate gasLimit, storageLimit and fees for a transfer operation\r\n * const est = await Tezos.estimate.transfer({ to: address, amount: amount })\r\n * console.log(est.burnFeeMutez, est.gasLimit, est.minimalFeeMutez, est.storageLimit,\r\n *  est.suggestedFeeMutez, est.totalCost, est.usingBaseFeeMutez)\r\n *\r\n * ```\r\n *\r\n * Estimate a contract origination :\r\n * ```\r\n * // generic.json is referring to a Michelson Smart Contract\r\n *\r\n * const genericMultisigJSON = require('./generic.json')\r\n * const est = await Tezos.estimate.originate({\r\n *   code: genericMultisigJSON,\r\n *   storage: {\r\n *     stored_counter: 0,\r\n *     threshold: 1,\r\n *     keys: ['edpkuLxx9PQD8fZ45eUzrK3BhfDZJHhBuK4Zi49DcEGANwd2rpX82t']\r\n *   }\r\n * })\r\n * console.log(est.burnFeeMutez, est.gasLimit, est.minimalFeeMutez, est.storageLimit,\r\n *   est.suggestedFeeMutez, est.totalCost, est.usingBaseFeeMutez)\r\n *\r\n * ```\r\n */\n\nclass Estimate {\n  constructor(_milligasLimit, _storageLimit, opSize, minimalFeePerStorageByteMutez) {\n    let baseFeeMutez = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : MINIMAL_FEE_MUTEZ;\n    this._milligasLimit = _milligasLimit;\n    this._storageLimit = _storageLimit;\n    this.opSize = opSize;\n    this.minimalFeePerStorageByteMutez = minimalFeePerStorageByteMutez;\n    this.baseFeeMutez = baseFeeMutez;\n  }\n  /**\r\n   * @description The number of Mutez that will be burned for the storage of the [operation](https://tezos.gitlab.io/user/glossary.html#operations). (Storage + Allocation fees)\r\n   */\n\n\n  get burnFeeMutez() {\n    return this.roundUp(Number(this.storageLimit) * Number(this.minimalFeePerStorageByteMutez));\n  }\n  /**\r\n   * @description  The limit on the amount of storage an [operation](https://tezos.gitlab.io/user/glossary.html#operations) can use.\r\n   */\n\n\n  get storageLimit() {\n    const limit = Math.max(Number(this._storageLimit), 0);\n    return limit > 0 ? limit : 0;\n  }\n  /**\r\n   * @description The limit on the amount of [gas](https://tezos.gitlab.io/user/glossary.html#gas) a given operation can consume.\r\n   */\n\n\n  get gasLimit() {\n    return this.roundUp(Number(this._milligasLimit) / 1000 + GAS_BUFFER);\n  }\n\n  get operationFeeMutez() {\n    return (Number(this._milligasLimit) / 1000 + GAS_BUFFER) * MINIMAL_FEE_PER_GAS_MUTEZ + Number(this.opSize) * MINIMAL_FEE_PER_BYTE_MUTEZ;\n  }\n\n  roundUp(nanotez) {\n    return Math.ceil(Number(nanotez));\n  }\n  /**\r\n   * @description Minimum fees for the [operation](https://tezos.gitlab.io/user/glossary.html#operations) according to [baker](https://tezos.gitlab.io/user/glossary.html#baker) defaults.\r\n   */\n\n\n  get minimalFeeMutez() {\n    return this.roundUp(MINIMAL_FEE_MUTEZ + this.operationFeeMutez);\n  }\n  /**\r\n   * @description The suggested fee for the operation which includes minimal fees and a small buffer.\r\n   */\n\n\n  get suggestedFeeMutez() {\n    return this.roundUp(this.operationFeeMutez + MINIMAL_FEE_MUTEZ * 2);\n  }\n  /**\r\n   * @description Fees according to your specified base fee will ensure that at least minimum fees are used.\r\n   */\n\n\n  get usingBaseFeeMutez() {\n    return Math.max(Number(this.baseFeeMutez), MINIMAL_FEE_MUTEZ) + this.roundUp(this.operationFeeMutez);\n  }\n  /**\r\n   * @description The sum of `minimalFeeMutez` + `burnFeeMutez`.\r\n   */\n\n\n  get totalCost() {\n    return this.minimalFeeMutez + this.burnFeeMutez;\n  }\n  /**\r\n   * @description Since Delphinet, consumed gas is provided in milligas for more precision.\r\n   * This function returns an estimation of the gas that operation will consume in milligas.\r\n   */\n\n\n  get consumedMilligas() {\n    return Number(this._milligasLimit);\n  }\n\n  static createEstimateInstanceFromProperties(estimateProperties) {\n    let milligasLimit = 0;\n    let storageLimit = 0;\n    let opSize = 0;\n    let minimalFeePerStorageByteMutez = 0;\n    let baseFeeMutez;\n    estimateProperties.forEach(estimate => {\n      milligasLimit += estimate.milligasLimit;\n      storageLimit += estimate.storageLimit;\n      opSize += estimate.opSize;\n      minimalFeePerStorageByteMutez = Math.max(estimate.minimalFeePerStorageByteMutez, minimalFeePerStorageByteMutez);\n\n      if (estimate.baseFeeMutez) {\n        baseFeeMutez = baseFeeMutez ? baseFeeMutez + estimate.baseFeeMutez : estimate.baseFeeMutez;\n      }\n    });\n    return new Estimate(milligasLimit, storageLimit, opSize, minimalFeePerStorageByteMutez, baseFeeMutez);\n  }\n\n  static createArrayEstimateInstancesFromProperties(estimateProperties) {\n    return estimateProperties.map(x => new Estimate(x.milligasLimit, x.storageLimit, x.opSize, x.minimalFeePerStorageByteMutez, x.baseFeeMutez));\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates invalid public key being passed when doing a reveal operation estimate\r\n */\n\n\nclass RevealEstimateError extends Error {\n  constructor() {\n    super('Unable to estimate the reveal operation, the public key is unknown');\n    this.name = 'Reveal Estimate Error';\n  }\n\n}\n\nconst mergeLimits = (userDefinedLimit, defaultLimits) => {\n  return {\n    fee: typeof userDefinedLimit.fee === 'undefined' ? defaultLimits.fee : userDefinedLimit.fee,\n    gasLimit: typeof userDefinedLimit.gasLimit === 'undefined' ? defaultLimits.gasLimit : userDefinedLimit.gasLimit,\n    storageLimit: typeof userDefinedLimit.storageLimit === 'undefined' ? defaultLimits.storageLimit : userDefinedLimit.storageLimit\n  };\n}; // RPC requires a signature but does not verify it\n\n\nconst SIGNATURE_STUB = 'edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg';\n\nclass RPCEstimateProvider extends OperationEmitter {\n  constructor() {\n    super(...arguments);\n    this.ALLOCATION_STORAGE = 257;\n    this.ORIGINATION_STORAGE = 257;\n    this.OP_SIZE_REVEAL = 128;\n  }\n\n  getKeys() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const isSignerConfigured = this.context.isAnySignerConfigured();\n      return {\n        publicKeyHash: isSignerConfigured ? yield this.signer.publicKeyHash() : yield this.context.walletProvider.getPKH(),\n        publicKey: isSignerConfigured ? yield this.signer.publicKey() : undefined\n      };\n    });\n  } // Maximum values defined by the protocol\n\n\n  getAccountLimits(pkh, constants, numberOfOps) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const balance = yield this.context.readProvider.getBalance(pkh, 'head');\n      const {\n        hard_gas_limit_per_operation,\n        hard_gas_limit_per_block,\n        hard_storage_limit_per_operation,\n        cost_per_byte\n      } = constants;\n      return {\n        fee: 0,\n        gasLimit: numberOfOps ? Math.floor(this.ajustGasForBatchOperation(hard_gas_limit_per_block, hard_gas_limit_per_operation, numberOfOps).toNumber()) : hard_gas_limit_per_operation.toNumber(),\n        storageLimit: Math.floor(BigNumber.min(balance.dividedBy(cost_per_byte), hard_storage_limit_per_operation).toNumber())\n      };\n    });\n  } // Fix for Granada where the total gasLimit of a batch can not exceed the hard_gas_limit_per_block.\n  // If the total gasLimit of the batch is higher than the hard_gas_limit_per_block,\n  // the gasLimit is calculated by dividing the hard_gas_limit_per_block by the number of operation in the batch (numberOfOps).\n  // numberOfOps is incremented by 1 for safety in case a reveal operation is needed\n\n\n  ajustGasForBatchOperation(gasLimitBlock, gaslimitOp, numberOfOps) {\n    return BigNumber.min(gaslimitOp, gasLimitBlock.div(numberOfOps + 1));\n  }\n\n  getEstimationPropertiesFromOperationContent(content, size, costPerByte, tx_rollup_origination_size) {\n    const operationResults = flattenOperationResult({\n      contents: [content]\n    });\n    let totalGas = 0;\n    let totalMilligas = 0;\n    let totalStorage = 0;\n    operationResults.forEach(result => {\n      totalStorage += 'originated_contracts' in result && typeof result.originated_contracts !== 'undefined' ? result.originated_contracts.length * this.ORIGINATION_STORAGE : 0;\n      totalStorage += 'allocated_destination_contract' in result ? this.ALLOCATION_STORAGE : 0;\n      totalGas += Number(result.consumed_gas) || 0;\n      totalMilligas += Number(result.consumed_milligas) || 0;\n      totalStorage += 'paid_storage_size_diff' in result ? Number(result.paid_storage_size_diff) || 0 : 0;\n      totalStorage += 'storage_size' in result && 'global_address' in result ? Number(result.storage_size) || 0 : 0;\n      totalStorage += 'originated_rollup' in result ? tx_rollup_origination_size : 0;\n    });\n\n    if (totalGas !== 0 && totalMilligas === 0) {\n      // This will convert gas to milligas for Carthagenet where result does not contain consumed gas in milligas.\n      totalMilligas = totalGas * 1000;\n    }\n\n    if (isOpWithFee(content)) {\n      return {\n        milligasLimit: totalMilligas || 0,\n        storageLimit: Number(totalStorage || 0),\n        opSize: size,\n        minimalFeePerStorageByteMutez: costPerByte.toNumber()\n      };\n    } else {\n      return {\n        milligasLimit: 0,\n        storageLimit: 0,\n        opSize: size,\n        minimalFeePerStorageByteMutez: costPerByte.toNumber(),\n        baseFeeMutez: 0\n      };\n    }\n  }\n\n  prepareEstimate(params, constants, pkh) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const prepared = yield this.prepareOperation(params, pkh);\n      const {\n        opbytes,\n        opOb: {\n          branch,\n          contents\n        }\n      } = yield this.forge(prepared);\n      const operation = {\n        operation: {\n          branch,\n          contents,\n          signature: SIGNATURE_STUB\n        },\n        chain_id: yield this.context.readProvider.getChainId()\n      };\n      const {\n        opResponse\n      } = yield this.simulate(operation);\n      const {\n        cost_per_byte,\n        tx_rollup_origination_size\n      } = constants;\n      const errors = [...flattenErrors(opResponse, 'backtracked'), ...flattenErrors(opResponse)]; // Fail early in case of errors\n\n      if (errors.length) {\n        throw new TezosOperationError(errors, 'Error occurred during estimation');\n      }\n\n      let numberOfOps = 1;\n\n      if (Array.isArray(params.operation) && params.operation.length > 1) {\n        numberOfOps = opResponse.contents[0].kind === 'reveal' ? params.operation.length - 1 : params.operation.length;\n      }\n\n      return opResponse.contents.map(x => {\n        return this.getEstimationPropertiesFromOperationContent(x, // TODO: Calculate a specific opSize for each operation.\n        x.kind === 'reveal' ? this.OP_SIZE_REVEAL / 2 : opbytes.length / 2 / numberOfOps, cost_per_byte, tx_rollup_origination_size !== null && tx_rollup_origination_size !== void 0 ? tx_rollup_origination_size : 0);\n      });\n    });\n  }\n  /**\r\n   *\r\n   * @description Estimate gasLimit, storageLimit and fees for an origination operation\r\n   *\r\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\r\n   *\r\n   * @param OriginationOperation Originate operation parameter\r\n   */\n\n\n  originate(_a) {\n    var {\n      fee,\n      storageLimit,\n      gasLimit\n    } = _a,\n        rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        publicKeyHash\n      } = yield this.getKeys();\n      const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n      const DEFAULT_PARAMS = yield this.getAccountLimits(publicKeyHash, protocolConstants);\n      const op = yield createOriginationOperation(yield this.context.parser.prepareCodeOrigination(Object.assign(Object.assign({}, rest), mergeLimits({\n        fee,\n        storageLimit,\n        gasLimit\n      }, DEFAULT_PARAMS))));\n      const isRevealNeeded = yield this.isRevealOpNeeded([op], publicKeyHash);\n      const ops = isRevealNeeded ? yield this.addRevealOp([op], publicKeyHash) : op;\n      const estimateProperties = yield this.prepareEstimate({\n        operation: ops,\n        source: publicKeyHash\n      }, protocolConstants, publicKeyHash);\n\n      if (isRevealNeeded) {\n        estimateProperties.shift();\n      }\n\n      return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n    });\n  }\n  /**\r\n   *\r\n   * @description Estimate gasLimit, storageLimit and fees for an transfer operation\r\n   *\r\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\r\n   *\r\n   * @param TransferOperation Originate operation parameter\r\n   */\n\n\n  transfer(_a) {\n    var {\n      fee,\n      storageLimit,\n      gasLimit\n    } = _a,\n        rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (validateAddress(rest.to) !== ValidationResult.VALID) {\n        throw new InvalidAddressError(rest.to);\n      }\n\n      if (rest.source && validateAddress(rest.source) !== ValidationResult.VALID) {\n        throw new InvalidAddressError(rest.source);\n      }\n\n      const pkh = (yield this.getKeys()).publicKeyHash;\n      const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n      const op = yield createTransferOperation(Object.assign(Object.assign({}, rest), mergeLimits({\n        fee,\n        storageLimit,\n        gasLimit\n      }, DEFAULT_PARAMS)));\n      const isRevealNeeded = yield this.isRevealOpNeeded([op], pkh);\n      const ops = isRevealNeeded ? yield this.addRevealOp([op], pkh) : op;\n      const estimateProperties = yield this.prepareEstimate({\n        operation: ops,\n        source: pkh\n      }, protocolConstants, pkh);\n\n      if (isRevealNeeded) {\n        estimateProperties.shift();\n      }\n\n      return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n    });\n  }\n  /**\r\n   *\r\n   * @description Estimate gasLimit, storageLimit and fees for a delegate operation\r\n   *\r\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\r\n   *\r\n   * @param Estimate\r\n   */\n\n\n  setDelegate(_a) {\n    var {\n      fee,\n      gasLimit,\n      storageLimit\n    } = _a,\n        rest = __rest(_a, [\"fee\", \"gasLimit\", \"storageLimit\"]);\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (rest.source && validateAddress(rest.source) !== ValidationResult.VALID) {\n        throw new InvalidAddressError(rest.source);\n      }\n\n      if (rest.delegate && validateAddress(rest.delegate) !== ValidationResult.VALID) {\n        throw new InvalidAddressError(rest.delegate);\n      }\n\n      const pkh = (yield this.getKeys()).publicKeyHash;\n      const sourceOrDefault = rest.source || pkh;\n      const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n      const DEFAULT_PARAMS = yield this.getAccountLimits(sourceOrDefault, protocolConstants);\n      const op = yield createSetDelegateOperation(Object.assign(Object.assign({}, rest), mergeLimits({\n        fee,\n        storageLimit,\n        gasLimit\n      }, DEFAULT_PARAMS)));\n      const isRevealNeeded = yield this.isRevealOpNeeded([op], pkh);\n      const ops = isRevealNeeded ? yield this.addRevealOp([op], pkh) : op;\n      const estimateProperties = yield this.prepareEstimate({\n        operation: ops,\n        source: pkh\n      }, protocolConstants, pkh);\n\n      if (isRevealNeeded) {\n        estimateProperties.shift();\n      }\n\n      return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n    });\n  }\n  /**\r\n   *\r\n   * @description Estimate gasLimit, storageLimit and fees for a each operation in the batch\r\n   *\r\n   * @returns An array of Estimate objects. If a reveal operation is needed, the first element of the array is the Estimate for the reveal operation.\r\n   */\n\n\n  batch(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        publicKeyHash\n      } = yield this.getKeys();\n      let operations = [];\n      const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n      const DEFAULT_PARAMS = yield this.getAccountLimits(publicKeyHash, protocolConstants, params.length);\n\n      for (const param of params) {\n        switch (param.kind) {\n          case OpKind.TRANSACTION:\n            operations.push(yield createTransferOperation(Object.assign(Object.assign({}, param), mergeLimits(param, DEFAULT_PARAMS))));\n            break;\n\n          case OpKind.ORIGINATION:\n            operations.push(yield createOriginationOperation(yield this.context.parser.prepareCodeOrigination(Object.assign(Object.assign({}, param), mergeLimits(param, DEFAULT_PARAMS)))));\n            break;\n\n          case OpKind.DELEGATION:\n            operations.push(yield createSetDelegateOperation(Object.assign(Object.assign({}, param), mergeLimits(param, DEFAULT_PARAMS))));\n            break;\n\n          case OpKind.ACTIVATION:\n            operations.push(Object.assign(Object.assign({}, param), DEFAULT_PARAMS));\n            break;\n\n          case OpKind.REGISTER_GLOBAL_CONSTANT:\n            operations.push(yield createRegisterGlobalConstantOperation(Object.assign(Object.assign({}, param), mergeLimits(param, DEFAULT_PARAMS))));\n            break;\n\n          case OpKind.TX_ROLLUP_ORIGINATION:\n            operations.push(yield createTxRollupOriginationOperation(Object.assign(Object.assign({}, param), mergeLimits(param, DEFAULT_PARAMS))));\n            break;\n\n          case OpKind.TX_ROLLUP_SUBMIT_BATCH:\n            operations.push(yield createTxRollupBatchOperation(Object.assign(Object.assign({}, param), mergeLimits(param, DEFAULT_PARAMS))));\n            break;\n\n          default:\n            throw new InvalidOperationKindError(params.kind);\n        }\n      }\n\n      const isRevealNeeded = yield this.isRevealOpNeeded(operations, publicKeyHash);\n      operations = isRevealNeeded ? yield this.addRevealOp(operations, publicKeyHash) : operations;\n      const estimateProperties = yield this.prepareEstimate({\n        operation: operations,\n        source: publicKeyHash\n      }, protocolConstants, publicKeyHash);\n      return Estimate.createArrayEstimateInstancesFromProperties(estimateProperties);\n    });\n  }\n  /**\r\n   *\r\n   * @description Estimate gasLimit, storageLimit and fees for a delegate operation\r\n   *\r\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\r\n   *\r\n   * @param Estimate\r\n   */\n\n\n  registerDelegate(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pkh = (yield this.getKeys()).publicKeyHash;\n      const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n      const op = yield createRegisterDelegateOperation(Object.assign(Object.assign({}, params), DEFAULT_PARAMS), pkh);\n      const isRevealNeeded = yield this.isRevealOpNeeded([op], pkh);\n      const ops = isRevealNeeded ? yield this.addRevealOp([op], pkh) : op;\n      const estimateProperties = yield this.prepareEstimate({\n        operation: ops,\n        source: pkh\n      }, protocolConstants, pkh);\n\n      if (isRevealNeeded) {\n        estimateProperties.shift();\n      }\n\n      return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n    });\n  }\n  /**\r\n   *\r\n   * @description Estimate gasLimit, storageLimit and fees to reveal the current account\r\n   *\r\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation or undefined if the account is already revealed\r\n   *\r\n   * @param Estimate\r\n   */\n\n\n  reveal(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        publicKeyHash,\n        publicKey\n      } = yield this.getKeys();\n\n      if (!publicKey) {\n        throw new RevealEstimateError();\n      }\n\n      if (yield this.isAccountRevealRequired(publicKeyHash)) {\n        const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n        const DEFAULT_PARAMS = yield this.getAccountLimits(publicKeyHash, protocolConstants);\n        const op = yield createRevealOperation(Object.assign(Object.assign({}, params), DEFAULT_PARAMS), publicKeyHash, publicKey);\n        const estimateProperties = yield this.prepareEstimate({\n          operation: op,\n          source: publicKeyHash\n        }, protocolConstants, publicKeyHash);\n        return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n      }\n    });\n  }\n  /**\r\n   *\r\n   * @description Estimate gasLimit, storageLimit and fees for an registerGlobalConstant operation\r\n   *\r\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\r\n   *\r\n   * @param params registerGlobalConstant operation parameter\r\n   */\n\n\n  registerGlobalConstant(_a) {\n    var {\n      fee,\n      storageLimit,\n      gasLimit\n    } = _a,\n        rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const pkh = (yield this.getKeys()).publicKeyHash;\n      const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n      const op = yield createRegisterGlobalConstantOperation(Object.assign(Object.assign({}, rest), mergeLimits({\n        fee,\n        storageLimit,\n        gasLimit\n      }, DEFAULT_PARAMS)));\n      const isRevealNeeded = yield this.isRevealOpNeeded([op], pkh);\n      const ops = isRevealNeeded ? yield this.addRevealOp([op], pkh) : op;\n      const estimateProperties = yield this.prepareEstimate({\n        operation: ops,\n        source: pkh\n      }, protocolConstants, pkh);\n\n      if (isRevealNeeded) {\n        estimateProperties.shift();\n      }\n\n      return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n    });\n  }\n  /**\r\n   *\r\n   * @description Estimate gasLimit, storageLimit and fees for a rollup origination operation\r\n   *\r\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\r\n   *\r\n   * @param TxRollupOriginateParams Originate tx rollup operation parameter\r\n   */\n\n\n  txRollupOriginate(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      params = params ? params : {};\n\n      const {\n        fee,\n        storageLimit,\n        gasLimit\n      } = params,\n            rest = __rest(params, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n\n      const pkh = (yield this.getKeys()).publicKeyHash;\n      const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n      const op = yield createTxRollupOriginationOperation(Object.assign(Object.assign({}, rest), mergeLimits({\n        fee,\n        storageLimit,\n        gasLimit\n      }, DEFAULT_PARAMS)));\n      const isRevealNeeded = yield this.isRevealOpNeeded([op], pkh);\n      const ops = isRevealNeeded ? yield this.addRevealOp([op], pkh) : op;\n      const estimateProperties = yield this.prepareEstimate({\n        operation: ops,\n        source: pkh\n      }, protocolConstants, pkh);\n\n      if (isRevealNeeded) {\n        estimateProperties.shift();\n      }\n\n      return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n    });\n  }\n  /**\r\n   *\r\n   * @description Estimate gasLimit, storageLimit and fees for a tx rollup batch operation\r\n   *\r\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\r\n   *\r\n   * @param Estimate\r\n   */\n\n\n  txRollupSubmitBatch(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        fee,\n        storageLimit,\n        gasLimit\n      } = params,\n            rest = __rest(params, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n\n      const pkh = (yield this.getKeys()).publicKeyHash;\n      const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n      const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n      const op = yield createTxRollupBatchOperation(Object.assign(Object.assign({}, rest), mergeLimits({\n        fee,\n        storageLimit,\n        gasLimit\n      }, DEFAULT_PARAMS)));\n      const isRevealNeeded = yield this.isRevealOpNeeded([op], pkh);\n      const ops = isRevealNeeded ? yield this.addRevealOp([op], pkh) : op;\n      const estimateProperties = yield this.prepareEstimate({\n        operation: ops,\n        source: pkh\n      }, protocolConstants, pkh);\n\n      if (isRevealNeeded) {\n        estimateProperties.shift();\n      }\n\n      return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n    });\n  }\n\n  addRevealOp(op, pkh) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        publicKey\n      } = yield this.getKeys();\n\n      if (!publicKey) {\n        throw new RevealEstimateError();\n      }\n\n      op.unshift(yield createRevealOperation(Object.assign({\n        fee: DEFAULT_FEE.REVEAL,\n        gasLimit: DEFAULT_GAS_LIMIT.REVEAL,\n        storageLimit: DEFAULT_STORAGE_LIMIT.REVEAL\n      }), pkh, yield this.signer.publicKey()));\n      return op;\n    });\n  }\n\n}\n/**\r\n * @description Delegation operation provide utility function to fetch newly issued delegation\r\n *\r\n * @warn Currently support only one delegation per operation\r\n */\n\n\nclass DelegateOperation extends Operation {\n  constructor(hash, params, source, raw, results, context) {\n    super(hash, raw, results, context);\n    this.params = params;\n    this.source = source;\n  }\n\n  get operationResults() {\n    const delegationOp = Array.isArray(this.results) && this.results.find(op => op.kind === 'delegation');\n    const result = delegationOp && delegationOp.metadata && delegationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get delegate() {\n    return this.delegate;\n  }\n\n  get isRegisterOperation() {\n    return this.delegate === this.source;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get consumedGas() {\n    const consumedGas = this.operationResults && this.operationResults.consumed_gas;\n    return consumedGas ? consumedGas : undefined;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n\n}\n/**\r\n * @description Origination operation provide utility function to fetch newly originated contract\r\n *\r\n * @warn Currently support only one origination per operation\r\n */\n\n\nclass OriginationOperation extends Operation {\n  constructor(hash, params, raw, results, context, contractProvider) {\n    super(hash, raw, results, context);\n    this.params = params;\n    this.contractProvider = contractProvider;\n    const originatedContracts = this.operationResults && this.operationResults.originated_contracts;\n\n    if (Array.isArray(originatedContracts)) {\n      this.contractAddress = originatedContracts[0];\n    }\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get operationResults() {\n    const originationOp = Array.isArray(this.results) && this.results.find(op => op.kind === 'origination');\n    const result = originationOp && hasMetadataWithResult(originationOp) && originationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get consumedGas() {\n    const consumedGas = this.operationResults && this.operationResults.consumed_gas;\n    return consumedGas ? consumedGas : undefined;\n  }\n\n  get storageDiff() {\n    const storageDiff = this.operationResults && this.operationResults.paid_storage_size_diff;\n    return storageDiff ? storageDiff : undefined;\n  }\n\n  get storageSize() {\n    const storageSize = this.operationResults && this.operationResults.storage_size;\n    return storageSize ? storageSize : undefined;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n  /**\r\n   * @description Provide the contract abstract of the newly originated contract\r\n   */\n\n\n  contract(confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.contractAddress) {\n        throw new OriginationOperationError('No contract was originated in this operation');\n      }\n\n      yield this.confirmation(confirmations, timeout);\n      return this.contractProvider.at(this.contractAddress);\n    });\n  }\n\n}\n/**\r\n * @description RegisterGlobalConstantOperation provides utility functions to fetch a newly issued operation of kind register_global_constant\r\n */\n\n\nclass RegisterGlobalConstantOperation extends Operation {\n  constructor(hash, params, source, raw, results, context) {\n    super(hash, raw, results, context);\n    this.params = params;\n    this.source = source;\n    this.globalConstantHash = this.operationResults && this.operationResults.global_address;\n  }\n\n  get operationResults() {\n    const registerGlobalConstantOp = Array.isArray(this.results) && this.results.find(op => op.kind === 'register_global_constant');\n    const result = registerGlobalConstantOp && registerGlobalConstantOp.metadata && registerGlobalConstantOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get registeredExpression() {\n    return this.params.value;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n\n}\n/**\r\n * @description Reveal operation provides utility functions to fetch a newly issued revelation\r\n */\n\n\nclass RevealOperation extends Operation {\n  constructor(hash, params, source, raw, results, context) {\n    super(hash, raw, results, context);\n    this.params = params;\n    this.source = source;\n  }\n\n  get operationResults() {\n    const revealOp = Array.isArray(this.results) && this.results.find(op => op.kind === 'reveal');\n    return revealOp ? [revealOp] : [];\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    const txResult = operationResults[0];\n\n    if (txResult) {\n      return txResult.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get publicKey() {\n    return this.params.public_key;\n  }\n\n  sumProp(arr, prop) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  get consumedGas() {\n    return String(this.sumProp(flattenOperationResult({\n      contents: this.operationResults\n    }), 'consumed_gas'));\n  }\n\n  get storageDiff() {\n    return String(this.sumProp(flattenOperationResult({\n      contents: this.operationResults\n    }), 'paid_storage_size_diff'));\n  }\n\n  get storageSize() {\n    return String(this.sumProp(flattenOperationResult({\n      contents: this.operationResults\n    }), 'storage_size'));\n  }\n\n  get errors() {\n    return flattenErrors({\n      contents: this.operationResults\n    });\n  }\n\n}\n/**\r\n * @description Transaction operation provides utility functions to fetch a newly issued transaction\r\n *\r\n * @warn Currently supports one transaction per operation\r\n */\n\n\nclass TransactionOperation extends Operation {\n  constructor(hash, params, source, raw, results, context) {\n    super(hash, raw, results, context);\n    this.params = params;\n    this.source = source;\n  }\n\n  get operationResults() {\n    const transactionOp = Array.isArray(this.results) && this.results.find(op => op.kind === 'transaction');\n    return transactionOp ? [transactionOp] : [];\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    const txResult = operationResults[0];\n\n    if (txResult) {\n      return txResult.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get amount() {\n    return new BigNumber(this.params.amount);\n  }\n\n  get destination() {\n    return this.params.destination;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  sumProp(arr, prop) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  get consumedGas() {\n    return String(this.sumProp(flattenOperationResult({\n      contents: this.operationResults\n    }), 'consumed_gas'));\n  }\n\n  get storageDiff() {\n    return String(this.sumProp(flattenOperationResult({\n      contents: this.operationResults\n    }), 'paid_storage_size_diff'));\n  }\n\n  get storageSize() {\n    return String(this.sumProp(flattenOperationResult({\n      contents: this.operationResults\n    }), 'storage_size'));\n  }\n\n  get errors() {\n    return flattenErrors({\n      contents: this.operationResults\n    });\n  }\n\n}\n\nconst setDelegate = key => {\n  return [{\n    prim: 'DROP'\n  }, {\n    prim: 'NIL',\n    args: [{\n      prim: 'operation'\n    }]\n  }, {\n    prim: 'PUSH',\n    args: [{\n      prim: 'key_hash'\n    }, {\n      string: key\n    }]\n  }, {\n    prim: 'SOME'\n  }, {\n    prim: 'SET_DELEGATE'\n  }, {\n    prim: 'CONS'\n  }];\n};\n\nconst transferImplicit = (key, mutez) => {\n  return [{\n    prim: 'DROP'\n  }, {\n    prim: 'NIL',\n    args: [{\n      prim: 'operation'\n    }]\n  }, {\n    prim: 'PUSH',\n    args: [{\n      prim: 'key_hash'\n    }, {\n      string: key\n    }]\n  }, {\n    prim: 'IMPLICIT_ACCOUNT'\n  }, {\n    prim: 'PUSH',\n    args: [{\n      prim: 'mutez'\n    }, {\n      int: `${mutez}`\n    }]\n  }, {\n    prim: 'UNIT'\n  }, {\n    prim: 'TRANSFER_TOKENS'\n  }, {\n    prim: 'CONS'\n  }];\n};\n\nconst removeDelegate = () => {\n  return [{\n    prim: 'DROP'\n  }, {\n    prim: 'NIL',\n    args: [{\n      prim: 'operation'\n    }]\n  }, {\n    prim: 'NONE',\n    args: [{\n      prim: 'key_hash'\n    }]\n  }, {\n    prim: 'SET_DELEGATE'\n  }, {\n    prim: 'CONS'\n  }];\n};\n\nconst transferToContract = (key, amount) => {\n  return [{\n    prim: 'DROP'\n  }, {\n    prim: 'NIL',\n    args: [{\n      prim: 'operation'\n    }]\n  }, {\n    prim: 'PUSH',\n    args: [{\n      prim: 'address'\n    }, {\n      string: key\n    }]\n  }, {\n    prim: 'CONTRACT',\n    args: [{\n      prim: 'unit'\n    }]\n  }, [{\n    prim: 'IF_NONE',\n    args: [[[{\n      prim: 'UNIT'\n    }, {\n      prim: 'FAILWITH'\n    }]], []]\n  }], {\n    prim: 'PUSH',\n    args: [{\n      prim: 'mutez'\n    }, {\n      int: `${amount}`\n    }]\n  }, {\n    prim: 'UNIT'\n  }, {\n    prim: 'TRANSFER_TOKENS'\n  }, {\n    prim: 'CONS'\n  }];\n};\n\nconst MANAGER_LAMBDA = {\n  setDelegate,\n  removeDelegate,\n  transferImplicit,\n  transferToContract\n};\nconst code = [{\n  prim: 'parameter',\n  args: [{\n    prim: 'lambda',\n    args: [{\n      prim: 'unit'\n    }, {\n      prim: 'pair',\n      args: [{\n        prim: 'list',\n        args: [{\n          prim: 'operation'\n        }]\n      }, {\n        prim: 'unit'\n      }]\n    }]\n  }]\n}, {\n  prim: 'storage',\n  args: [{\n    prim: 'unit'\n  }]\n}, {\n  prim: 'code',\n  args: [[{\n    prim: 'CAR'\n  }, {\n    prim: 'UNIT'\n  }, {\n    prim: 'EXEC'\n  }]]\n}];\nconst storage = 'Unit';\nconst VIEW_LAMBDA = {\n  code,\n  storage\n};\n\nfunction compose(functioncomposer1, functioncomposer2) {\n  return (contractAbstraction, context) => functioncomposer2(functioncomposer1(contractAbstraction, context), context);\n}\n/**\r\n * @description Utility class to send smart contract operation\r\n * The format for the arguments is the flattened representation\r\n */\n\n\nclass ContractMethod {\n  constructor(provider, address, parameterSchema, name, args) {\n    let isMultipleEntrypoint = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    let isAnonymous = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.provider = provider;\n    this.address = address;\n    this.parameterSchema = parameterSchema;\n    this.name = name;\n    this.args = args;\n    this.isMultipleEntrypoint = isMultipleEntrypoint;\n    this.isAnonymous = isAnonymous;\n  }\n\n  validateArgs(args, schema, name) {\n    const sigs = schema.ExtractSignatures();\n\n    if (!sigs.find(x => x.length === args.length)) {\n      throw new InvalidParameterError(name, sigs, args);\n    }\n  }\n  /**\r\n   * @description Get the schema of the smart contract method\r\n   */\n\n\n  get schema() {\n    return this.isAnonymous ? this.parameterSchema.ExtractSchema()[this.name] : this.parameterSchema.ExtractSchema();\n  }\n  /**\r\n   * @description Get the signature of the smart contract method\r\n   */\n\n\n  getSignature() {\n    if (this.isAnonymous) {\n      const sig = this.parameterSchema.ExtractSignatures().find(x => x[0] === this.name);\n\n      if (sig) {\n        sig.shift();\n        return sig;\n      }\n    } else {\n      const sig = this.parameterSchema.ExtractSignatures();\n      return sig.length == 1 ? sig[0] : sig;\n    }\n  }\n  /**\r\n   *\r\n   * @description Send the smart contract operation\r\n   *\r\n   * @param Options generic operation parameter\r\n   */\n\n\n  send() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this.provider instanceof Wallet) {\n      return this.provider.transfer(this.toTransferParams(params)).send();\n    } else {\n      return this.provider.transfer(this.toTransferParams(params));\n    }\n  }\n  /**\r\n   *\r\n   * @description Create transfer params to be used with TezosToolkit.contract.transfer methods\r\n   *\r\n   * @param Options generic transfer operation parameters\r\n   */\n\n\n  toTransferParams() {\n    let {\n      fee,\n      gasLimit,\n      storageLimit,\n      source,\n      amount = 0,\n      mutez = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const fullTransferParams = {\n      to: this.address,\n      amount,\n      fee,\n      mutez,\n      source,\n      gasLimit,\n      storageLimit,\n      parameter: {\n        entrypoint: this.isMultipleEntrypoint ? this.name : DEFAULT_SMART_CONTRACT_METHOD_NAME,\n        value: this.isAnonymous ? this.parameterSchema.Encode(this.name, ...this.args) : this.parameterSchema.Encode(...this.args)\n      }\n    };\n    return fullTransferParams;\n  }\n\n}\n\nclass WalletOperationBatch {\n  constructor(walletProvider, context) {\n    this.walletProvider = walletProvider;\n    this.context = context;\n    this.operations = [];\n  }\n  /**\r\n   *\r\n   * @description Add a transaction operation to the batch\r\n   *\r\n   * @param params Transfer operation parameter\r\n   */\n\n\n  withTransfer(params) {\n    if (validateAddress(params.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.to);\n    }\n\n    this.operations.push(Object.assign({\n      kind: OpKind.TRANSACTION\n    }, params));\n    return this;\n  }\n  /**\r\n   *\r\n   * @description Add a transaction operation to the batch\r\n   *\r\n   * @param params Transfer operation parameter\r\n   */\n\n\n  withContractCall(params) {\n    return this.withTransfer(params.toTransferParams());\n  }\n  /**\r\n   *\r\n   * @description Add a delegation operation to the batch\r\n   *\r\n   * @param params Delegation operation parameter\r\n   */\n\n\n  withDelegation(params) {\n    if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.delegate);\n    }\n\n    this.operations.push(Object.assign({\n      kind: OpKind.DELEGATION\n    }, params));\n    return this;\n  }\n  /**\r\n   *\r\n   * @description Add an origination operation to the batch\r\n   *\r\n   * @param params Origination operation parameter\r\n   */\n\n\n  withOrigination(params) {\n    this.operations.push(Object.assign({\n      kind: OpKind.ORIGINATION\n    }, params));\n    return this;\n  }\n\n  mapOperation(param) {\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          return this.walletProvider.mapTransferParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () {\n            return param;\n          }));\n\n        case OpKind.ORIGINATION:\n          return this.walletProvider.mapOriginateParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () {\n            return this.context.parser.prepareCodeOrigination(Object.assign({}, param));\n          }));\n\n        case OpKind.DELEGATION:\n          return this.walletProvider.mapDelegateParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () {\n            return param;\n          }));\n\n        default:\n          throw new InvalidOperationKindError(param.kind);\n      }\n    });\n  }\n  /**\r\n   *\r\n   * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array\r\n   *\r\n   * @param params Operations parameter\r\n   */\n\n\n  with(params) {\n    for (const param of params) {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          this.withTransfer(param);\n          break;\n\n        case OpKind.ORIGINATION:\n          this.withOrigination(param);\n          break;\n\n        case OpKind.DELEGATION:\n          this.withDelegation(param);\n          break;\n\n        default:\n          throw new InvalidOperationKindError(param.kind);\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   *\r\n   * @description Submit batch operation to wallet\r\n   *\r\n   */\n\n\n  send() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const ops = [];\n\n      for (const op of this.operations) {\n        ops.push(yield this.mapOperation(op));\n      }\n\n      const opHash = yield this.walletProvider.sendOperations(ops);\n      return this.context.operationFactory.createBatchOperation(opHash);\n    });\n  }\n\n}\n\nclass Wallet {\n  constructor(context) {\n    this.context = context;\n\n    this.walletCommand = send => {\n      return {\n        send\n      };\n    };\n  }\n\n  get walletProvider() {\n    return this.context.walletProvider;\n  }\n  /**\r\n   * @description Retrieve the PKH of the account that is currently in use by the wallet\r\n   *\r\n   * @param option Option to use while fetching the PKH.\r\n   * If forceRefetch is specified the wallet provider implementation will refetch the PKH from the wallet\r\n   */\n\n\n  pkh() {\n    let {\n      forceRefetch\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._pkh || forceRefetch) {\n        this._pkh = yield this.walletProvider.getPKH();\n      }\n\n      return this._pkh;\n    });\n  }\n  /**\r\n   *\r\n   * @description Originate a new contract according to the script in parameters.\r\n   *\r\n   * @returns An operation handle with the result from the rpc node\r\n   *\r\n   * @param originateParams Originate operation parameter\r\n   */\n\n\n  originate(params) {\n    return this.walletCommand(() => __awaiter(this, void 0, void 0, function* () {\n      const mappedParams = yield this.walletProvider.mapOriginateParamsToWalletParams(() => this.context.parser.prepareCodeOrigination(Object.assign({}, params)));\n      const opHash = yield this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createOriginationOperation(opHash);\n    }));\n  }\n  /**\r\n   *\r\n   * @description Set the delegate for a contract.\r\n   *\r\n   * @returns An operation handle with the result from the rpc node\r\n   *\r\n   * @param delegateParams operation parameter\r\n   */\n\n\n  setDelegate(params) {\n    if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.delegate);\n    }\n\n    return this.walletCommand(() => __awaiter(this, void 0, void 0, function* () {\n      const mappedParams = yield this.walletProvider.mapDelegateParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () {\n        return params;\n      }));\n      const opHash = yield this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createDelegationOperation(opHash);\n    }));\n  }\n  /**\r\n   *\r\n   * @description Register the current address as delegate.\r\n   *\r\n   * @returns An operation handle with the result from the rpc node\r\n   *\r\n   */\n\n\n  registerDelegate() {\n    return this.walletCommand(() => __awaiter(this, void 0, void 0, function* () {\n      const mappedParams = yield this.walletProvider.mapDelegateParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () {\n        const delegate = yield this.pkh();\n        return {\n          delegate\n        };\n      }));\n      const opHash = yield this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createDelegationOperation(opHash);\n    }));\n  }\n  /**\r\n   *\r\n   * @description Transfer tezos tokens from current address to a specific address or call a smart contract.\r\n   *\r\n   * @returns A wallet command from which we can send the operation to the wallet\r\n   *\r\n   * @param params operation parameter\r\n   */\n\n\n  transfer(params) {\n    if (validateAddress(params.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.to);\n    }\n\n    return this.walletCommand(() => __awaiter(this, void 0, void 0, function* () {\n      const mappedParams = yield this.walletProvider.mapTransferParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () {\n        return params;\n      }));\n      const opHash = yield this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createTransactionOperation(opHash);\n    }));\n  }\n  /**\r\n   *\r\n   * @description Create a batch of operation\r\n   *\r\n   * @returns A batch object from which we can add more operation or send a command to the wallet to execute the batch\r\n   *\r\n   * @param params List of operation to initialize the batch with\r\n   */\n\n\n  batch(params) {\n    const batch = new WalletOperationBatch(this.walletProvider, this.context);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n  /**\r\n   *\r\n   * @description Create an smart contract abstraction for the address specified. Calling entrypoints with the returned\r\n   * smart contract abstraction will leverage the wallet provider to make smart contract calls\r\n   *\r\n   * @param address Smart contract address\r\n   */\n\n\n  at(address) {\n    let contractAbstractionComposer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x => x;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (validateContractAddress(address) !== ValidationResult.VALID) {\n        throw new InvalidContractAddressError(address);\n      }\n\n      const rpc = this.context.withExtensions().rpc;\n      const readProvider = this.context.withExtensions().readProvider;\n      const script = yield readProvider.getScript(address, 'head');\n      const entrypoints = yield readProvider.getEntrypoints(address);\n      const abs = new ContractAbstraction(address, script, this, this.context.contract, entrypoints, rpc, readProvider);\n      return contractAbstractionComposer(abs, this.context);\n    });\n  }\n\n}\n\nclass LegacyWalletProvider {\n  constructor(context) {\n    this.context = context;\n  }\n\n  getPKH() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.context.signer.publicKeyHash();\n    });\n  }\n\n  mapTransferParamsToWalletParams(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return attachKind(yield params(), OpKind.TRANSACTION);\n    });\n  }\n\n  mapOriginateParamsToWalletParams(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return attachKind(yield params(), OpKind.ORIGINATION);\n    });\n  }\n\n  mapDelegateParamsToWalletParams(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return attachKind(yield params(), OpKind.DELEGATION);\n    });\n  }\n\n  sendOperations(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const op = yield this.context.batch.batch(params).send();\n      return op.hash;\n    });\n  }\n\n}\n/**\r\n * @description Utility class to send smart contract operation\r\n * The format for the arguments is the object representation\r\n */\n\n\nclass ContractMethodObject {\n  constructor(provider, address, parameterSchema, name) {\n    let args = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'unit';\n    let isMultipleEntrypoint = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    let isAnonymous = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.provider = provider;\n    this.address = address;\n    this.parameterSchema = parameterSchema;\n    this.name = name;\n    this.args = args;\n    this.isMultipleEntrypoint = isMultipleEntrypoint;\n    this.isAnonymous = isAnonymous;\n  }\n  /**\r\n   * @description Get the signature of the smart contract method\r\n   */\n\n\n  getSignature() {\n    return this.isAnonymous ? this.parameterSchema.ExtractSchema()[this.name] : this.parameterSchema.ExtractSchema();\n  }\n  /**\r\n   *\r\n   * @description Send the smart contract operation\r\n   *\r\n   * @param Options generic operation parameter\r\n   */\n\n\n  send() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this.provider instanceof Wallet) {\n      return this.provider.transfer(this.toTransferParams(params)).send();\n    } else {\n      return this.provider.transfer(this.toTransferParams(params));\n    }\n  }\n  /**\r\n   *\r\n   * @description Create transfer params to be used with TezosToolkit.contract.transfer methods\r\n   *\r\n   * @param Options generic transfer operation parameters\r\n   */\n\n\n  toTransferParams() {\n    let {\n      fee,\n      gasLimit,\n      storageLimit,\n      source,\n      amount = 0,\n      mutez = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const fullTransferParams = {\n      to: this.address,\n      amount,\n      fee,\n      mutez,\n      source,\n      gasLimit,\n      storageLimit,\n      parameter: {\n        entrypoint: this.isMultipleEntrypoint ? this.name : DEFAULT_SMART_CONTRACT_METHOD_NAME,\n        value: this.isAnonymous ? this.parameterSchema.EncodeObject({\n          [this.name]: this.args\n        }) : this.parameterSchema.EncodeObject(this.args)\n      }\n    };\n    return fullTransferParams;\n  }\n\n}\n\nconst runCodeHelper = function (viewArgsType, viewReturnType, contractStorageType, viewInstructions, viewArgs, contractStorageValue, balance, chain_id, source) {\n  let amount = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : '0';\n  return {\n    script: [{\n      prim: 'parameter',\n      args: [{\n        prim: 'pair',\n        args: [viewArgsType, contractStorageType]\n      }]\n    }, {\n      prim: 'storage',\n      args: [{\n        prim: 'option',\n        args: [viewReturnType]\n      }]\n    }, {\n      prim: 'code',\n      args: [[{\n        prim: 'CAR'\n      }, viewInstructions, {\n        prim: 'SOME'\n      }, {\n        prim: 'NIL',\n        args: [{\n          prim: 'operation'\n        }]\n      }, {\n        prim: 'PAIR'\n      }]]\n    }],\n    storage: {\n      prim: 'None'\n    },\n    input: {\n      prim: 'Pair',\n      args: [viewArgs, contractStorageValue]\n    },\n    amount,\n    balance,\n    chain_id,\n    source\n  };\n};\n\nclass OnChainView {\n  constructor(_rpc, _readProvider, _contractAddress, _smartContractViewSchema, _contractStorageType) {\n    let _args = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'Unit';\n\n    this._rpc = _rpc;\n    this._readProvider = _readProvider;\n    this._contractAddress = _contractAddress;\n    this._smartContractViewSchema = _smartContractViewSchema;\n    this._contractStorageType = _contractStorageType;\n    this._args = _args;\n  }\n  /**\r\n   * @description Get the signature of the smart contract view\r\n   */\n\n\n  getSignature() {\n    return {\n      parameter: this._smartContractViewSchema.extractArgsSchema(),\n      result: this._smartContractViewSchema.extractResultSchema()\n    };\n  }\n  /**\r\n   * @description Get the result of the view simulation\r\n   * @param executionContext.source the public key hash of the account who initialized this view execution.\r\n   * @param executionContext.viewCaller the contract address which is the caller of view.\r\n   */\n\n\n  executeView(executionContext) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.verifyContextExecution(executionContext);\n      const balance = (yield this._readProvider.getBalance(this._contractAddress, 'head')).toString();\n      const chainId = yield this._readProvider.getChainId();\n      const storage = yield this._readProvider.getStorage(this._contractAddress, 'head');\n      return this.executeViewAndDecodeResult(runCodeHelper(this._smartContractViewSchema.viewArgsType, this._smartContractViewSchema.viewReturnType, this._contractStorageType, this.adaptViewCodeToContext(this._smartContractViewSchema.instructions, executionContext.viewCaller, balance), this.transformArgsToMichelson(), storage, balance, chainId, executionContext.source));\n    });\n  }\n\n  verifyContextExecution(executionContext) {\n    if (executionContext.source && validateAddress(executionContext.source) !== ValidationResult.VALID) {\n      throw new InvalidViewSimulationContext(`The source account who initialized the view execution is invalid: ${executionContext.source}.`);\n    }\n\n    if (!executionContext.viewCaller || validateAddress(executionContext.viewCaller) !== ValidationResult.VALID) {\n      throw new InvalidViewSimulationContext(`The contract which is the caller of view is invalid: ${executionContext.viewCaller}.`);\n    }\n  }\n\n  transformArgsToMichelson() {\n    try {\n      return this._smartContractViewSchema.encodeViewArgs(this._args);\n    } catch (error) {\n      throw new InvalidViewParameterError(this._smartContractViewSchema.viewName, this.getSignature(), this._args, error);\n    }\n  }\n  /**\r\n   * @description Loops through the view's instructions and replace BALANCE, SENDER, SELF_ADDRESS and AMOUNT with Michelson expressions that match the current context, if applicable.\r\n   *\r\n   * Certain specific instructions have different semantics in view:\r\n   * BALANCE represents the current amount of mutez held by the contract where view is;\r\n   * SENDER represents the contract which is the caller of view;\r\n   * SELF_ADDRESS represents the contract where view is;\r\n   * AMOUNT is always 0 mutez.\r\n   *\r\n   */\n\n\n  adaptViewCodeToContext(instructions, viewCaller, contractBalance) {\n    const instructionsToReplace = {\n      BALANCE: [{\n        prim: 'PUSH',\n        args: [{\n          prim: 'mutez'\n        }, {\n          int: contractBalance\n        }]\n      }],\n      SENDER: [{\n        prim: 'PUSH',\n        args: [{\n          prim: 'address'\n        }, {\n          string: viewCaller\n        }]\n      }],\n      SELF_ADDRESS: [{\n        prim: 'PUSH',\n        args: [{\n          prim: 'address'\n        }, {\n          string: this._contractAddress\n        }]\n      }],\n      AMOUNT: [{\n        prim: 'PUSH',\n        args: [{\n          prim: 'mutez'\n        }, {\n          int: '0'\n        }]\n      }]\n    };\n    instructions.forEach((inst, i) => {\n      if (inst.prim in instructionsToReplace) {\n        instructions[i] = Object(instructionsToReplace)[inst.prim];\n      }\n\n      if (inst.args && inst.args.length !== 0) {\n        this.adaptViewCodeToContext(inst.args, viewCaller, contractBalance);\n      } else if (Array.isArray(inst)) {\n        this.adaptViewCodeToContext(inst, viewCaller, contractBalance);\n      }\n    });\n    return instructions;\n  }\n\n  executeViewAndDecodeResult(viewScript) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let storage;\n\n      try {\n        storage = (yield this._rpc.runCode(viewScript)).storage;\n      } catch (error) {\n        const failWith = validateAndExtractFailwith(error);\n        throw failWith ? new ViewSimulationError(`The simulation of the on-chain view named ${this._smartContractViewSchema.viewName} failed with: ${JSON.stringify(failWith)}`, this._smartContractViewSchema.viewName, failWith, error) : error;\n      }\n\n      if (!storage.args) {\n        throw new ViewSimulationError(`View simulation failed with an invalid result: ${storage}`, this._smartContractViewSchema.viewName);\n      }\n\n      return this._smartContractViewSchema.decodeViewResult(storage.args[0]);\n    });\n  }\n\n}\n\nclass ContractMethodFactory {\n  constructor(provider, contractAddress) {\n    this.provider = provider;\n    this.contractAddress = contractAddress;\n  }\n\n  createContractMethodFlatParams(smartContractMethodSchema, smartContractMethodName, args) {\n    let isMultipleEntrypoint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let isAnonymous = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    return new ContractMethod(this.provider, this.contractAddress, smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint, isAnonymous);\n  }\n\n  createContractMethodObjectParam(smartContractMethodSchema, smartContractMethodName, args) {\n    let isMultipleEntrypoint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let isAnonymous = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    return new ContractMethodObject(this.provider, this.contractAddress, smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint, isAnonymous);\n  }\n\n  createContractViewObjectParam(rpc, readProvider, smartContractViewSchema, contractStorageType, viewArgs) {\n    return new OnChainView(rpc, readProvider, this.contractAddress, smartContractViewSchema, contractStorageType, viewArgs);\n  }\n\n}\n\nconst DEFAULT_SMART_CONTRACT_METHOD_NAME = 'default';\n/**\r\n * @description Utility class to retrieve data from a smart contract's storage without incurring fees via a contract's view method\r\n */\n\nclass ContractView {\n  constructor(currentContract, name, callbackParametersSchema, parameterSchema, args, rpc, readProvider) {\n    this.currentContract = currentContract;\n    this.name = name;\n    this.callbackParametersSchema = callbackParametersSchema;\n    this.parameterSchema = parameterSchema;\n    this.args = args;\n    this.rpc = rpc;\n    this.readProvider = readProvider;\n  }\n\n  read(chainId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (validateContractAddress(chainId !== null && chainId !== void 0 ? chainId : \"\") == ValidationResult.VALID) {\n        throw new DeprecationError(`Since version 12, the lambda view no longer depends on a lambda contract. The read method no longer accepts a contract address as a parameter.`);\n      } else if (chainId && validateChain(chainId) !== ValidationResult.VALID) {\n        throw new InvalidChainIdError(chainId);\n      }\n\n      const arg = this.parameterSchema.Encode(...this.args);\n      const result = yield this.rpc.runView({\n        contract: this.currentContract.address,\n        entrypoint: this.name,\n        input: arg,\n        chain_id: chainId ? chainId : yield this.readProvider.getChainId()\n      });\n      return this.callbackParametersSchema.Execute(result.data);\n    });\n  }\n\n}\n\nconst validateArgs = (args, schema, name) => {\n  const sigs = schema.ExtractSignatures();\n\n  if (!sigs.find(x => x.length === args.length)) {\n    throw new InvalidParameterError(name, sigs, args);\n  }\n}; // lambda view tzip4\n\n\nconst isView = entrypoint => {\n  let isView = false;\n\n  if ('prim' in entrypoint && entrypoint.prim === 'pair' && entrypoint.args) {\n    const lastElement = entrypoint.args[entrypoint.args.length - 1];\n\n    if ('prim' in lastElement && lastElement.prim === 'contract') {\n      isView = true;\n    }\n  }\n\n  return isView;\n};\n/**\r\n * @description Smart contract abstraction\r\n */\n\n\nclass ContractAbstraction {\n  constructor(address, script, provider, storageProvider, entrypoints, rpc, readProvider) {\n    this.address = address;\n    this.script = script;\n    this.storageProvider = storageProvider;\n    this.entrypoints = entrypoints;\n    this.rpc = rpc;\n    this.readProvider = readProvider;\n    /**\r\n     * @description Contains methods that are implemented by the target Tezos Smart Contract, and offers the user to call the Smart Contract methods as if they were native TS/JS methods.\r\n     * NB: if the contract contains annotation it will include named properties; if not it will be indexed by a number.\r\n     *\r\n     */\n\n    this.methods = {};\n    /**\r\n     * @description Contains methods that are implemented by the target Tezos Smart Contract, and offers the user to call the Smart Contract methods as if they were native TS/JS methods.\r\n     * `methodsObject` serves the exact same purpose as the `methods` member. The difference is that it allows passing the parameter in an object format when calling the smart contract method (instead of the flattened representation)\r\n     * NB: if the contract contains annotation it will include named properties; if not it will be indexed by a number.\r\n     *\r\n     */\n\n    this.methodsObject = {};\n    /**\r\n     * @description Contains lamda views (tzip4) that are implemented by the target Tezos Smart Contract, and offers the user to call the lambda views as if they were native TS/JS methods.\r\n     * NB: These are the view defined in the tzip4 standard, not the views introduced by the Hangzhou protocol.\r\n     */\n\n    this.views = {};\n    /**\r\n     * @description Contains on-chain views that are defined by the target Tezos Smart Contract, and offers the user to simulate the views execution as if they were native TS/JS methods.\r\n     * NB: the expected format for the parameter when calling a smart contract view is the object format (same format as for the storage) and not the flattened representation.\r\n     *\r\n     */\n\n    this.contractViews = {};\n    this.contractMethodFactory = new ContractMethodFactory(provider, address);\n    this.schema = Schema.fromRPCResponse({\n      script: this.script\n    });\n    this.parameterSchema = ParameterSchema.fromRPCResponse({\n      script: this.script\n    });\n    this.viewSchema = ViewSchema.fromRPCResponse({\n      script: this.script\n    });\n\n    if (this.viewSchema.length !== 0) {\n      this._initializeOnChainViews(this, rpc, this.readProvider, this.viewSchema);\n    }\n\n    this._initializeMethods(this, this.entrypoints.entrypoints, this.rpc, this.readProvider);\n  }\n\n  _initializeMethods(currentContract, entrypoints, rpc, readProvider) {\n    const parameterSchema = this.parameterSchema;\n    const keys = Object.keys(entrypoints);\n\n    if (parameterSchema.isMultipleEntryPoint) {\n      keys.forEach(smartContractMethodName => {\n        const smartContractMethodSchema = new ParameterSchema(entrypoints[smartContractMethodName]);\n\n        this.methods[smartContractMethodName] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return currentContract.contractMethodFactory.createContractMethodFlatParams(smartContractMethodSchema, smartContractMethodName, args);\n        };\n\n        this.methodsObject[smartContractMethodName] = function (args) {\n          return currentContract.contractMethodFactory.createContractMethodObjectParam(smartContractMethodSchema, smartContractMethodName, args);\n        };\n\n        if (isView(entrypoints[smartContractMethodName])) {\n          const view = function () {\n            const entrypointParamWithoutCallback = entrypoints[smartContractMethodName].args[0];\n            const smartContractMethodSchemaWithoutCallback = new ParameterSchema(entrypointParamWithoutCallback);\n            const parametersCallback = entrypoints[smartContractMethodName].args[1].args[0];\n            const smartContractMethodCallbackSchema = new ParameterSchema(parametersCallback);\n\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n\n            validateArgs(args, smartContractMethodSchemaWithoutCallback, smartContractMethodName);\n            return new ContractView(currentContract, smartContractMethodName, smartContractMethodCallbackSchema, smartContractMethodSchemaWithoutCallback, args, rpc, readProvider);\n          };\n\n          this.views[smartContractMethodName] = view;\n        }\n      }); // Deal with methods with no annotations which were not discovered by the RPC endpoint\n      // Methods with no annotations are discovered using parameter schema\n\n      const anonymousMethods = Object.keys(parameterSchema.ExtractSchema()).filter(key => Object.keys(entrypoints).indexOf(key) === -1);\n      anonymousMethods.forEach(smartContractMethodName => {\n        this.methods[smartContractMethodName] = function () {\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n\n          return currentContract.contractMethodFactory.createContractMethodFlatParams(parameterSchema, smartContractMethodName, args, false, true);\n        };\n\n        this.methodsObject[smartContractMethodName] = function (args) {\n          return currentContract.contractMethodFactory.createContractMethodObjectParam(parameterSchema, smartContractMethodName, args, false, true);\n        };\n      });\n    } else {\n      const smartContractMethodSchema = this.parameterSchema;\n\n      this.methods[DEFAULT_SMART_CONTRACT_METHOD_NAME] = function () {\n        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        return currentContract.contractMethodFactory.createContractMethodFlatParams(smartContractMethodSchema, DEFAULT_SMART_CONTRACT_METHOD_NAME, args, false);\n      };\n\n      this.methodsObject[DEFAULT_SMART_CONTRACT_METHOD_NAME] = function (args) {\n        return currentContract.contractMethodFactory.createContractMethodObjectParam(smartContractMethodSchema, DEFAULT_SMART_CONTRACT_METHOD_NAME, args, false);\n      };\n    }\n  }\n\n  _initializeOnChainViews(currentContract, rpc, readProvider, allContractViews) {\n    const storageType = this.schema.val;\n    allContractViews.forEach(viewSchema => {\n      this.contractViews[viewSchema.viewName] = function (args) {\n        return currentContract.contractMethodFactory.createContractViewObjectParam(rpc, readProvider, viewSchema, storageType, args);\n      };\n    });\n  }\n  /**\r\n   * @description Return a friendly representation of the smart contract storage\r\n   */\n\n\n  storage() {\n    return this.storageProvider.getStorage(this.address, this.schema);\n  }\n  /**\r\n   *\r\n   * @description Return a friendly representation of the smart contract big map value\r\n   *\r\n   * @param key BigMap key to fetch\r\n   *\r\n   * @deprecated getBigMapKey has been deprecated in favor of getBigMapKeyByID\r\n   *\r\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\r\n   */\n\n\n  bigMap(key) {\n    return this.storageProvider.getBigMapKey(this.address, key, this.schema);\n  }\n\n}\n\nclass BigMapAbstraction {\n  constructor(id, schema, provider) {\n    this.id = id;\n    this.schema = schema;\n    this.provider = provider;\n  }\n  /**\r\n   *\r\n   * @description Fetch one value in a big map\r\n   *\r\n   * @param keysToEncode Key to query (will be encoded properly according to the schema)\r\n   * @param block optional block level to fetch the values from (head will be use by default)\r\n   * @returns Return a well formatted json object of a big map value or undefined if the key is not found in the big map\r\n   *\r\n   */\n\n\n  get(keyToEncode, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const id = yield this.provider.getBigMapKeyByID(this.id.toString(), keyToEncode, this.schema, block);\n        return id;\n      } catch (e) {\n        if (e instanceof HttpResponseError && e.status === STATUS_CODE.NOT_FOUND) {\n          return undefined;\n        } else {\n          throw e;\n        }\n      }\n    });\n  }\n  /**\r\n   *\r\n   * @description Fetch multiple values in a big map\r\n   * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it.\r\n   * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.\r\n   * If one of the keys does not exist in the big map, its value will be set to undefined.\r\n   *\r\n   * @param keysToEncode Array of keys to query (will be encoded properly according to the schema)\r\n   * @param block optional block level to fetch the values from\r\n   * @param batchSize optional batch size representing the number of requests to execute in parallel\r\n   * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format\r\n   *\r\n   */\n\n\n  getMultipleValues(keysToEncode, block) {\n    let batchSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.provider.getBigMapKeysByID(this.id.toString(), keysToEncode, this.schema, block, batchSize);\n    });\n  }\n\n  toJSON() {\n    return this.id.toString();\n  }\n\n  toString() {\n    return this.id.toString();\n  }\n\n}\n\nclass SaplingStateAbstraction {\n  constructor(id, provider) {\n    this.id = id;\n    this.provider = provider;\n  }\n  /**\r\n   *\r\n   * @description Fetch the sapling state\r\n   *\r\n   * @param block optional block level to fetch the values from (head will be use by default)\r\n   * @returns Return a json object of the sapling_state\r\n   *\r\n   */\n\n\n  getSaplingDiff(block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.provider.getSaplingDiffByID(this.id.toString(), block);\n    });\n  }\n\n  getId() {\n    return this.id.toString();\n  }\n\n} // Override the default michelson encoder semantic to provide richer abstraction over storage properties\n\n\nconst smartContractAbstractionSemantic = provider => ({\n  // Provide a specific abstraction for BigMaps\n  big_map: (val, code) => {\n    if (!val || !('int' in val) || val.int === undefined) {\n      // Return an empty object in case of missing big map ID\n      return {};\n    } else {\n      const schema = new Schema(code);\n      return new BigMapAbstraction(new BigNumber(val.int), schema, provider);\n    }\n  },\n  sapling_state: val => {\n    if (!val || !('int' in val) || val.int === undefined) {\n      // Return an empty object in case of missing sapling state ID\n      return {};\n    } else {\n      return new SaplingStateAbstraction(new BigNumber(val.int), provider);\n    }\n  }\n  /*\r\n  // TODO: embed useful other abstractions\r\n  'contract':  () => {},\r\n  'address':  () => {}\r\n  */\n\n});\n/**\r\n * @description TxRollupOriginationOperation provides utility functions to fetch a newly issued operation of kind tx_rollup_origination\r\n */\n\n\nclass TxRollupOriginationOperation extends Operation {\n  constructor(hash, params, source, raw, results, context) {\n    super(hash, raw, results, context);\n    this.params = params;\n    this.source = source;\n    this.originatedRollup = this.operationResults && this.operationResults.originated_rollup;\n  }\n\n  get operationResults() {\n    const rollupOriginationOp = Array.isArray(this.results) && this.results.find(op => op.kind === 'tx_rollup_origination');\n    const result = rollupOriginationOp && rollupOriginationOp.metadata && rollupOriginationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n\n}\n/**\r\n * @description TxRollupBatchOperation provides utility functions to fetch a newly issued operation of kind tx_rollup_submit_batch\r\n */\n\n\nclass TxRollupBatchOperation extends Operation {\n  constructor(hash, params, source, raw, results, context) {\n    super(hash, raw, results, context);\n    this.params = params;\n    this.source = source;\n  }\n\n  get operationResults() {\n    const txrollupBatchOp = Array.isArray(this.results) && this.results.find(op => op.kind === 'tx_rollup_submit_batch');\n    const result = txrollupBatchOp && txrollupBatchOp.metadata && txrollupBatchOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get content() {\n    return this.params.content;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n\n}\n\nclass RpcContractProvider extends OperationEmitter {\n  constructor(context, estimator) {\n    super(context);\n    this.estimator = estimator;\n    this.contractProviderTypeSymbol = Symbol.for('taquito--provider-type-symbol');\n  }\n  /**\r\n   *\r\n   * @description Return a well formatted json object of the contract storage\r\n   *\r\n   * @param contract contract address you want to get the storage from\r\n   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\r\n   *\r\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-script\r\n   */\n\n\n  getStorage(contract, schema) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (validateContractAddress(contract) !== ValidationResult.VALID) {\n        throw new InvalidContractAddressError(contract);\n      }\n\n      const script = yield this.context.readProvider.getScript(contract, 'head');\n\n      if (!schema) {\n        schema = script;\n      }\n\n      let contractSchema;\n\n      if (Schema.isSchema(schema)) {\n        contractSchema = schema;\n      } else {\n        contractSchema = Schema.fromRPCResponse({\n          script: schema\n        });\n      }\n\n      return contractSchema.Execute(script.storage, smartContractAbstractionSemantic(this)); // Cast into T because only the caller can know the true type of the storage\n    });\n  }\n  /**\r\n   *\r\n   * @description Return a well formatted json object of the contract big map storage\r\n   *\r\n   * @param contract contract address you want to get the storage from\r\n   * @param key contract big map key to fetch value from\r\n   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\r\n   *\r\n   * @deprecated Deprecated in favor of getBigMapKeyByID\r\n   *\r\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\r\n   */\n\n\n  getBigMapKey(contract, key, schema) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (validateContractAddress(contract) !== ValidationResult.VALID) {\n        throw new InvalidContractAddressError(contract);\n      }\n\n      if (!schema) {\n        schema = (yield this.rpc.getContract(contract)).script;\n      }\n\n      let contractSchema;\n\n      if (Schema.isSchema(schema)) {\n        contractSchema = schema;\n      } else {\n        contractSchema = Schema.fromRPCResponse({\n          script: schema\n        });\n      }\n\n      const encodedKey = contractSchema.EncodeBigMapKey(key);\n      const val = yield this.rpc.getBigMapKey(contract, encodedKey);\n      return contractSchema.ExecuteOnBigMapValue(val); // Cast into T because only the caller can know the true type of the storage\n    });\n  }\n  /**\r\n   *\r\n   * @description Return a well formatted json object of a big map value\r\n   *\r\n   * @param id Big Map ID\r\n   * @param keyToEncode key to query (will be encoded properly according to the schema)\r\n   * @param schema Big Map schema (can be determined using your contract type)\r\n   * @param block optional block level to fetch the values from\r\n   *\r\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr\r\n   */\n\n\n  getBigMapKeyByID(id, keyToEncode, schema, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        key,\n        type\n      } = schema.EncodeBigMapKey(keyToEncode);\n      const {\n        packed\n      } = yield this.context.packer.packData({\n        data: key,\n        type\n      });\n      const encodedExpr = encodeExpr(packed);\n      const bigMapValue = block ? yield this.context.readProvider.getBigMapValue({\n        id: id.toString(),\n        expr: encodedExpr\n      }, block) : yield this.context.readProvider.getBigMapValue({\n        id: id.toString(),\n        expr: encodedExpr\n      }, 'head');\n      return schema.ExecuteOnBigMapValue(bigMapValue, smartContractAbstractionSemantic(this));\n    });\n  }\n  /**\r\n   *\r\n   * @description Fetch multiple values in a big map\r\n   * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it.\r\n   * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.\r\n   * If one of the keys does not exist in the big map, its value will be set to undefined.\r\n   *\r\n   * @param id Big Map ID\r\n   * @param keys Array of keys to query (will be encoded properly according to the schema)\r\n   * @param schema Big Map schema (can be determined using your contract type)\r\n   * @param block optional block level to fetch the values from\r\n   * @param batchSize optional batch size representing the number of requests to execute in parallel\r\n   * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format\r\n   *\r\n   */\n\n\n  getBigMapKeysByID(id, keys, schema, block) {\n    let batchSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5;\n    return __awaiter(this, void 0, void 0, function* () {\n      const level = yield this.getBlockForRequest(keys, block);\n      const bigMapValues = new MichelsonMap(); // Execute batch of promises in series\n\n      let position = 0;\n      let results = [];\n\n      while (position < keys.length) {\n        const keysBatch = keys.slice(position, position + batchSize);\n        const batch = keysBatch.map(keyToEncode => this.getBigMapValueOrUndefined(keyToEncode, id, schema, level));\n        results = [...results, ...(yield Promise.all(batch))];\n        position += batchSize;\n      }\n\n      for (let i = 0; i < results.length; i++) {\n        bigMapValues.set(keys[i], results[i]);\n      }\n\n      return bigMapValues;\n    });\n  }\n\n  getBlockForRequest(keys, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return keys.length === 1 || typeof block !== 'undefined' ? block : yield this.context.readProvider.getBlockLevel('head');\n    });\n  }\n\n  getBigMapValueOrUndefined(keyToEncode, id, schema, level) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield this.getBigMapKeyByID(id, keyToEncode, schema, level);\n      } catch (ex) {\n        if (ex instanceof HttpResponseError && ex.status === STATUS_CODE.NOT_FOUND) {\n          return;\n        } else {\n          throw ex;\n        }\n      }\n    });\n  }\n  /**\r\n   *\r\n   * @description Return a well formatted json object of a sapling state\r\n   *\r\n   * @param id Sapling state ID\r\n   * @param block optional block level to fetch the value from\r\n   *\r\n   */\n\n\n  getSaplingDiffByID(id, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const saplingState = block ? yield this.context.readProvider.getSaplingDiffById({\n        id: id.toString()\n      }, block) : yield this.context.readProvider.getSaplingDiffById({\n        id: id.toString()\n      }, 'head');\n      return saplingState;\n    });\n  }\n\n  addRevealOperationIfNeeded(operation, publicKeyHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (isOpRequireReveal(operation)) {\n        const ops = [operation];\n        const publicKey = yield this.signer.publicKey();\n        const estimateReveal = yield this.estimator.reveal();\n\n        if (estimateReveal) {\n          const reveal = {\n            kind: OpKind.REVEAL\n          };\n          const estimatedReveal = yield this.estimate(reveal, () => __awaiter(this, void 0, void 0, function* () {\n            return estimateReveal;\n          }));\n          ops.unshift(yield createRevealOperation(Object.assign({}, estimatedReveal), publicKeyHash, publicKey));\n          return ops;\n        }\n      }\n\n      return operation;\n    });\n  }\n  /**\r\n   *\r\n   * @description Originate a new contract according to the script in parameters. Will sign and inject an operation using the current context\r\n   *\r\n   * @returns An operation handle with the result from the rpc node\r\n   *\r\n   * @warn You cannot specify storage and init at the same time (use init to pass the raw michelson representation of storage)\r\n   *\r\n   * @param OriginationOperation Originate operation parameter\r\n   */\n\n\n  originate(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const estimate = yield this.estimate(params, this.estimator.originate.bind(this.estimator));\n      const publicKeyHash = yield this.signer.publicKeyHash();\n      const operation = yield createOriginationOperation(yield this.context.parser.prepareCodeOrigination(Object.assign(Object.assign({}, params), estimate)));\n      const ops = yield this.addRevealOperationIfNeeded(operation, publicKeyHash);\n      const preparedOrigination = yield this.prepareOperation({\n        operation: ops,\n        source: publicKeyHash\n      });\n      const forgedOrigination = yield this.forge(preparedOrigination);\n      const {\n        hash,\n        context,\n        forgedBytes,\n        opResponse\n      } = yield this.signAndInject(forgedOrigination);\n      return new OriginationOperation(hash, operation, forgedBytes, opResponse, context, this);\n    });\n  }\n  /**\r\n   *\r\n   * @description Set the delegate for a contract. Will sign and inject an operation using the current context\r\n   *\r\n   * @returns An operation handle with the result from the rpc node\r\n   *\r\n   * @param SetDelegate operation parameter\r\n   */\n\n\n  setDelegate(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (params.source && validateAddress(params.source) !== ValidationResult.VALID) {\n        throw new InvalidAddressError(params.source);\n      }\n\n      if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n        throw new InvalidAddressError(params.delegate);\n      } // Since babylon delegation source cannot smart contract\n\n\n      if (/kt1/i.test(params.source)) {\n        throw new InvalidDelegationSource(params.source);\n      }\n\n      const estimate = yield this.estimate(params, this.estimator.setDelegate.bind(this.estimator));\n      const publicKeyHash = yield this.signer.publicKeyHash();\n      const operation = yield createSetDelegateOperation(Object.assign(Object.assign({}, params), estimate));\n      const sourceOrDefault = params.source || publicKeyHash;\n      const ops = yield this.addRevealOperationIfNeeded(operation, publicKeyHash);\n      const prepared = yield this.prepareOperation({\n        operation: ops,\n        source: sourceOrDefault\n      });\n      const opBytes = yield this.forge(prepared);\n      const {\n        hash,\n        context,\n        forgedBytes,\n        opResponse\n      } = yield this.signAndInject(opBytes);\n      return new DelegateOperation(hash, operation, sourceOrDefault, forgedBytes, opResponse, context);\n    });\n  }\n  /**\r\n   *\r\n   * @description Register the current address as delegate. Will sign and inject an operation using the current context\r\n   *\r\n   * @returns An operation handle with the result from the rpc node\r\n   *\r\n   * @param RegisterDelegate operation parameter\r\n   */\n\n\n  registerDelegate(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const estimate = yield this.estimate(params, this.estimator.registerDelegate.bind(this.estimator));\n      const source = yield this.signer.publicKeyHash();\n      const operation = yield createRegisterDelegateOperation(Object.assign(Object.assign({}, params), estimate), source);\n      const ops = yield this.addRevealOperationIfNeeded(operation, source);\n      const prepared = yield this.prepareOperation({\n        operation: ops\n      });\n      const opBytes = yield this.forge(prepared);\n      const {\n        hash,\n        context,\n        forgedBytes,\n        opResponse\n      } = yield this.signAndInject(opBytes);\n      return new DelegateOperation(hash, operation, source, forgedBytes, opResponse, context);\n    });\n  }\n  /**\r\n   *\r\n   * @description Transfer tz from current address to a specific address. Will sign and inject an operation using the current context\r\n   *\r\n   * @returns An operation handle with the result from the rpc node\r\n   *\r\n   * @param Transfer operation parameter\r\n   */\n\n\n  transfer(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (validateAddress(params.to) !== ValidationResult.VALID) {\n        throw new InvalidAddressError(params.to);\n      }\n\n      if (params.source && validateAddress(params.source) !== ValidationResult.VALID) {\n        throw new InvalidAddressError(params.source);\n      }\n\n      const publickKeyHash = yield this.signer.publicKeyHash();\n      const estimate = yield this.estimate(params, this.estimator.transfer.bind(this.estimator));\n      const operation = yield createTransferOperation(Object.assign(Object.assign({}, params), estimate));\n      const source = params.source || publickKeyHash;\n      const ops = yield this.addRevealOperationIfNeeded(operation, publickKeyHash);\n      const prepared = yield this.prepareOperation({\n        operation: ops,\n        source: params.source\n      });\n      const opBytes = yield this.forge(prepared);\n      const {\n        hash,\n        context,\n        forgedBytes,\n        opResponse\n      } = yield this.signAndInject(opBytes);\n      return new TransactionOperation(hash, operation, source, forgedBytes, opResponse, context);\n    });\n  }\n  /**\r\n   *\r\n   * @description Reveal the current address. Will throw an error if the address is already revealed.\r\n   *\r\n   * @returns An operation handle with the result from the rpc node\r\n   *\r\n   * @param RevealParams operation parameter\r\n   */\n\n\n  reveal(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const publicKeyHash = yield this.signer.publicKeyHash();\n      const estimateReveal = yield this.estimator.reveal(params);\n\n      if (estimateReveal) {\n        const estimated = yield this.estimate(params, () => __awaiter(this, void 0, void 0, function* () {\n          return estimateReveal;\n        }));\n        const operation = yield createRevealOperation(Object.assign({}, estimated), publicKeyHash, yield this.signer.publicKey());\n        const prepared = yield this.prepareOperation({\n          operation,\n          source: publicKeyHash\n        });\n        const opBytes = yield this.forge(prepared);\n        const {\n          hash,\n          context,\n          forgedBytes,\n          opResponse\n        } = yield this.signAndInject(opBytes);\n        return new RevealOperation(hash, operation, publicKeyHash, forgedBytes, opResponse, context);\n      } else {\n        throw new RevealOperationError(`The publicKeyHash '${publicKeyHash}' has already been revealed.`);\n      }\n    });\n  }\n  /**\r\n   *\r\n   * @description Register a Micheline expression in a global table of constants. Will sign and inject an operation using the current context\r\n   *\r\n   * @returns An operation handle with the result from the rpc node\r\n   *\r\n   * @param params registerGlobalConstant operation parameter\r\n   */\n\n\n  registerGlobalConstant(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const publickKeyHash = yield this.signer.publicKeyHash();\n      const estimate = yield this.estimate(params, this.estimator.registerGlobalConstant.bind(this.estimator));\n      const operation = yield createRegisterGlobalConstantOperation(Object.assign(Object.assign({}, params), estimate));\n      const ops = yield this.addRevealOperationIfNeeded(operation, publickKeyHash);\n      const prepared = yield this.prepareOperation({\n        operation: ops,\n        source: publickKeyHash\n      });\n      const opBytes = yield this.forge(prepared);\n      const {\n        hash,\n        context,\n        forgedBytes,\n        opResponse\n      } = yield this.signAndInject(opBytes);\n      return new RegisterGlobalConstantOperation(hash, operation, publickKeyHash, forgedBytes, opResponse, context);\n    });\n  }\n  /**\r\n   *\r\n   * @description Originate a new tx rollup. Will sign and inject an operation using the current context\r\n   *\r\n   * @returns An operation handle with the result from the rpc node\r\n   *\r\n   * @param TxRollupOriginateParams Originate rollup operation parameter\r\n   */\n\n\n  txRollupOriginate(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const publicKeyHash = yield this.signer.publicKeyHash();\n      const estimate = yield this.estimate(params ? params : {}, this.estimator.txRollupOriginate.bind(this.estimator));\n      const operation = yield createTxRollupOriginationOperation(Object.assign(Object.assign({}, params), estimate));\n      const ops = yield this.addRevealOperationIfNeeded(operation, publicKeyHash);\n      const prepared = yield this.prepareOperation({\n        operation: ops,\n        source: publicKeyHash\n      });\n      const opBytes = yield this.forge(prepared);\n      const {\n        hash,\n        context,\n        forgedBytes,\n        opResponse\n      } = yield this.signAndInject(opBytes);\n      return new TxRollupOriginationOperation(hash, operation, publicKeyHash, forgedBytes, opResponse, context);\n    });\n  }\n  /**\r\n   *\r\n   * @description Submit a tx rollup batch. Will sign and inject an operation using the current context\r\n   *\r\n   * @returns An operation handle with the result from the rpc node\r\n   *\r\n   * @param TxRollupBatchParams Batch tx rollup operation parameter\r\n   */\n\n\n  txRollupSubmitBatch(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const publicKeyHash = yield this.signer.publicKeyHash();\n      const estimate = yield this.estimate(params, this.estimator.txRollupSubmitBatch.bind(this.estimator));\n      const operation = yield createTxRollupBatchOperation(Object.assign(Object.assign({}, params), estimate));\n      const ops = yield this.addRevealOperationIfNeeded(operation, publicKeyHash);\n      const prepared = yield this.prepareOperation({\n        operation: ops,\n        source: publicKeyHash\n      });\n      const opBytes = yield this.forge(prepared);\n      const {\n        hash,\n        context,\n        forgedBytes,\n        opResponse\n      } = yield this.signAndInject(opBytes);\n      return new TxRollupBatchOperation(hash, operation, publicKeyHash, forgedBytes, opResponse, context);\n    });\n  }\n\n  at(address) {\n    let contractAbstractionComposer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x => x;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (validateContractAddress(address) !== ValidationResult.VALID) {\n        throw new InvalidContractAddressError(address);\n      }\n\n      const rpc = this.context.withExtensions().rpc;\n      const readProvider = this.context.withExtensions().readProvider;\n      const script = yield readProvider.getScript(address, 'head');\n      const entrypoints = yield readProvider.getEntrypoints(address);\n      const abs = new ContractAbstraction(address, script, this, this, entrypoints, rpc, readProvider);\n      return contractAbstractionComposer(abs, this.context);\n    });\n  }\n  /**\r\n   *\r\n   * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch\r\n   *\r\n   * @returns A batch object from which we can add more operation or send a command to execute the batch\r\n   *\r\n   * @param params List of operation to batch together\r\n   */\n\n\n  batch(params) {\n    const batch = new OperationBatch(this.context, this.estimator);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n\n}\n\nclass MichelCodecParser {\n  constructor(context) {\n    this.context = context;\n  }\n\n  getNextProto() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.context.proto) {\n        const nextProto = yield this.context.readProvider.getNextProtocol('head');\n        this.context.proto = nextProto;\n      }\n\n      return this.context.proto;\n    });\n  }\n\n  parseScript(src) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parser = new Parser({\n        protocol: yield this.getNextProto()\n      });\n      return parser.parseScript(src);\n    });\n  }\n\n  parseMichelineExpression(src) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parser = new Parser({\n        protocol: yield this.getNextProto()\n      });\n      return parser.parseMichelineExpression(src);\n    });\n  }\n\n  parseJSON(src) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parser = new Parser({\n        protocol: yield this.getNextProto()\n      });\n      return parser.parseJSON(src);\n    });\n  }\n\n  prepareCodeOrigination(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parsedParams = params;\n      parsedParams.code = yield this.formatCodeParam(params.code);\n\n      if (params.init) {\n        parsedParams.init = yield this.formatInitParam(params.init);\n      } else if (params.storage) {\n        const storageType = parsedParams.code.find(p => 'prim' in p && p.prim === 'storage');\n\n        if (!(storageType === null || storageType === void 0 ? void 0 : storageType.args)) {\n          throw new InvalidCodeParameter('The storage section is missing from the script', params.code);\n        }\n\n        const schema = new Schema(storageType.args[0]);\n        const globalconstantsHashAndValue = yield this.findGlobalConstantsHashAndValue(schema);\n\n        if (Object.keys(globalconstantsHashAndValue).length !== 0) {\n          // If there are global constants in the storage part of the contract code,\n          // they need to be locally expanded in order to encode the storage arguments\n          const p = new Parser({\n            expandGlobalConstant: globalconstantsHashAndValue\n          });\n          const storageTypeNoGlobalConst = p.parseJSON(storageType.args[0]);\n          const schemaNoGlobalConst = new Schema(storageTypeNoGlobalConst);\n          parsedParams.init = schemaNoGlobalConst.Encode(params.storage);\n        } else {\n          parsedParams.init = schema.Encode(params.storage);\n        }\n\n        delete parsedParams.storage;\n      }\n\n      return parsedParams;\n    });\n  }\n\n  formatCodeParam(code) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let parsedCode;\n\n      if (typeof code === 'string') {\n        const c = yield this.parseScript(code);\n\n        if (c === null) {\n          throw new InvalidCodeParameter('Invalid code parameter', code);\n        }\n\n        parsedCode = c;\n      } else {\n        const c = yield this.parseJSON(code);\n        const order = ['parameter', 'storage', 'code']; // Ensure correct ordering for RPC\n\n        parsedCode = c.sort((a, b) => order.indexOf(a.prim) - order.indexOf(b.prim));\n      }\n\n      return parsedCode;\n    });\n  }\n\n  formatInitParam(init) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let parsedInit;\n\n      if (typeof init === 'string') {\n        const c = yield this.parseMichelineExpression(init);\n\n        if (c === null) {\n          throw new InvalidInitParameter('Invalid init parameter', init);\n        }\n\n        parsedInit = c;\n      } else {\n        parsedInit = yield this.parseJSON(init);\n      }\n\n      return parsedInit;\n    });\n  }\n\n  findGlobalConstantsHashAndValue(schema) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const globalConstantTokens = schema.findToken('constant');\n      const globalConstantsHashAndValue = {};\n\n      if (globalConstantTokens.length !== 0) {\n        for (const token of globalConstantTokens) {\n          const tokenArgs = token.tokenVal.args;\n\n          if (tokenArgs) {\n            const expression = tokenArgs[0];\n\n            if (expression.string) {\n              const hash = expression.string;\n              const michelineValue = yield this.context.globalConstantsProvider.getGlobalConstantByHash(hash);\n              Object.assign(globalConstantsHashAndValue, {\n                [hash]: michelineValue\n              });\n            }\n          }\n        }\n      }\n\n      return globalConstantsHashAndValue;\n    });\n  }\n\n}\n\nclass RpcPacker {\n  constructor(context) {\n    this.context = context;\n  }\n\n  packData(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.context.rpc.packData(data);\n    });\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates that a global constant does not exist\r\n */\n\n\nclass GlobalConstantNotFound extends Error {\n  constructor(hash) {\n    super(`Please load the value associated with the constant ${hash} using the loadGlobalConstant method of the DefaultGlobalConstantsProvider.`);\n    this.hash = hash;\n    this.name = 'GlobalConstantNotFound';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates the global constant provider not being configured under TezosToolkit\r\n */\n\n\nclass UnconfiguredGlobalConstantsProviderError extends Error {\n  constructor() {\n    super('No global constants provider has been configured. Please configure one by calling setGlobalConstantsProvider({globalConstantsProvider}) on your TezosToolkit instance.');\n    this.name = 'UnconfiguredGlobalConstantsProviderError';\n  }\n\n}\n\nclass NoopGlobalConstantsProvider {\n  getGlobalConstantByHash(_hash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new UnconfiguredGlobalConstantsProviderError();\n    });\n  }\n\n}\n/**\r\n * @description Converts calls from TzReadProvider into calls to the wrapped RpcClient in a format it can understand.\r\n */\n\n\nclass RpcReadAdapter {\n  constructor(context) {\n    this.context = context;\n  }\n  /**\r\n   * @description Access the balance of a contract.\r\n   * @param address address from which we want to retrieve the balance\r\n   * @param block from which we want to retrieve the balance\r\n   * @returns the balance in mutez\r\n   */\n\n\n  getBalance(address, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.context.rpc.getBalance(address, {\n        block: String(block)\n      });\n    });\n  }\n  /**\r\n   * @description Access the delegate of a contract, if any.\r\n   * @param address contract address from which we want to retrieve the delegate (baker)\r\n   * @param block from which we want to retrieve the delegate\r\n   * @returns the public key hash of the delegate or null if no delegate\r\n   */\n\n\n  getDelegate(address, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.context.rpc.getDelegate(address, {\n        block: String(block)\n      });\n    });\n  }\n  /**\r\n   * @description Access the next protocol hash\r\n   * @param block from which we want to retrieve the next protocol hash\r\n   */\n\n\n  getNextProtocol(block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const protocols = yield this.context.rpc.getProtocols({\n        block: String(block)\n      });\n      return protocols.next_protocol;\n    });\n  }\n  /**\r\n   * @description Access protocol constants used in Taquito\r\n   * @param block from which we want to retrieve the constants\r\n   */\n\n\n  getProtocolConstants(block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        time_between_blocks,\n        minimal_block_delay,\n        hard_gas_limit_per_operation,\n        hard_gas_limit_per_block,\n        hard_storage_limit_per_operation,\n        cost_per_byte,\n        tx_rollup_origination_size\n      } = yield this.context.rpc.getConstants({\n        block: String(block)\n      });\n      return {\n        time_between_blocks,\n        minimal_block_delay,\n        hard_gas_limit_per_operation,\n        hard_gas_limit_per_block,\n        hard_storage_limit_per_operation,\n        cost_per_byte,\n        tx_rollup_origination_size\n      };\n    });\n  }\n  /**\r\n   * @description Access the script (code and storage) of a smart contract\r\n   * @param contract contract address from which we want to retrieve the script\r\n   * @param block from which we want to retrieve the storage value\r\n   * @returns Note: The code must be in the JSON format and not contain global constant\r\n   */\n\n\n  getScript(contract, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        script\n      } = yield this.context.rpc.getContract(contract, {\n        block: String(block)\n      });\n      return script;\n    });\n  }\n  /**\r\n   * @description Access the storage value of a contract\r\n   * @param contract contract address from which we want to retrieve the storage\r\n   * @param block from which we want to retrieve the storage value\r\n   */\n\n\n  getStorage(contract, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.context.rpc.getStorage(contract, {\n        block: String(block)\n      });\n    });\n  }\n  /**\r\n   * @description Access the block hash\r\n   */\n\n\n  getBlockHash(block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        hash\n      } = yield this.context.rpc.getBlockHeader({\n        block: String(block)\n      });\n      return hash;\n    });\n  }\n  /**\r\n   * @description Access the block level\r\n   */\n\n\n  getBlockLevel(block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        level\n      } = yield this.context.rpc.getBlockHeader({\n        block: String(block)\n      });\n      return level;\n    });\n  }\n  /**\r\n   * @description Access the counter of an address\r\n   * @param pkh from which we want to retrieve the counter\r\n   * @param block from which we want to retrieve the counter\r\n   */\n\n\n  getCounter(pkh, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        counter\n      } = yield this.context.rpc.getContract(pkh, {\n        block: String(block)\n      });\n      return counter || '0';\n    });\n  }\n  /**\r\n   * @description Access the timestamp of a block\r\n   * @param block from which we want to retrieve the timestamp\r\n   * @returns date ISO format zero UTC offset (\"2022-01-19T22:37:07Z\")\r\n   */\n\n\n  getBlockTimestamp(block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        timestamp\n      } = yield this.context.rpc.getBlockHeader({\n        block: String(block)\n      });\n      return timestamp;\n    });\n  }\n  /**\r\n   * @description Access the value associated with a key in a big map.\r\n   * @param bigMapQuery Big Map ID and Expression hash to query (A b58check encoded Blake2b hash of the expression)\r\n   * @param block from which we want to retrieve the big map value\r\n   */\n\n\n  getBigMapValue(bigMapQuery, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.context.rpc.getBigMapExpr(bigMapQuery.id, bigMapQuery.expr, {\n        block: String(block)\n      });\n    });\n  }\n  /**\r\n   * @description Access the value associated with a sapling state ID.\r\n   * @param id Sapling state ID\r\n   * @param block from which we want to retrieve the sapling state\r\n   */\n\n\n  getSaplingDiffById(saplingStateQuery, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.context.rpc.getSaplingDiffById(saplingStateQuery.id, {\n        block: String(block)\n      });\n    });\n  }\n  /**\r\n   * @description Return the list of entrypoints of the contract\r\n   * @param contract address of the contract we want to get the entrypoints of\r\n   */\n\n\n  getEntrypoints(contract) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.context.rpc.getEntrypoints(contract);\n    });\n  }\n  /**\r\n   * @description Access the chain id\r\n   */\n\n\n  getChainId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.context.rpc.getChainId();\n    });\n  }\n  /**\r\n   * @description Indicate if an account is revealed\r\n   * @param publicKeyHash of the account\r\n   * @param block from which we want to know if the account is revealed\r\n   */\n\n\n  isAccountRevealed(publicKeyHash, block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const manager = yield this.context.rpc.getManagerKey(publicKeyHash, {\n        block: String(block)\n      });\n      const haveManager = manager && typeof manager === 'object' ? !!manager.key : !!manager;\n      return haveManager;\n    });\n  }\n  /**\r\n   * @description Return all the information about a block\r\n   * @param block from which we want to retrieve the information\r\n   */\n\n\n  getBlock(block) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.context.rpc.getBlock({\n        block: String(block)\n      });\n    });\n  }\n  /**\r\n   * @description Return a list of the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.\r\n   * @param block from which we want to retrieve the information\r\n   */\n\n\n  getLiveBlocks(block) {\n    return this.context.rpc.getLiveBlocks({\n      block: String(block)\n    });\n  }\n\n}\n\nconst opHashFilter = (op, filter) => op.hash === filter.opHash;\n\nconst sourceFilter = (x, filter) => {\n  switch (x.kind) {\n    case 'endorsement':\n      return 'metadata' in x && x.metadata.delegate === filter.source;\n\n    case 'activate_account':\n      return 'metadata' in x && x.pkh === filter.source;\n\n    default:\n      return 'source' in x && x.source === filter.source;\n  }\n};\n\nconst kindFilter = (x, filter) => 'kind' in x && x.kind === filter.kind;\n\nconst destinationFilter = (x, filter) => {\n  switch (x.kind) {\n    case 'delegation':\n      return x.delegate === filter.destination;\n\n    case 'origination':\n      if ('metadata' in x && 'operation_result' in x.metadata && 'originated_contracts' in x.metadata.operation_result && Array.isArray(x.metadata.operation_result.originated_contracts)) {\n        return x.metadata.operation_result.originated_contracts.some(contract => contract === filter.destination);\n      }\n\n      break;\n\n    case 'transaction':\n      return x.destination === filter.destination;\n\n    default:\n      return false;\n  }\n};\n\nconst evaluateOpFilter = (op, filter) => {\n  if ('opHash' in filter) {\n    return opHashFilter(op, filter);\n  } else if ('source' in filter) {\n    return sourceFilter(op, filter);\n  } else if ('kind' in filter) {\n    return kindFilter(op, filter);\n  } else if ('destination' in filter) {\n    return destinationFilter(op, filter);\n  }\n\n  return false;\n};\n\nconst evaluateExpression = (op, exp) => {\n  if (Array.isArray(exp.and)) {\n    return exp.and.every(x => evaluateFilter(op, x));\n  } else if (Array.isArray(exp.or)) {\n    return exp.or.some(x => evaluateFilter(op, x));\n  } else {\n    throw new InvalidFilterExpressionError('Filter expression must contain either and/or property');\n  }\n};\n\nconst evaluateFilter = (op, filter) => {\n  const filters = [];\n\n  if (!Array.isArray(filter)) {\n    filters.push(filter);\n  } else {\n    filters.push(...filter);\n  }\n\n  return filters.every(filterOrExp => {\n    if ('and' in filterOrExp || 'or' in filterOrExp) {\n      return evaluateExpression(op, filterOrExp);\n    } else {\n      return evaluateOpFilter(op, filterOrExp);\n    }\n  });\n};\n/* eslint-disable no-dupe-class-members */\n\n/**\r\n *  @category Error\r\n *  @description Error that indicates an unsupported event being passed or used\r\n */\n\n\nclass UnsupportedEventError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'UnsupportedEventError';\n  }\n\n}\n\nclass ObservableSubscription {\n  constructor(obs) {\n    let shouldRetry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let operatorFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : retry();\n    this.shouldRetry = shouldRetry;\n    this.operatorFunction = operatorFunction;\n    this.errorListeners = [];\n    this.messageListeners = [];\n    this.closeListeners = [];\n    this.completed$ = new Subject();\n    obs.pipe(takeUntil(this.completed$), tap(data => {\n      this.call(this.messageListeners, data);\n    }, error => {\n      this.call(this.errorListeners, error);\n    }, () => {\n      this.call(this.closeListeners);\n    }), this.shouldRetry ? operatorFunction : tap(), catchError(() => NEVER)).subscribe();\n  }\n\n  call(listeners, value) {\n    for (const l of listeners) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        l(value);\n      } catch (ex) {\n        console.error(ex);\n      }\n    }\n  }\n\n  remove(listeners, value) {\n    const idx = listeners.indexOf(value);\n\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    }\n  }\n\n  on(type, cb) {\n    switch (type) {\n      case 'data':\n        this.messageListeners.push(cb);\n        break;\n\n      case 'error':\n        this.errorListeners.push(cb);\n        break;\n\n      case 'close':\n        this.closeListeners.push(cb);\n        break;\n\n      default:\n        throw new UnsupportedEventError(`Trying to register on an unsupported event: ${type}`);\n    }\n  }\n\n  off(type, cb) {\n    switch (type) {\n      case 'data':\n        this.remove(this.messageListeners, cb);\n        break;\n\n      case 'error':\n        this.remove(this.errorListeners, cb);\n        break;\n\n      case 'close':\n        this.remove(this.closeListeners, cb);\n        break;\n\n      default:\n        throw new UnsupportedEventError(`Trying to unregister on an unsupported event: ${type}`);\n    }\n  }\n\n  close() {\n    this.completed$.next();\n  }\n\n}\n\nconst defaultConfigStreamer = {\n  shouldObservableSubscriptionRetry: false,\n  observableSubscriptionRetryFunction: retry()\n};\n\nconst getLastBlock = context => {\n  return from(context.rpc.getBlock()).pipe(first());\n};\n\nconst applyFilter = filter => concatMap(block => {\n  return new Observable(sub => {\n    for (const ops of block.operations) {\n      for (const op of ops) {\n        for (const content of op.contents) {\n          if (evaluateFilter(Object.assign({\n            hash: op.hash\n          }, content), filter)) {\n            sub.next(Object.assign({\n              hash: op.hash\n            }, content));\n          }\n        }\n      }\n    }\n\n    sub.complete();\n  });\n});\n\nclass PollingSubscribeProvider {\n  constructor(context) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.context = context;\n    this._config$ = new BehaviorSubject(Object.assign(Object.assign({}, defaultConfigStreamer), config));\n    this.timer$ = this._config$.pipe(pluck('pollingIntervalMilliseconds'), switchMap(pollingIntervalMilliseconds => {\n      if (!pollingIntervalMilliseconds) {\n        return from(this.getConfirmationPollingInterval()).pipe(switchMap(interval => {\n          return timer(0, interval);\n        }));\n      } else {\n        return timer(0, pollingIntervalMilliseconds);\n      }\n    }));\n    this.newBlock$ = this.timer$.pipe(switchMap(() => getLastBlock(this.context)), distinctUntilKeyChanged('hash'), publish(), refCount());\n  }\n\n  get config() {\n    return this._config$.getValue();\n  }\n\n  getConfirmationPollingInterval() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.config.pollingIntervalMilliseconds) {\n        const defaultIntervalTestnetsMainnet = 5000;\n        const defaultIntervalSandbox = 1000;\n\n        try {\n          const constants = yield this.context.readProvider.getProtocolConstants('head');\n          const blockTime = constants.minimal_block_delay ? constants.minimal_block_delay.multipliedBy(1000) : constants.time_between_blocks ? constants.time_between_blocks[0].multipliedBy(1000) : new BigNumber(defaultIntervalTestnetsMainnet);\n          const confirmationPollingInterval = blockTime.dividedBy(3);\n          this.config.pollingIntervalMilliseconds = confirmationPollingInterval.toNumber() === 0 ? defaultIntervalSandbox : confirmationPollingInterval.toNumber();\n        } catch (exception) {\n          return defaultIntervalTestnetsMainnet;\n        }\n      }\n\n      return this.config.pollingIntervalMilliseconds;\n    });\n  }\n\n  subscribeBlock(_filter) {\n    return new ObservableSubscription(this.newBlock$, this.config.shouldObservableSubscriptionRetry, this.config.observableSubscriptionRetryFunction);\n  }\n\n  subscribe(_filter) {\n    return new ObservableSubscription(this.newBlock$.pipe(pluck('hash')), this.config.shouldObservableSubscriptionRetry, this.config.observableSubscriptionRetryFunction);\n  }\n\n  subscribeOperation(filter) {\n    return new ObservableSubscription(this.newBlock$.pipe(applyFilter(filter)), this.config.shouldObservableSubscriptionRetry, this.config.observableSubscriptionRetryFunction);\n  }\n\n}\n\nclass TaquitoLocalForger {\n  constructor(context) {\n    this.context = context;\n  }\n\n  getNextProto() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.context.proto) {\n        const nextProto = yield this.context.readProvider.getNextProtocol('head');\n        this.context.proto = nextProto;\n      }\n\n      return this.context.proto;\n    });\n  }\n\n  forge(_ref18) {\n    let {\n      branch,\n      contents\n    } = _ref18;\n    return __awaiter(this, void 0, void 0, function* () {\n      const forger = new LocalForger(yield this.getNextProto());\n      return forger.forge({\n        branch,\n        contents\n      });\n    });\n  }\n\n}\n\nconst defaultConfigConfirmation = {\n  defaultConfirmationCount: 1,\n  confirmationPollingTimeoutSecond: 180\n};\n/**\r\n * @description Encapsulate common service used throughout different part of the library\r\n */\n\nclass Context {\n  constructor(_rpc) {\n    let _signer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new NoopSigner();\n\n    let _proto = arguments.length > 2 ? arguments[2] : undefined;\n\n    let _config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new BehaviorSubject(Object.assign({}, defaultConfigConfirmation));\n\n    let forger = arguments.length > 4 ? arguments[4] : undefined;\n    let injector = arguments.length > 5 ? arguments[5] : undefined;\n    let packer = arguments.length > 6 ? arguments[6] : undefined;\n    let wallet = arguments.length > 7 ? arguments[7] : undefined;\n    let parser = arguments.length > 8 ? arguments[8] : undefined;\n    let globalConstantsProvider = arguments.length > 9 ? arguments[9] : undefined;\n    let readProvider = arguments.length > 10 ? arguments[10] : undefined;\n    let stream = arguments.length > 11 ? arguments[11] : undefined;\n    this._rpc = _rpc;\n    this._signer = _signer;\n    this._proto = _proto;\n    this._config = _config;\n    this.providerDecorator = [];\n    this.tz = new RpcTzProvider(this);\n    this.estimate = new RPCEstimateProvider(this);\n    this.contract = new RpcContractProvider(this, this.estimate);\n    this.batch = new RPCBatchProvider(this, this.estimate);\n    this.wallet = new Wallet(this);\n    /**\r\n     * @description Applies the decorators on a cloned instance of the context and returned this cloned instance.\r\n     * The decorators are functions that inject logic into the context.\r\n     * They are provided by the extensions set on the TezosToolkit by calling the registerProviderDecorator method.\r\n     */\n\n    this.withExtensions = () => {\n      let clonedContext = this.clone();\n      this.providerDecorator.forEach(decorator => {\n        clonedContext = decorator(clonedContext);\n      });\n      return clonedContext;\n    };\n\n    if (typeof this._rpc === 'string') {\n      this._rpcClient = new RpcClient(this._rpc);\n    } else {\n      this._rpcClient = this._rpc;\n    }\n\n    this._forger = forger ? forger : new TaquitoLocalForger(this);\n    this._injector = injector ? injector : new RpcInjector(this);\n    this.operationFactory = new OperationFactory(this);\n    this._walletProvider = wallet ? wallet : new LegacyWalletProvider(this);\n    this._parser = parser ? parser : new MichelCodecParser(this);\n    this._packer = packer ? packer : new RpcPacker(this);\n    this._globalConstantsProvider = globalConstantsProvider ? globalConstantsProvider : new NoopGlobalConstantsProvider();\n    this._readProvider = readProvider ? readProvider : new RpcReadAdapter(this);\n    this._stream = stream ? stream : new PollingSubscribeProvider(this);\n  }\n\n  get config() {\n    return this._config.getValue();\n  }\n\n  set config(value) {\n    this._config.next(Object.assign({}, value));\n  }\n\n  setPartialConfig(value) {\n    this._config.next(Object.assign(Object.assign({}, this._config.getValue()), value));\n  }\n\n  get rpc() {\n    return this._rpcClient;\n  }\n\n  set rpc(value) {\n    this._rpcClient = value;\n  }\n\n  get injector() {\n    return this._injector;\n  }\n\n  set injector(value) {\n    this._injector = value;\n  }\n\n  get forger() {\n    return this._forger;\n  }\n\n  set forger(value) {\n    this._forger = value;\n  }\n\n  get signer() {\n    return this._signer;\n  }\n\n  set signer(value) {\n    this._signer = value;\n  }\n\n  get walletProvider() {\n    return this._walletProvider;\n  }\n\n  set walletProvider(value) {\n    this._walletProvider = value;\n  }\n\n  set proto(value) {\n    this._proto = value;\n  }\n\n  get proto() {\n    return this._proto;\n  }\n\n  get parser() {\n    return this._parser;\n  }\n\n  set parser(value) {\n    this._parser = value;\n  }\n\n  get packer() {\n    return this._packer;\n  }\n\n  set packer(value) {\n    this._packer = value;\n  }\n\n  get globalConstantsProvider() {\n    return this._globalConstantsProvider;\n  }\n\n  set globalConstantsProvider(value) {\n    this._globalConstantsProvider = value;\n  }\n\n  get readProvider() {\n    return this._readProvider;\n  }\n\n  set readProvider(value) {\n    this._readProvider = value;\n  }\n\n  get stream() {\n    return this._stream;\n  }\n\n  set stream(value) {\n    this._stream = value;\n  }\n\n  isAnyProtocolActive() {\n    let protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._proto) {\n        return protocol.includes(this._proto);\n      } else {\n        const next_protocol = yield this.readProvider.getNextProtocol('head');\n        return protocol.includes(next_protocol);\n      }\n    });\n  }\n\n  isAnySignerConfigured() {\n    return !(this.signer instanceof NoopSigner);\n  }\n  /**\r\n   * @description Create a copy of the current context. Useful when you have long running operation and you do not want a context change to affect the operation\r\n   */\n\n\n  clone() {\n    return new Context(this.rpc, this.signer, this.proto, this._config, this.forger, this._injector, this.packer, this._walletProvider, this._parser, this._globalConstantsProvider, this._readProvider, this._stream);\n  }\n  /**\r\n   * @description Allows extensions set on the TezosToolkit to inject logic into the context\r\n   */\n\n\n  registerProviderDecorator(fx) {\n    this.providerDecorator.push(fx);\n  }\n\n} // IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n\n\nconst VERSION = {\n  \"commitHash\": \"6d90b3d5e616a6e9b9ad9dd8453b5068e7396fff\",\n  \"version\": \"13.0.1\"\n};\n/**\r\n *  @category Error\r\n *  @description Error that indicates a value mismatch when forging\r\n */\n\nclass ForgingMismatchError extends Error {\n  constructor(results) {\n    super('Forging mismatch error');\n    this.results = results;\n    this.name = 'ForgingMismatchError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a forger not being specified in TezosToolkit\r\n */\n\n\nclass UnspecifiedForgerError extends Error {\n  constructor() {\n    super('At least one forger must be specified');\n    this.name = 'UnspecifiedForgerError';\n  }\n\n}\n\nclass CompositeForger {\n  constructor(forgers) {\n    this.forgers = forgers;\n\n    if (forgers.length === 0) {\n      throw new UnspecifiedForgerError();\n    }\n  }\n\n  forge(_ref19) {\n    let {\n      branch,\n      contents\n    } = _ref19;\n    return __awaiter(this, void 0, void 0, function* () {\n      const results = yield Promise.all(this.forgers.map(forger => {\n        return forger.forge({\n          branch,\n          contents\n        });\n      }));\n\n      if (results.length === 0) {\n        throw new UnspecifiedForgerError();\n      } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n      let lastResult = results.pop(); // Assumed to be more than one since we\n\n      while (results.length) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const currentResult = results.pop();\n\n        if (currentResult !== lastResult) {\n          throw new ForgingMismatchError([lastResult, currentResult]);\n        }\n\n        lastResult = currentResult;\n      }\n\n      return lastResult;\n    });\n  }\n\n}\n\nclass RpcForger {\n  constructor(context) {\n    this.context = context;\n  }\n\n  forge(_ref20) {\n    let {\n      branch,\n      contents\n    } = _ref20;\n    return this.context.rpc.forgeOperations({\n      branch,\n      contents\n    });\n  }\n\n}\n\nclass NoopParser {\n  prepareCodeOrigination(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return params;\n    });\n  }\n\n}\n\nclass MichelCodecPacker {\n  packData(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        bytes\n      } = packDataBytes(data.data, data.type);\n      return {\n        packed: bytes\n      };\n    });\n  }\n\n}\n\nclass DefaultGlobalConstantsProvider {\n  constructor() {\n    this._globalConstantsLibrary = {};\n  }\n  /**\r\n   *\r\n   * @description Allows to load global constant hashes and their corresponding Michelson JSON values\r\n   */\n\n\n  loadGlobalConstant(globalConstant) {\n    for (const hash in globalConstant) {\n      Object.assign(this._globalConstantsLibrary, {\n        [hash]: globalConstant[hash]\n      });\n    }\n  }\n  /**\r\n   *\r\n   * @description Retrieve the Michelson value of a global constant based on its hash\r\n   *\r\n   * @param hash a string representing the global constant hash\r\n   * @returns Expr, the JSON Michelson value\r\n   */\n\n\n  getGlobalConstantByHash(hash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const value = this._globalConstantsLibrary[hash];\n\n      if (!value) {\n        throw new GlobalConstantNotFound(hash);\n      }\n\n      return value;\n    });\n  }\n\n}\n/**\r\n * @packageDocumentation\r\n * @module @taquito/taquito\r\n */\n\n/**\r\n * @description Facade class that surfaces all of the libraries capability and allow it's configuration\r\n *\r\n * @param _rpc The RPC server to use\r\n */\n\n\nclass TezosToolkit {\n  constructor(_rpc) {\n    this._rpc = _rpc;\n    this._options = {};\n    this.format = format;\n\n    if (typeof this._rpc === 'string') {\n      this._rpcClient = new RpcClient(this._rpc);\n    } else {\n      this._rpcClient = this._rpc;\n    }\n\n    this._context = new Context(_rpc);\n    this._wallet = new Wallet(this._context);\n    this.setProvider({\n      rpc: this._rpcClient\n    });\n    this.batch = this._context.batch.batch.bind(this._context.batch);\n  }\n  /**\r\n   * @description Sets configuration on the Tezos Taquito instance. Allows user to choose which signer, rpc client, rpc url, forger and so forth\r\n   *\r\n   * @param options rpc url or rpcClient to use to interact with the Tezos network\r\n   *\r\n   * @example Tezos.setProvider({rpc: 'https://mainnet.api.tez.ie/', signer: new InMemorySigner.fromSecretKey(“edsk...”)})\r\n   * @example Tezos.setProvider({ config: { confirmationPollingTimeoutSecond: 300 }})\r\n   *\r\n   */\n\n\n  setProvider(_ref21) {\n    let {\n      rpc,\n      stream,\n      signer,\n      protocol,\n      config,\n      forger,\n      wallet,\n      packer,\n      globalConstantsProvider,\n      readProvider\n    } = _ref21;\n    this.setRpcProvider(rpc);\n    this.setStreamProvider(stream);\n    this.setSignerProvider(signer);\n    this.setForgerProvider(forger);\n    this.setWalletProvider(wallet);\n    this.setPackerProvider(packer);\n    this.setGlobalConstantsProvider(globalConstantsProvider);\n    this.setReadProvider(readProvider);\n    this._context.proto = protocol;\n\n    if (config) {\n      this._context.setPartialConfig(config);\n    }\n  }\n  /**\r\n   * @description Sets signer provider on the Tezos Taquito instance.\r\n   *\r\n   * @param options signer to use to interact with the Tezos network\r\n   *\r\n   * @example Tezos.setSignerProvider(new InMemorySigner.fromSecretKey('edsk...'))\r\n   *\r\n   */\n\n\n  setSignerProvider(signer) {\n    if (!this._options.signer && typeof signer === 'undefined') {\n      this._context.signer = new NoopSigner();\n      this._options.signer = signer;\n    } else if (typeof signer !== 'undefined') {\n      this._context.signer = signer;\n      this._options.signer = signer;\n    }\n  }\n  /**\r\n   * @description Sets rpc provider on the Tezos Taquito instance\r\n   *\r\n   * @param options rpc url or rpcClient to use to interact with the Tezos network\r\n   *\r\n   * @example Tezos.setRpcProvider('https://mainnet.api.tez.ie/')\r\n   *\r\n   */\n\n\n  setRpcProvider(rpc) {\n    if (typeof rpc === 'string') {\n      this._rpcClient = new RpcClient(rpc);\n    } else if (rpc === undefined) ;else {\n      this._rpcClient = rpc;\n    }\n\n    this._options.rpc = this._rpcClient;\n    this._context.rpc = this._rpcClient;\n  }\n  /**\r\n   * @description Sets forger provider on the Tezos Taquito instance\r\n   * The `LocalForger` from `@taquito/local-forging` is set by default.\r\n   *\r\n   * @param options forger to use to interact with the Tezos network\r\n   *\r\n   * @example Tezos.setForgerProvider(this.getFactory(RpcForger)())\r\n   *\r\n   */\n\n\n  setForgerProvider(forger) {\n    if (typeof forger !== 'undefined') {\n      this._options.forger = forger;\n      this._context.forger = forger;\n    } else if (this._options.forger === undefined) {\n      const f = this.getFactory(TaquitoLocalForger)();\n      this._options.forger = f;\n      this._context.forger = f;\n    }\n  }\n  /**\r\n   * @description Sets stream provider on the Tezos Taquito instance\r\n   *\r\n   * @param options stream to use to interact with the Tezos network\r\n   *\r\n   * @example Tezos.setStreamProvider(...)\r\n   *\r\n   */\n\n\n  setStreamProvider(stream) {\n    if (typeof stream === 'string') {\n      const s = new PollingSubscribeProvider(new Context(new RpcClient(stream)));\n      this._options.stream = s;\n      this._context.stream = s;\n    } else if (typeof stream !== 'undefined') {\n      this._options.stream = stream;\n      this._context.stream = stream;\n    } else if (this._options.stream === undefined) {\n      const s = this.getFactory(PollingSubscribeProvider)();\n      this._options.stream = s;\n      this._context.stream = s;\n    }\n  }\n  /**\r\n   * @description Sets wallet provider on the Tezos Taquito instance\r\n   *\r\n   * @param options wallet to use to interact with the Tezos network\r\n   *\r\n   * @example Tezos.setWalletProvider(...)\r\n   *\r\n   */\n\n\n  setWalletProvider(wallet) {\n    if (!this._options.wallet && typeof wallet === 'undefined') {\n      const w = this.getFactory(LegacyWalletProvider)();\n      this._options.wallet = w;\n      this._context.walletProvider = w;\n    } else if (typeof wallet !== 'undefined') {\n      this._options.wallet = wallet;\n      this._context.walletProvider = wallet;\n    }\n  }\n  /**\r\n   * @description Sets Packer provider on the Tezos Taquito instance\r\n   *\r\n   * @param options packer to use to interact with the Tezos network\r\n   *\r\n   * @example Tezos.setPackerProvider(new MichelCodecPacker())\r\n   *\r\n   */\n\n\n  setPackerProvider(packer) {\n    if (!this._options.packer && typeof packer === 'undefined') {\n      const p = this.getFactory(RpcPacker)();\n      this._context.packer = p;\n      this._options.packer = p;\n    } else if (typeof packer !== 'undefined') {\n      this._context.packer = packer;\n      this._options.packer = packer;\n    }\n  }\n  /**\r\n   * @description Sets global constants provider on the Tezos Taquito instance\r\n   *\r\n   * @param options globalConstantsProvider to use to interact with the Tezos network\r\n   *\r\n   * @example\r\n   * ```\r\n   * const globalConst = new DefaultGlobalConstantsProvider();\r\n   * globalConst.loadGlobalConstant({\r\n   *  \"expruu5BTdW7ajqJ9XPTF3kgcV78pRiaBW3Gq31mgp3WSYjjUBYxre\": { prim: \"int\" },\r\n   *  // ...\r\n   * })\r\n   * Tezos.setGlobalConstantsProvider(globalConst);\r\n   * ```\r\n   *\r\n   */\n\n\n  setGlobalConstantsProvider(globalConstantsProvider) {\n    if (!this._options.globalConstantsProvider && typeof globalConstantsProvider === 'undefined') {\n      const g = new NoopGlobalConstantsProvider();\n      this._context.globalConstantsProvider = g;\n      this._options.globalConstantsProvider = g;\n    } else if (typeof globalConstantsProvider !== 'undefined') {\n      this._context.globalConstantsProvider = globalConstantsProvider;\n      this._options.globalConstantsProvider = globalConstantsProvider;\n    }\n  }\n  /**\r\n   * @description Sets read provider on the Tezos Taquito instance\r\n   * By default reads are done from the RPC usign the RpcReadAdapter class, this can be overridden to read from an indexer that implements the TzReadProvider interface\r\n   *\r\n   * @param options TzReadProvider to use to interact with the Tezos network\r\n   *\r\n   */\n\n\n  setReadProvider(readProvider) {\n    const readP = typeof readProvider === 'undefined' ? this.getFactory(RpcReadAdapter)() : readProvider;\n    this._options.readProvider = readP;\n    this._context.readProvider = readP;\n  }\n  /**\r\n   * @description Provide access to tezos account management\r\n   */\n\n\n  get tz() {\n    return this._context.tz;\n  }\n  /**\r\n   * @description Provide access to smart contract utilities\r\n   */\n\n\n  get contract() {\n    return this._context.contract;\n  }\n\n  get wallet() {\n    return this._wallet;\n  }\n\n  get operation() {\n    return this._context.operationFactory;\n  }\n  /**\r\n   * @description Provide access to operation estimation utilities\r\n   */\n\n\n  get estimate() {\n    return this._context.estimate;\n  }\n  /**\r\n   * @description Provide access to streaming utilities backed by an streamer implementation\r\n   */\n\n\n  get stream() {\n    return this._context.stream;\n  }\n  /**\r\n   * @description Provide access to the currently used rpc client\r\n   */\n\n\n  get rpc() {\n    return this._context.rpc;\n  }\n  /**\r\n   * @description Provide access to the currently used signer\r\n   */\n\n\n  get signer() {\n    return this._context.signer;\n  }\n  /**\r\n   * @description Provide access to the currently used globalConstantsProvider\r\n   */\n\n\n  get globalConstants() {\n    return this._context.globalConstantsProvider;\n  }\n  /**\r\n   * @description Allow to add a module to the TezosToolkit instance. This method adds the appropriate Providers(s) required by the module to the internal context.\r\n   *\r\n   * @param module extension to add to the TezosToolkit instance\r\n   *\r\n   * @example Tezos.addExtension(new Tzip16Module());\r\n   */\n\n\n  addExtension(module) {\n    if (Array.isArray(module)) {\n      module.forEach(extension => extension.configureContext(this._context));\n    } else {\n      module.configureContext(this._context);\n    }\n  }\n\n  getFactory(ctor) {\n    var _this = this;\n\n    return function () {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return new ctor(_this._context, ...args);\n    };\n  }\n  /**\r\n   * @description Gets an object containing the version of Taquito library and git sha of the commit this library is compiled from\r\n   */\n\n\n  getVersionInfo() {\n    return VERSION;\n  }\n\n}\n\nexport { BatchOperation, BigMapAbstraction, ChainIds, CompositeForger, Context, ContractAbstraction, ContractMethod, ContractMethodObject, ContractView, DEFAULT_FEE, DEFAULT_GAS_LIMIT, DEFAULT_SMART_CONTRACT_METHOD_NAME, DEFAULT_STORAGE_LIMIT, DefaultGlobalConstantsProvider, DelegateOperation, DelegationWalletOperation, Estimate, GlobalConstantNotFound, InvalidCodeParameter, InvalidDelegationSource, InvalidInitParameter, InvalidParameterError, InvalidViewParameterError, InvalidViewSimulationContext, LegacyWalletProvider, MANAGER_LAMBDA, MichelCodecPacker, MichelCodecParser, MissedBlockDuringConfirmationError, NoopParser, ObservableSubscription, Operation, OperationBatch, OriginationOperation, OriginationParameterError, OriginationWalletOperation, PollingSubscribeProvider, Protocols, RPCEstimateProvider, RevealEstimateError, RevealOperationError, RpcForger, RpcPacker, RpcReadAdapter, TaquitoLocalForger, TezosOperationError, TezosPreapplyFailureError, TezosToolkit, TransactionOperation, TransactionWalletOperation, UnconfiguredGlobalConstantsProviderError, VIEW_LAMBDA, ViewSimulationError, Wallet, WalletOperation, WalletOperationBatch, compose, createOriginationOperation, createRegisterDelegateOperation, createRegisterGlobalConstantOperation, createRevealOperation, createSetDelegateOperation, createTransferOperation, createTxRollupBatchOperation, createTxRollupOriginationOperation, defaultConfigConfirmation, protocols, validateAndExtractFailwith };","map":{"version":3,"mappings":"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","names":["RpcInjector","constructor","context","inject","signedOperationBytes","rpc","injectOperation","UnconfiguredSignerError","Error","name","NoopSigner","publicKey","publicKeyHash","secretKey","sign","_bytes","_watermark","createObservableFromSubscription","sub","Observable","subscriber","on","data","next","error","complete","close","DEFAULT_GAS_LIMIT","DEFAULT_FEE","DEFAULT_STORAGE_LIMIT","Protocols","Pt24m4xi","PsBABY5H","PsBabyM1","PsCARTHA","PsDELPH1","PtEdo2Zk","PsFLorena","PtGRANADs","PtHangz2","PsiThaCa","Psithaca2","PtJakart2","ProtoALpha","ChainIds","TZ_DECIMALS","MTZ_DECIMALS","getDecimal","format","from","to","amount","bigNum","BigNumber","isNaN","multipliedBy","Math","pow","dividedBy","InvalidParameterError","smartContractMethodName","sigs","args","length","JSON","stringify","InvalidDelegationSource","source","InvalidCodeParameter","message","InvalidInitParameter","InvalidViewParameterError","smartContractViewName","originalError","cause","ViewSimulationError","viewName","failWith","isJsonString","body","parsedError","parse","Array","isArray","with","str","e","InvalidViewSimulationContext","info","RevealOperationError","OriginationParameterError","code","init","balance","delegate","storage","fee","ORIGINATION","gasLimit","storageLimit","mutez","__awaiter","undefined","contractStorage","storageType","find","p","prim","schema","Schema","Encode","script","operation","kind","OpKind","gas_limit","storage_limit","toString","createTransferOperation","parameter","TRANSFER","TRANSACTION","destination","parameters","createSetDelegateOperation","DELEGATION","createRevealOperation","REVEAL","public_key","value","REGISTER_GLOBAL_CONSTANT","createTxRollupOriginationOperation","TX_ROLLUP_ORIGINATION","tx_rollup_origination","content","rollup","TX_ROLLUP_SUBMIT_BATCH","attachKind","op","Object","findWithKind","arr","found","isKind","isOpWithFee","indexOf","isOpRequireReveal","hasMetadata","hasMetadataWithResult","metadata","hasMetadataWithInternalOperationResult","isErrorWithMessage","TezosOperationError","errorDetails","errors","lastError","id","string","int","TezosPreapplyFailureError","result","flattenOperationResult","response","results","returnedResults","i","j","contents","push","operation_result","internal_operation_results","forEach","x","flattenErrors","status","concat","internalResult","OriginationOperationError","InvalidConfirmationCountError","ConfirmationUndefinedError","InvalidFilterExpressionError","Operation","hash","raw","ReplaySubject","_pollingConfig$","pipe","switchMap","config","defer","stream","subscribeBlock","timeoutWith","timeout","throwError","shareReplay","refCount","currentHead$","map","head","operations","_foundAt","header","level","filter","first","Number","POSITIVE_INFINITY","validateOperation","ValidationResult","VALID","InvalidOperationHashError","confirmed$","catchError","of","EMPTY","subscribe","includedInBlock","revealOperation","revealStatus","confirmation","confirmations","defaultConfirmationCount","confirmationPollingTimeoutSecond","conf","Promise","resolve","reject","_","BatchOperation","params","sumProp","prop","reduce","prev","current","BATCH_KINDS","consumedGas","String","storageDiff","OperationEmitter","signer","isRevealOpNeeded","pkh","isAccountRevealRequired","isRevealRequiredForOpType","readProvider","isAccountRevealed","opRequireReveal","prepareOperation","counters","ops","blockHashPromise","getBlockHash","blockProtoPromise","getNextProtocol","counterPromise","getCounter","protocol","headCounter","all","counter","parseInt","getFee","opCounter","getSource","constructOps","cOps","ACTIVATION","cops","toLowerCase","startsWith","DeprecationError","InvalidOperationKindError","opOb","branch","forge","forgedBytes","forger","opbytes","simulate","opResponse","runOperation","clone","estimate","_a","estimator","rest","__rest","calculatedFee","calculatedGas","calculatedStorage","estimation","suggestedFeeMutez","signAndInject","signed","Uint8Array","sbytes","signature","prefixSig","preapplyOperations","injector","OperationBatch","withTransfer","validateAddress","InvalidAddressError","withContractCall","toTransferParams","withDelegation","withActivation","secret","validateKeyHash","InvalidKeyHashError","withOrigination","withRegisterGlobalConstant","withTxRollupOrigination","withTxRollupSubmitBatch","getRPCOp","param","createOriginationOperation","parser","prepareCodeOrigination","createRegisterGlobalConstantOperation","createTxRollupBatchOperation","send","estimates","batch","revealNeeded","estimated","reveal","estimatedReveal","unshift","prepared","opBytes","RPCBatchProvider","receiptFromOperation","ALLOCATION_BURN","ORIGINATION_BURN","operationResults","totalGas","totalStorage","totalFee","totalOriginationBurn","totalAllocationBurn","totalPaidStorageDiff","plus","originated_contracts","consumed_gas","paid_storage_size_diff","totalStorageBurn","MissedBlockDuringConfirmationError","MAX_BRANCH_ANCESTORS","WalletOperation","opHash","_newHead$","_included","tap","newHead","lastHead","bufferSize","newHead$","opGroup","_includedInBlock","_operationResult","toPromise","receipt","getCurrentConfirmation","combineLatest","getBlock","foundAtBlock","isInCurrentBranch","tipBlockIdentifier","tipBlockHeaderLevel","getBlockLevel","inclusionBlock","levelDiff","tipBlockLevel","min","blocks","Set","getLiveBlocks","has","confirmationObservable","distinctUntilChanged","previousHead","block","expectedConfirmation","currentConfirmation","completed","takeWhile","BatchWalletOperation","operationResult","DelegationWalletOperation","delegationOperation","OriginationWalletOperation","originationOperation","contract","address","wallet","at","TransactionWalletOperation","transactionOperation","createNewPollingBasedHeadObservable","sharedHeadOb","scheduler","OperationFactory","createNewHeadObservable","sharedHeadObs","createPastBlockWalker","startBlock","count","range","startWith","concatMap","createHeadObservableFromConfig","blockIdentifier","observableSequence","createOperation","createBatchOperation","createTransactionOperation","createDelegationOperation","RpcTzProvider","getBalance","getDelegate","activate","bytes","MINIMAL_FEE_MUTEZ","MINIMAL_FEE_PER_BYTE_MUTEZ","MINIMAL_FEE_PER_GAS_MUTEZ","GAS_BUFFER","Estimate","_milligasLimit","_storageLimit","opSize","minimalFeePerStorageByteMutez","baseFeeMutez","burnFeeMutez","roundUp","limit","max","operationFeeMutez","nanotez","ceil","minimalFeeMutez","usingBaseFeeMutez","totalCost","consumedMilligas","createEstimateInstanceFromProperties","estimateProperties","milligasLimit","createArrayEstimateInstancesFromProperties","RevealEstimateError","mergeLimits","userDefinedLimit","defaultLimits","SIGNATURE_STUB","RPCEstimateProvider","ALLOCATION_STORAGE","ORIGINATION_STORAGE","OP_SIZE_REVEAL","getKeys","isSignerConfigured","isAnySignerConfigured","walletProvider","getPKH","getAccountLimits","constants","numberOfOps","hard_gas_limit_per_operation","hard_gas_limit_per_block","hard_storage_limit_per_operation","cost_per_byte","floor","ajustGasForBatchOperation","toNumber","gasLimitBlock","gaslimitOp","div","getEstimationPropertiesFromOperationContent","size","costPerByte","tx_rollup_origination_size","totalMilligas","consumed_milligas","storage_size","prepareEstimate","chain_id","getChainId","originate","protocolConstants","getProtocolConstants","DEFAULT_PARAMS","isRevealNeeded","addRevealOp","shift","transfer","setDelegate","sourceOrDefault","registerDelegate","createRegisterDelegateOperation","registerGlobalConstant","txRollupOriginate","txRollupSubmitBatch","DelegateOperation","delegationOp","isRegisterOperation","OriginationOperation","contractProvider","originatedContracts","contractAddress","originationOp","storageSize","RegisterGlobalConstantOperation","globalConstantHash","global_address","registerGlobalConstantOp","registeredExpression","RevealOperation","revealOp","txResult","TransactionOperation","transactionOp","key","transferImplicit","removeDelegate","transferToContract","functioncomposer1","functioncomposer2","contractAbstraction","ContractMethod","provider","parameterSchema","isMultipleEntrypoint","isAnonymous","validateArgs","ExtractSignatures","ExtractSchema","getSignature","sig","Wallet","fullTransferParams","entrypoint","DEFAULT_SMART_CONTRACT_METHOD_NAME","WalletOperationBatch","mapOperation","mapTransferParamsToWalletParams","mapOriginateParamsToWalletParams","mapDelegateParamsToWalletParams","sendOperations","operationFactory","forceRefetch","_pkh","walletCommand","mappedParams","contractAbstractionComposer","validateContractAddress","InvalidContractAddressError","withExtensions","getScript","entrypoints","getEntrypoints","abs","ContractAbstraction","LegacyWalletProvider","ContractMethodObject","EncodeObject","runCodeHelper","viewArgsType","viewReturnType","contractStorageType","viewInstructions","viewArgs","contractStorageValue","input","OnChainView","_readProvider","_contractAddress","_smartContractViewSchema","_contractStorageType","_args","_rpc","extractArgsSchema","extractResultSchema","executeView","executionContext","verifyContextExecution","chainId","getStorage","executeViewAndDecodeResult","adaptViewCodeToContext","instructions","viewCaller","transformArgsToMichelson","encodeViewArgs","contractBalance","instructionsToReplace","BALANCE","SENDER","SELF_ADDRESS","AMOUNT","inst","viewScript","runCode","validateAndExtractFailwith","decodeViewResult","ContractMethodFactory","createContractMethodFlatParams","smartContractMethodSchema","createContractMethodObjectParam","createContractViewObjectParam","smartContractViewSchema","ContractView","currentContract","callbackParametersSchema","read","validateChain","InvalidChainIdError","arg","runView","Execute","isView","lastElement","storageProvider","methods","methodsObject","views","contractViews","contractMethodFactory","fromRPCResponse","ParameterSchema","viewSchema","ViewSchema","_initializeOnChainViews","_initializeMethods","keys","isMultipleEntryPoint","view","entrypointParamWithoutCallback","smartContractMethodSchemaWithoutCallback","parametersCallback","smartContractMethodCallbackSchema","anonymousMethods","allContractViews","val","bigMap","getBigMapKey","BigMapAbstraction","get","keyToEncode","getBigMapKeyByID","HttpResponseError","STATUS_CODE","NOT_FOUND","getMultipleValues","keysToEncode","batchSize","getBigMapKeysByID","toJSON","SaplingStateAbstraction","getSaplingDiff","getSaplingDiffByID","getId","smartContractAbstractionSemantic","big_map","sapling_state","TxRollupOriginationOperation","originatedRollup","originated_rollup","rollupOriginationOp","TxRollupBatchOperation","txrollupBatchOp","RpcContractProvider","Symbol","for","contractSchema","isSchema","getContract","encodedKey","EncodeBigMapKey","ExecuteOnBigMapValue","type","packed","packer","packData","encodedExpr","encodeExpr","bigMapValue","getBigMapValue","expr","getBlockForRequest","bigMapValues","MichelsonMap","position","keysBatch","slice","getBigMapValueOrUndefined","set","ex","saplingState","getSaplingDiffById","addRevealOperationIfNeeded","estimateReveal","bind","preparedOrigination","forgedOrigination","test","publickKeyHash","MichelCodecParser","getNextProto","proto","nextProto","parseScript","src","Parser","parseMichelineExpression","parseJSON","parsedParams","formatCodeParam","formatInitParam","globalconstantsHashAndValue","findGlobalConstantsHashAndValue","expandGlobalConstant","storageTypeNoGlobalConst","schemaNoGlobalConst","parsedCode","c","order","sort","a","b","parsedInit","globalConstantTokens","findToken","globalConstantsHashAndValue","token","tokenArgs","tokenVal","expression","michelineValue","globalConstantsProvider","getGlobalConstantByHash","assign","RpcPacker","GlobalConstantNotFound","UnconfiguredGlobalConstantsProviderError","NoopGlobalConstantsProvider","_hash","RpcReadAdapter","protocols","getProtocols","next_protocol","time_between_blocks","minimal_block_delay","getConstants","getBlockHeader","getBlockTimestamp","timestamp","bigMapQuery","getBigMapExpr","saplingStateQuery","manager","getManagerKey","haveManager","opHashFilter","sourceFilter","kindFilter","destinationFilter","some","evaluateOpFilter","evaluateExpression","exp","and","every","evaluateFilter","or","filters","filterOrExp","UnsupportedEventError","ObservableSubscription","obs","shouldRetry","operatorFunction","retry","errorListeners","messageListeners","closeListeners","Subject","takeUntil","completed$","call","NEVER","listeners","l","console","remove","idx","splice","cb","off","defaultConfigStreamer","shouldObservableSubscriptionRetry","observableSubscriptionRetryFunction","getLastBlock","applyFilter","PollingSubscribeProvider","_config$","BehaviorSubject","timer$","pluck","pollingIntervalMilliseconds","getConfirmationPollingInterval","interval","timer","newBlock$","distinctUntilKeyChanged","publish","getValue","defaultIntervalTestnetsMainnet","defaultIntervalSandbox","blockTime","confirmationPollingInterval","exception","_filter","subscribeOperation","TaquitoLocalForger","LocalForger","Context","_signer","_proto","_config","defaultConfigConfirmation","providerDecorator","clonedContext","decorator","_rpcClient","RpcClient","_forger","_injector","_walletProvider","_parser","_packer","_globalConstantsProvider","_stream","setPartialConfig","isAnyProtocolActive","includes","registerProviderDecorator","fx","VERSION","ForgingMismatchError","UnspecifiedForgerError","CompositeForger","forgers","lastResult","pop","currentResult","RpcForger","forgeOperations","NoopParser","MichelCodecPacker","packDataBytes","DefaultGlobalConstantsProvider","_globalConstantsLibrary","loadGlobalConstant","globalConstant","TezosToolkit","_options","_context","_wallet","setProvider","setRpcProvider","setStreamProvider","setSignerProvider","setForgerProvider","setWalletProvider","setPackerProvider","setGlobalConstantsProvider","setReadProvider","f","getFactory","s","w","g","readP","tz","globalConstants","addExtension","module","extension","configureContext","ctor","getVersionInfo"],"sources":["../src/injector/rpc-injector.ts","../src/signer/noop.ts","../src/subscribe/create-observable-from-subscription.ts","../src/constants.ts","../src/format.ts","../src/contract/errors.ts","../src/contract/prepare.ts","../src/operations/types.ts","../src/operations/operation-errors.ts","../src/error.ts","../src/operations/operations.ts","../src/operations/batch-operation.ts","../src/operations/operation-emitter.ts","../src/batch/rpc-batch-provider.ts","../src/wallet/receipt.ts","../src/wallet/operation.ts","../src/wallet/batch-operation.ts","../src/wallet/delegation-operation.ts","../src/wallet/origination-operation.ts","../src/wallet/transaction-operation.ts","../src/wallet/operation-factory.ts","../src/tz/rpc-tz-provider.ts","../src/estimate/estimate.ts","../src/estimate/error.ts","../src/estimate/rpc-estimate-provider.ts","../src/operations/delegate-operation.ts","../src/operations/origination-operation.ts","../src/operations/register-global-constant-operation.ts","../src/operations/reveal-operation.ts","../src/operations/transaction-operation.ts","../src/contract/manager-lambda.ts","../src/contract/view_lambda.ts","../src/contract/compose.ts","../src/contract/contract-methods/contract-method-flat-param.ts","../src/wallet/wallet.ts","../src/wallet/legacy.ts","../src/contract/contract-methods/contract-method-object-param.ts","../src/contract/contract-methods/contract-on-chain-view.ts","../src/contract/contract-methods/contract-method-factory.ts","../src/contract/contract.ts","../src/contract/big-map.ts","../src/contract/sapling-state-abstraction.ts","../src/contract/semantic.ts","../src/operations/tx-rollup-origination-operation.ts","../src/operations/tx-rollup-batch-operation.ts","../src/contract/rpc-contract-provider.ts","../src/parser/michel-codec-parser.ts","../src/packer/rpc-packer.ts","../src/global-constants/error.ts","../src/global-constants/noop-global-constants-provider.ts","../src/read-provider/rpc-read-adapter.ts","../src/subscribe/filters.ts","../src/subscribe/observable-subscription.ts","../src/subscribe/polling-subcribe-provider.ts","../src/forger/taquito-local-forger.ts","../src/context.ts","../src/version.ts","../src/forger/composite-forger.ts","../src/forger/rpc-forger.ts","../src/parser/noop-parser.ts","../src/packer/michel-codec-packer.ts","../src/global-constants/default-global-constants-provider.ts","../src/taquito.ts"],"sourcesContent":["import { Injector } from './interface';\nimport { Context } from '../context';\n\nexport class RpcInjector implements Injector {\n  constructor(private context: Context) {}\n  inject(signedOperationBytes: string): Promise<string> {\n    return this.context.rpc.injectOperation(signedOperationBytes);\n  }\n}\n","import { Signer } from './interface';\n\n/**\n *  @category Error\n *  @description Error that indicates the signer has been unconfigured in the TezosToolkit instance\n */\nexport class UnconfiguredSignerError extends Error {\n  name = 'UnconfiguredSignerError';\n\n  constructor() {\n    super(\n      'No signer has been configured. Please configure one by calling setProvider({signer}) on your TezosToolkit instance.'\n    );\n  }\n}\n\n/**\n * @description Default signer implementation which does nothing and produce invalid signature\n */\nexport class NoopSigner implements Signer {\n  async publicKey(): Promise<string> {\n    throw new UnconfiguredSignerError();\n  }\n  async publicKeyHash(): Promise<string> {\n    throw new UnconfiguredSignerError();\n  }\n  async secretKey(): Promise<string> {\n    throw new UnconfiguredSignerError();\n  }\n  async sign(_bytes: string, _watermark?: Uint8Array): Promise<any> {\n    throw new UnconfiguredSignerError();\n  }\n}\n","import { BlockResponse } from '@taquito/rpc';\nimport { Observable } from 'rxjs';\nimport { OperationContent, Subscription } from './interface';\n\nexport function createObservableFromSubscription<\n  T extends BlockResponse | string | OperationContent\n>(sub: Subscription<T>) {\n  return new Observable<T>((subscriber) => {\n    sub.on('data', (data: T) => {\n      subscriber.next(data);\n    });\n\n    sub.on('error', (error: Error) => {\n      subscriber.error(error);\n    });\n\n    sub.on('close', () => {\n      subscriber.complete();\n    });\n\n    return () => {\n      sub.close();\n    };\n  });\n}\n","export enum DEFAULT_GAS_LIMIT {\n  DELEGATION = 10600,\n  ORIGINATION = 10600,\n  TRANSFER = 10600,\n  REVEAL = 1100,\n}\nexport enum DEFAULT_FEE {\n  DELEGATION = 1257,\n  ORIGINATION = 10000,\n  TRANSFER = 10000,\n  REVEAL = 374,\n}\nexport enum DEFAULT_STORAGE_LIMIT {\n  DELEGATION = 0,\n  ORIGINATION = 257,\n  TRANSFER = 257,\n  REVEAL = 0,\n}\n\nexport enum Protocols {\n  Pt24m4xi = 'Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd',\n  PsBABY5H = 'PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU',\n  PsBabyM1 = 'PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS',\n  PsCARTHA = 'PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb',\n  PsDELPH1 = 'PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo',\n  PtEdo2Zk = 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA',\n  PsFLorena = 'PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i',\n  PtGRANADs = 'PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV',\n  PtHangz2 = 'PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx',\n  PsiThaCa = 'PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP',\n  Psithaca2 = 'Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A',\n  PtJakart2 = 'PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY',\n  ProtoALpha = 'ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK',\n}\n\nexport const protocols = {\n  '004': [Protocols.Pt24m4xi],\n  '005': [Protocols.PsBABY5H, Protocols.PsBabyM1],\n  '006': [Protocols.PsCARTHA],\n  '007': [Protocols.PsDELPH1],\n  '008': [Protocols.PtEdo2Zk], // edonet v2\n  '009': [Protocols.PsFLorena],\n  '010': [Protocols.PtGRANADs],\n  '011': [Protocols.PtHangz2], // hangzhou v2,\n  '012': [Protocols.PsiThaCa, Protocols.Psithaca2],\n  '013': [Protocols.PtJakart2],\n  '014': [Protocols.ProtoALpha],\n};\n\nexport enum ChainIds {\n  MAINNET = 'NetXdQprcVkpaWU',\n  CARTHAGENET = 'NetXjD3HPJJjmcd',\n  DELPHINET = 'NetXm8tYqnMWky1',\n  EDONET = 'NetXSgo1ZT2DRUG',\n  FLORENCENET = 'NetXxkAx4woPLyu',\n  GRANADANET = 'NetXz969SFaFn8k',\n  HANGZHOUNET = 'NetXZSsxBpMQeAT',\n  ITHACANET = 'NetXbhmtAbMukLc',\n  ITHACANET2 = 'NetXnHfVqm9iesp',\n  JAKARTANET2 = 'NetXLH1uAxK7CCh'\n}\n","import BigNumber from 'bignumber.js';\n\nconst TZ_DECIMALS = 6;\nconst MTZ_DECIMALS = 3;\n\ntype Format = 'tz' | 'mtz' | 'mutez';\n\nfunction getDecimal(format: Format) {\n  switch (format) {\n    case 'tz':\n      return TZ_DECIMALS;\n    case 'mtz':\n      return MTZ_DECIMALS;\n    case 'mutez':\n    default:\n      return 0;\n  }\n}\n\nexport function format(\n  from: Format = 'mutez',\n  to: Format = 'mutez',\n  amount: number | string | BigNumber\n) {\n  const bigNum = new BigNumber(amount);\n  if (bigNum.isNaN()) {\n    return amount;\n  }\n\n  return bigNum\n    .multipliedBy(Math.pow(10, getDecimal(from)))\n    .dividedBy(Math.pow(10, getDecimal(to)));\n}\n","import { HttpResponseError } from '@taquito/http-utils';\nimport { MichelsonV1Expression } from '@taquito/rpc';\n\n/**\n *  @category Error\n *  @description Error that indicates invalid smart contract parameters being passed or used\n */\nexport class InvalidParameterError extends Error {\n  name = 'Invalid parameters error';\n  constructor(public smartContractMethodName: string, public sigs: any[], public args: any[]) {\n    super(\n      `${smartContractMethodName} Received ${\n        args.length\n      } arguments while expecting one of the following signatures (${JSON.stringify(sigs)})`\n    );\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid delegation source contract address being passed or used\n */\nexport class InvalidDelegationSource extends Error {\n  name = 'Invalid delegation source error';\n\n  constructor(public source: string) {\n    super(\n      `Since Babylon delegation source can no longer be a contract address ${source}. Please use the smart contract abstraction to set your delegate.`\n    );\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid smart contract code parameter being passed or used\n */\nexport class InvalidCodeParameter extends Error {\n  public name = 'InvalidCodeParameter';\n  constructor(public message: string, public readonly data: any) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates invalid smart contract init parameter being passed or used\n */\nexport class InvalidInitParameter extends Error {\n  public name = 'InvalidInitParameter';\n  constructor(public message: string, public readonly data: any) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates invalid view parameter of a smart contract\n */\nexport class InvalidViewParameterError extends Error {\n  name = 'Invalid view parameters error';\n  cause: any;\n  constructor(\n    public smartContractViewName: string,\n    public sigs: any,\n    public args: any,\n    public originalError: any\n  ) {\n    super(\n      `Unable to encode the parameter of the view: ${smartContractViewName}. Received ${args} as parameter while expecting one of the following signatures (${JSON.stringify(\n        sigs\n      )})`\n    );\n    this.cause = originalError;\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when conducting a view simulation\n */\nexport class ViewSimulationError extends Error {\n  name = 'ViewSimulationError';\n  constructor(\n    public message: string,\n    public viewName: string,\n    public failWith?: MichelsonV1Expression,\n    public originalError?: any\n  ) {\n    super(message);\n  }\n}\n\nexport const validateAndExtractFailwith = (\n  error: HttpResponseError\n): MichelsonV1Expression | undefined => {\n  if (isJsonString(error.body)) {\n    const parsedError = JSON.parse(error.body);\n    if (Array.isArray(parsedError) && 'with' in parsedError[parsedError.length - 1]) {\n      return parsedError[parsedError.length - 1].with;\n    }\n  }\n};\n\nconst isJsonString = (str: string) => {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\n/**\n *  @category Error\n *  @description Error that indicates invalid or unconfigured context when executing a view\n */\nexport class InvalidViewSimulationContext extends Error {\n  public name = 'InvalidViewSimulationContext';\n  constructor(public info: string) {\n    super(`${info} Please configure the context of the view execution in the executeView method.`);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a mistake happening during the reveal operation\n */\nexport class RevealOperationError extends Error {\n  public name = 'RevealOperationError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a mistake in the parameters in the preparation of an Origination operation\n */\nexport class OriginationParameterError extends Error {\n  public name = 'OriginationParameterError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n","import { Schema } from '@taquito/michelson-encoder';\nimport { OpKind, MichelsonV1Expression } from '@taquito/rpc';\nimport { Prim, Expr } from '@taquito/michel-codec';\nimport {\n  OriginateParams,\n  RPCOriginationOperation,\n  TransferParams,\n  RPCTransferOperation,\n  DelegateParams,\n  RPCDelegateOperation,\n  RegisterDelegateParams,\n  RPCRevealOperation,\n  RevealParams,\n  RegisterGlobalConstantParams,\n  RPCRegisterGlobalConstantOperation,\n  TxRollupOriginateParams,\n  RPCTxRollupOriginationOperation,\n  TxRollupBatchParams,\n  RPCTxRollupBatchOperation,\n} from '../operations/types';\nimport { DEFAULT_FEE, DEFAULT_GAS_LIMIT, DEFAULT_STORAGE_LIMIT } from '../constants';\nimport { format } from '../format';\nimport { InvalidCodeParameter, InvalidInitParameter, OriginationParameterError } from './errors';\n\nexport const createOriginationOperation = async ({\n  code,\n  init,\n  balance = '0',\n  delegate,\n  storage,\n  fee = DEFAULT_FEE.ORIGINATION,\n  gasLimit = DEFAULT_GAS_LIMIT.ORIGINATION,\n  storageLimit = DEFAULT_STORAGE_LIMIT.ORIGINATION,\n  mutez = false,\n}: OriginateParams) => {\n  if (storage !== undefined && init !== undefined) {\n    throw new OriginationParameterError(\n      'Storage and Init cannot be set a the same time. Please either use storage or init but not both.'\n    );\n  }\n\n  if (!Array.isArray(code)) {\n    throw new InvalidCodeParameter('Wrong code parameter type, expected an array', code);\n  }\n\n  let contractStorage: Expr | undefined;\n  if (storage !== undefined) {\n    const storageType = (code as Expr[]).find(\n      (p): p is Prim => 'prim' in p && p.prim === 'storage'\n    );\n    if (storageType?.args === undefined) {\n      throw new InvalidCodeParameter('The storage section is missing from the script', code);\n    }\n    const schema = new Schema(storageType.args[0] as MichelsonV1Expression); // TODO\n    contractStorage = schema.Encode(storage);\n  } else if (init !== undefined && typeof init === 'object') {\n    contractStorage = init as Expr;\n  } else {\n    throw new InvalidInitParameter('Wrong init parameter type, expected JSON Michelson', init);\n  }\n\n  const script = {\n    code,\n    storage: contractStorage,\n  };\n\n  const operation: RPCOriginationOperation = {\n    kind: OpKind.ORIGINATION,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    balance: mutez ? balance.toString() : format('tz', 'mutez', balance).toString(),\n    script,\n  };\n\n  if (delegate) {\n    operation.delegate = delegate;\n  }\n  return operation;\n};\n\nexport const createTransferOperation = async ({\n  to,\n  amount,\n  parameter,\n  fee = DEFAULT_FEE.TRANSFER,\n  gasLimit = DEFAULT_GAS_LIMIT.TRANSFER,\n  storageLimit = DEFAULT_STORAGE_LIMIT.TRANSFER,\n  mutez = false,\n}: TransferParams) => {\n  const operation: RPCTransferOperation = {\n    kind: OpKind.TRANSACTION,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    amount: mutez ? amount.toString() : format('tz', 'mutez', amount).toString(),\n    destination: to,\n    parameters: parameter,\n  };\n  return operation;\n};\n\nexport const createSetDelegateOperation = async ({\n  delegate,\n  source,\n  fee = DEFAULT_FEE.DELEGATION,\n  gasLimit = DEFAULT_GAS_LIMIT.DELEGATION,\n  storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION,\n}: DelegateParams) => {\n  const operation: RPCDelegateOperation = {\n    kind: OpKind.DELEGATION,\n    source,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    delegate,\n  };\n  return operation;\n};\n\nexport const createRegisterDelegateOperation = async (\n  {\n    fee = DEFAULT_FEE.DELEGATION,\n    gasLimit = DEFAULT_GAS_LIMIT.DELEGATION,\n    storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION,\n  }: RegisterDelegateParams,\n  source: string\n) => {\n  return {\n    kind: OpKind.DELEGATION,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    delegate: source,\n  } as RPCDelegateOperation;\n};\n\nexport const createRevealOperation = async (\n  {\n    fee = DEFAULT_FEE.REVEAL,\n    gasLimit = DEFAULT_GAS_LIMIT.REVEAL,\n    storageLimit = DEFAULT_STORAGE_LIMIT.REVEAL,\n  }: RevealParams,\n  source: string,\n  publicKey: string\n) => {\n  return {\n    kind: OpKind.REVEAL,\n    fee,\n    public_key: publicKey,\n    source,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n  } as RPCRevealOperation;\n};\n\nexport const createRegisterGlobalConstantOperation = async ({\n  value,\n  source,\n  fee,\n  gasLimit,\n  storageLimit,\n}: RegisterGlobalConstantParams) => {\n  return {\n    kind: OpKind.REGISTER_GLOBAL_CONSTANT,\n    value,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    source,\n  } as RPCRegisterGlobalConstantOperation;\n};\n\nexport const createTxRollupOriginationOperation = async ({\n  source,\n  fee,\n  gasLimit,\n  storageLimit,\n}: TxRollupOriginateParams) => {\n  return {\n    kind: OpKind.TX_ROLLUP_ORIGINATION,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    source,\n    tx_rollup_origination: {},\n  } as RPCTxRollupOriginationOperation;\n};\n\nexport const createTxRollupBatchOperation = async ({\n  content,\n  rollup,\n  source,\n  fee,\n  gasLimit,\n  storageLimit,\n}: TxRollupBatchParams) => {\n  return {\n    kind: OpKind.TX_ROLLUP_SUBMIT_BATCH,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    source,\n    content,\n    rollup,\n  } as RPCTxRollupBatchOperation;\n};\n","import {\n  OperationObject,\n  InternalOperationResultKindEnum,\n  OpKind,\n  TransactionOperationParameter,\n  MichelsonV1Expression,\n} from '@taquito/rpc';\n\nexport { OpKind } from '@taquito/rpc';\n\nexport type withKind<T, K extends OpKind> = T & { kind: K };\n\nexport type ParamsWithKind =\n  | withKind<OriginateParams, OpKind.ORIGINATION>\n  | withKind<DelegateParams, OpKind.DELEGATION>\n  | withKind<TransferParams, OpKind.TRANSACTION>\n  | withKind<ActivationParams, OpKind.ACTIVATION>\n  | withKind<RegisterGlobalConstantParams, OpKind.REGISTER_GLOBAL_CONSTANT>\n  | withKind<TxRollupOriginateParams, OpKind.TX_ROLLUP_ORIGINATION>\n  | withKind<TxRollupBatchParams, OpKind.TX_ROLLUP_SUBMIT_BATCH>;\n\nexport type ParamsWithKindExtended = ParamsWithKind | withKind<RevealParams, OpKind.REVEAL>;\n\nexport const attachKind = <T, K extends OpKind>(op: T, kind: K) => {\n  return { ...op, kind } as withKind<T, K>;\n};\n\nexport const findWithKind = <T extends { kind: OpKind }, K extends OpKind>(\n  arr: T[],\n  kind: K\n): (T & { kind: K }) | undefined => {\n  if (Array.isArray(arr)) {\n    const found = arr.find((op) => op.kind === kind);\n\n    if (found && isKind(found, kind)) {\n      return found;\n    }\n  }\n};\n\nexport const isKind = <T extends { kind: OpKind }, K extends OpKind>(\n  op: T,\n  kind: K\n): op is withKind<T, K> => {\n  return op.kind === kind;\n};\n\nexport type RPCOpWithFee =\n  | RPCTransferOperation\n  | RPCOriginationOperation\n  | RPCDelegateOperation\n  | RPCRevealOperation\n  | RPCRegisterGlobalConstantOperation\n  | RPCTxRollupOriginationOperation\n  | RPCTxRollupBatchOperation;\nexport type RPCOpWithSource =\n  | RPCTransferOperation\n  | RPCOriginationOperation\n  | RPCDelegateOperation\n  | RPCRevealOperation\n  | RPCRegisterGlobalConstantOperation\n  | RPCTxRollupOriginationOperation\n  | RPCTxRollupBatchOperation;\n\nexport const isOpWithFee = <T extends { kind: OpKind }>(\n  op: T\n): op is withKind<T, Exclude<OpKind, OpKind.ACTIVATION>> => {\n  return (\n    [\n      'transaction',\n      'delegation',\n      'origination',\n      'reveal',\n      'register_global_constant',\n      'tx_rollup_origination',\n      'tx_rollup_submit_batch',\n    ].indexOf(op.kind) !== -1\n  );\n};\n\nexport const isOpRequireReveal = <T extends { kind: OpKind }>(\n  op: T\n): op is withKind<T, Exclude<InternalOperationResultKindEnum, OpKind.REVEAL>> => {\n  return (\n    [\n      'transaction',\n      'delegation',\n      'origination',\n      'register_global_constant',\n      'tx_rollup_origination',\n      'tx_rollup_submit_batch',\n    ].indexOf(op.kind) !== -1\n  );\n};\n\nexport type SourceKinds = InternalOperationResultKindEnum;\n\nexport const isSourceOp = <T extends { kind: OpKind }>(op: T): op is withKind<T, SourceKinds> => {\n  return ['transaction', 'delegation', 'origination', 'reveal', 'ballot'].indexOf(op.kind) !== -1;\n};\n\nexport const hasMetadata = <T extends { kind: OpKind }, K>(\n  op: T\n): op is T & {\n  metadata: K;\n} => {\n  return 'metadata' in op;\n};\n\nexport const hasMetadataWithResult = <T extends { kind: OpKind }, K>(\n  op: T\n): op is T & {\n  metadata: {\n    operation_result: K;\n  };\n} => {\n  return hasMetadata<T, any>(op) && 'operation_result' in op.metadata;\n};\n\nexport const hasMetadataWithInternalOperationResult = <T extends { kind: OpKind }, K>(\n  op: T\n): op is T & {\n  metadata: {\n    internal_operation_results?: K;\n  };\n} => {\n  return hasMetadata<T, any>(op) && 'internal_operation_results' in op.metadata;\n};\n\nexport interface GasConsumingOperation {\n  consumedGas?: string;\n  gasLimit: number;\n}\n\nexport interface StorageConsumingOperation {\n  storageDiff?: string;\n  storageSize?: string;\n  storageLimit: number;\n}\n\nexport interface FeeConsumingOperation {\n  fee: number;\n}\n\nexport type OriginateParamsBase = {\n  balance?: string;\n  code: string | object[];\n  delegate?: string;\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n  mutez?: boolean;\n};\n\n/**\n * @description Parameters for originate method\n */\nexport type OriginateParams<TStorage = any> = OriginateParamsBase &\n  (\n    | {\n        init?: never;\n        /** JS representation of a storage object */\n        storage: TStorage;\n      }\n    | {\n        /** Initial storage object value. Either Micheline or JSON encoded */\n        init: string | object;\n        storage?: never;\n      }\n  );\n\nexport interface ActivationParams {\n  pkh: string;\n  secret: string;\n}\n\n/**\n * @description RPC origination operation\n */\nexport interface RPCOriginationOperation {\n  kind: OpKind.ORIGINATION;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  balance: string;\n  delegate?: string;\n  source?: string;\n  script: {\n    code: any;\n    storage: any;\n  };\n}\n\n/**\n * @description RPC reveal operation\n */\nexport interface RPCRevealOperation {\n  kind: OpKind.REVEAL;\n  fee: number;\n  public_key: string;\n  source?: string;\n  gas_limit: number;\n  storage_limit: number;\n}\n\nexport interface RevealParams {\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n/**\n * @description Result of a forge operation contains the operation plus its encoded version\n */\nexport interface ForgedBytes {\n  opbytes: string;\n  opOb: OperationObject;\n  counter: number;\n}\n\n/**\n * @description Parameters for setDelegate method\n */\nexport interface DelegateParams {\n  source: string;\n  delegate?: string;\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n/**\n * @description Parameters for registerDelegate method\n */\nexport interface RegisterDelegateParams {\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n/**\n * @description RPC delegation operation\n */\nexport interface RPCDelegateOperation {\n  kind: OpKind.DELEGATION;\n  source?: string;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  delegate?: string;\n}\n\n/**\n * @description Parameters for transfer method\n */\nexport interface TransferParams {\n  to: string;\n  source?: string;\n  amount: number;\n  fee?: number;\n  parameter?: TransactionOperationParameter;\n  gasLimit?: number;\n  storageLimit?: number;\n  mutez?: boolean;\n}\n\n/**\n * @description RPC register global constant operation\n */\nexport interface RPCRegisterGlobalConstantOperation {\n  kind: OpKind.REGISTER_GLOBAL_CONSTANT;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  source: string;\n  value: MichelsonV1Expression;\n}\n\n/**\n * @description Parameters for the `registerGlobalConstant` method\n */\nexport interface RegisterGlobalConstantParams {\n  value: MichelsonV1Expression;\n  source?: string;\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n/**\n * @description RPC transfer operation\n */\nexport interface RPCTransferOperation {\n  kind: OpKind.TRANSACTION;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  amount: string;\n  source?: string;\n  destination: string;\n  parameters?: TransactionOperationParameter;\n}\n\n/**\n * @description RPC activate account operation\n */\nexport interface RPCActivateOperation {\n  kind: OpKind.ACTIVATION;\n  pkh: string;\n  secret: string;\n}\n\n/**\n * @description RPC tx rollup origination operation\n */\nexport interface RPCTxRollupOriginationOperation {\n  kind: OpKind.TX_ROLLUP_ORIGINATION;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  source: string;\n  tx_rollup_origination: object;\n}\n\n/**\n * @description Parameters for the `txRollupOriginate` method\n */\nexport interface TxRollupOriginateParams {\n  source?: string;\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n/**\n * @description RPC tx rollup batch operation\n */\nexport interface RPCTxRollupBatchOperation {\n  kind: OpKind.TX_ROLLUP_SUBMIT_BATCH;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  source: string;\n  rollup: string;\n  content: string;\n}\n\n/**\n * @description Parameters for the `txRollupSubmitBatch` method\n */\nexport interface TxRollupBatchParams {\n  source?: string;\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n  rollup: string;\n  content: string;\n}\n\nexport type RPCOperation =\n  | RPCOriginationOperation\n  | RPCTransferOperation\n  | RPCDelegateOperation\n  | RPCRevealOperation\n  | RPCActivateOperation\n  | RPCRegisterGlobalConstantOperation\n  | RPCTxRollupOriginationOperation\n  | RPCTxRollupBatchOperation;\n\nexport type PrepareOperationParams = {\n  operation: RPCOperation | RPCOperation[];\n  source?: string;\n};\n","import {\n  MichelsonV1ExpressionBase,\n  OperationResultDelegation,\n  OperationResultOrigination,\n  OperationResultRegisterGlobalConstant,\n  OperationResultReveal,\n  OperationResultTransaction,\n  PreapplyResponse,\n  TezosGenericOperationError,\n} from '@taquito/rpc';\nimport {\n  hasMetadata,\n  hasMetadataWithInternalOperationResult,\n  hasMetadataWithResult,\n} from './types';\n\nexport interface TezosOperationErrorWithMessage extends TezosGenericOperationError {\n  with: MichelsonV1ExpressionBase;\n}\n\nconst isErrorWithMessage = (error: any): error is TezosOperationErrorWithMessage => {\n  return 'with' in error;\n};\n\n/**\n *  @category Error\n *  @description Generic tezos error that will be thrown when a mistake occurs when doing an operation; more details here https://tezos.gitlab.io/api/errors.html\n */\nexport class TezosOperationError extends Error {\n  name = 'TezosOperationError';\n  id: string;\n  kind: string;\n\n  constructor(public errors: TezosGenericOperationError[], public errorDetails?: string) {\n    super();\n    // Last error is 'often' the one with more detail\n    const lastError = errors[errors.length - 1];\n    this.id = lastError.id;\n    this.kind = lastError.kind;\n\n    this.message = `(${this.kind}) ${this.id}`;\n\n    if (isErrorWithMessage(lastError)) {\n      if (lastError.with.string) {\n        this.message = lastError.with.string;\n      } else if (lastError.with.int) {\n        this.message = lastError.with.int;\n      } else {\n        this.message = JSON.stringify(lastError.with);\n      }\n    }\n  }\n}\n\n/**\n *  @category Error\n *  @description Tezos error that will be thrown when a mistake happens during the preapply stage\n */\nexport class TezosPreapplyFailureError extends Error {\n  name = 'TezosPreapplyFailureError';\n\n  constructor(public result: any) {\n    super('Preapply returned an unexpected result');\n  }\n}\n\nexport type MergedOperationResult = OperationResultDelegation &\n  OperationResultOrigination &\n  OperationResultTransaction &\n  OperationResultRegisterGlobalConstant &\n  OperationResultReveal & {\n    fee?: string;\n  };\n\n// Flatten all operation content results and internal operation results into a single array\n// Some cases where we can have multiple operation results or internal operation results are:\n// - When an operation includes a reveal operation\n// - When an operation is made using the batch API\n// - Smart contract call can contains internal operation results when they call other smart contract internally or originate contracts\nexport const flattenOperationResult = (response: PreapplyResponse | PreapplyResponse[]) => {\n  const results = Array.isArray(response) ? response : [response];\n\n  const returnedResults: MergedOperationResult[] = [];\n  for (let i = 0; i < results.length; i++) {\n    for (let j = 0; j < results[i].contents.length; j++) {\n      const content = results[i].contents[j];\n      if (hasMetadataWithResult(content)) {\n        returnedResults.push({\n          fee: content.fee,\n          ...content.metadata.operation_result,\n        });\n\n        if (Array.isArray(content.metadata.internal_operation_results)) {\n          content.metadata.internal_operation_results.forEach((x) =>\n            returnedResults.push(x.result)\n          );\n        }\n      }\n    }\n  }\n\n  return returnedResults;\n};\n\n/***\n * @description Flatten all error from preapply response (including internal error)\n */\nexport const flattenErrors = (\n  response: PreapplyResponse | PreapplyResponse[],\n  status = 'failed'\n) => {\n  const results = Array.isArray(response) ? response : [response];\n\n  let errors: TezosGenericOperationError[] = [];\n  // Transaction that do not fail will be backtracked in case one failure occur\n  for (let i = 0; i < results.length; i++) {\n    for (let j = 0; j < results[i].contents.length; j++) {\n      const content = results[i].contents[j];\n      if (hasMetadata(content)) {\n        if (hasMetadataWithResult(content) && content.metadata.operation_result.status === status) {\n          errors = errors.concat(content.metadata.operation_result.errors || []);\n        }\n        if (\n          hasMetadataWithInternalOperationResult(content) &&\n          Array.isArray(content.metadata.internal_operation_results)\n        ) {\n          for (const internalResult of content.metadata.internal_operation_results) {\n            if ('result' in internalResult && internalResult.result.status === status) {\n              errors = errors.concat(internalResult.result.errors || []);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n\n/**\n *  @category Error\n *  @description Error that indicates a general failure happening during an origination operation\n */\nexport class OriginationOperationError extends Error {\n  public name = 'OriginationOperationError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n","/**\n *  @category Error\n *  @description Error that indicates invalid confirmation count has been passed or configured\n */\nexport class InvalidConfirmationCountError extends Error {\n  public name = 'InvalidConfirmationCountError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates undefined confirmation has not been specified or configured\n */\nexport class ConfirmationUndefinedError extends Error {\n  public name = 'ConfirmationUndefinedError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid filter expression being passed or used\n */\nexport class InvalidFilterExpressionError extends Error {\n  public name = 'InvalidFilterExpressionError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultReveal } from '@taquito/rpc';\nimport { defer, EMPTY, of, ReplaySubject, throwError } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  first,\n  map,\n  shareReplay,\n  switchMap,\n  timeoutWith,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { ForgedBytes, hasMetadataWithResult } from './types';\nimport { validateOperation, ValidationResult, InvalidOperationHashError } from '@taquito/utils';\nimport { createObservableFromSubscription } from '../subscribe/create-observable-from-subscription';\nimport { InvalidConfirmationCountError } from '../error';\n\ninterface PollingConfig {\n  timeout: number;\n  interval: number;\n}\n\n/**\n * @description Utility class to interact with Tezos operations\n */\nexport class Operation {\n  private _pollingConfig$ = new ReplaySubject<PollingConfig>(1);\n\n  private currentHead$ = this._pollingConfig$.pipe(\n    switchMap((config) => {\n      return defer(() =>\n        createObservableFromSubscription(this.context.stream.subscribeBlock('head'))\n      ).pipe(\n        timeoutWith(config.timeout * 1000, throwError(new Error('Confirmation polling timed out')))\n      );\n    }),\n    shareReplay({ refCount: true })\n  );\n\n  // Observable that emit once operation is seen in a block\n  private confirmed$ = this.currentHead$.pipe(\n    map((head) => {\n      for (let i = 3; i >= 0; i--) {\n        head.operations[i].forEach((op) => {\n          if (op.hash === this.hash) {\n            this._foundAt = head.header.level;\n          }\n        });\n      }\n\n      if (head.header.level - this._foundAt >= 0) {\n        return this._foundAt;\n      }\n    }),\n    filter((x) => x !== undefined),\n    first(),\n    shareReplay()\n  );\n\n  protected _foundAt = Number.POSITIVE_INFINITY;\n  get includedInBlock() {\n    return this._foundAt;\n  }\n  /**\n   *\n   * @param hash Operation hash\n   * @param raw Raw operation that was injected\n   * @param context Taquito context allowing access to rpc and signer\n   */\n  constructor(\n    public readonly hash: string,\n    public readonly raw: ForgedBytes,\n    public readonly results: OperationContentsAndResult[],\n    protected readonly context: Context\n  ) {\n    if (validateOperation(this.hash) !== ValidationResult.VALID) {\n      throw new InvalidOperationHashError(this.hash);\n    }\n\n    this.confirmed$\n      .pipe(\n        first(),\n        catchError(() => {\n          return of(EMPTY);\n        })\n      )\n      .subscribe();\n  }\n\n  get revealOperation() {\n    return (\n      Array.isArray(this.results) &&\n      (this.results.find((op) => op.kind === 'reveal') as\n        | OperationContentsAndResultReveal\n        | undefined)\n    );\n  }\n\n  public get revealStatus() {\n    if (this.revealOperation) {\n      return this.revealOperation.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  public get status() {\n    return (\n      this.results.map((result) => {\n        if (hasMetadataWithResult(result)) {\n          return result.metadata.operation_result.status;\n        } else {\n          return 'unknown';\n        }\n      })[0] || 'unknown'\n    );\n  }\n\n  /**\n   *\n   * @param confirmations [0] Number of confirmation to wait for\n   * @param timeout [180] Timeout\n   */\n  async confirmation(confirmations?: number, timeout?: number) {\n    if (typeof confirmations !== 'undefined' && confirmations < 1) {\n      throw new InvalidConfirmationCountError('Confirmation count must be at least 1');\n    }\n\n    const { defaultConfirmationCount, confirmationPollingTimeoutSecond } = this.context.config;\n    this._pollingConfig$.next({\n      timeout: timeout || confirmationPollingTimeoutSecond,\n    } as Required<PollingConfig>);\n\n    const conf = confirmations !== undefined ? confirmations : defaultConfirmationCount;\n\n    return new Promise<number>((resolve, reject) => {\n      this.confirmed$\n        .pipe(\n          switchMap(() => this.currentHead$),\n          filter((head) => head.header.level - this._foundAt >= conf - 1),\n          first()\n        )\n        .subscribe((_) => {\n          resolve(this._foundAt + (conf - 1));\n        }, reject);\n    });\n  }\n}\n","import { OperationContentsAndResult } from '@taquito/rpc';\nimport { BATCH_KINDS } from '../batch/rpc-batch-provider';\nimport { Context } from '../context';\nimport { flattenErrors, flattenOperationResult } from './operation-errors';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCOperation,\n  StorageConsumingOperation,\n  hasMetadataWithResult,\n} from './types';\n\nexport class BatchOperation\n  extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation\n{\n  constructor(\n    hash: string,\n    private readonly params: RPCOperation[],\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  private sumProp(arr: any[], prop: string) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  public get status() {\n    return (\n      this.results\n        .filter((result) => BATCH_KINDS.indexOf(result.kind) !== -1)\n        .map((result) => {\n          if (hasMetadataWithResult(result)) {\n            return result.metadata.operation_result.status;\n          } else {\n            return 'unknown';\n          }\n        })[0] || 'unknown'\n    );\n  }\n\n  get fee() {\n    return this.sumProp(this.params, 'fee');\n  }\n\n  get gasLimit() {\n    return this.sumProp(this.params, 'gas_limit');\n  }\n\n  get storageLimit() {\n    return this.sumProp(this.params, 'storage_limit');\n  }\n\n  get consumedGas() {\n    return String(this.sumProp(flattenOperationResult({ contents: this.results }), 'consumed_gas'));\n  }\n\n  get storageDiff() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.results }), 'paid_storage_size_diff')\n    );\n  }\n\n  get errors() {\n    return flattenErrors({ contents: this.results });\n  }\n}\n","import {\n  OperationContents,\n  OperationContentsAndResult,\n  OpKind,\n  RpcClientInterface,\n  RPCRunOperationParam,\n} from '@taquito/rpc';\nimport { Protocols } from '../constants';\nimport { Context } from '../context';\nimport { Estimate } from '../estimate/estimate';\nimport { flattenErrors, TezosOperationError, TezosPreapplyFailureError } from './operation-errors';\nimport { InvalidOperationKindError, DeprecationError } from '@taquito/utils';\nimport {\n  ForgedBytes,\n  isOpRequireReveal,\n  ParamsWithKind,\n  PrepareOperationParams,\n  RPCOperation,\n  RPCOpWithFee,\n  RPCOpWithSource,\n} from './types';\n\nexport interface PreparedOperation {\n  opOb: {\n    branch: string;\n    contents: OperationContents[];\n    protocol: string;\n  };\n  counter: number;\n}\n\nexport abstract class OperationEmitter {\n  get rpc(): RpcClientInterface {\n    return this.context.rpc;\n  }\n\n  get signer() {\n    return this.context.signer;\n  }\n\n  constructor(protected context: Context) {}\n\n  protected async isRevealOpNeeded(op: RPCOperation[] | ParamsWithKind[], pkh: string) {\n    return !(await this.isAccountRevealRequired(pkh)) || !this.isRevealRequiredForOpType(op)\n      ? false\n      : true;\n  }\n\n  protected async isAccountRevealRequired(publicKeyHash: string) {\n    return !(await this.context.readProvider.isAccountRevealed(publicKeyHash, 'head'));\n  }\n\n  protected isRevealRequiredForOpType(op: RPCOperation[] | ParamsWithKind[]) {\n    let opRequireReveal = false;\n    for (const operation of op) {\n      if (isOpRequireReveal(operation)) {\n        opRequireReveal = true;\n      }\n    }\n    return opRequireReveal;\n  }\n\n  // Originally from sotez (Copyright (c) 2018 Andrew Kishino)\n  protected async prepareOperation(\n    { operation, source }: PrepareOperationParams,\n    pkh?: string\n  ): Promise<PreparedOperation> {\n    const counters: { [key: string]: number } = {};\n    let ops: RPCOperation[] = [];\n\n    const blockHashPromise = this.context.readProvider.getBlockHash('head~2');\n    const blockProtoPromise = this.context.readProvider.getNextProtocol('head');\n\n    if (Array.isArray(operation)) {\n      ops = [...operation];\n    } else {\n      ops = [operation];\n    }\n\n    // Implicit account who emit the operation\n    const publicKeyHash = pkh ? pkh : await this.signer.publicKeyHash();\n    let counterPromise: Promise<string | undefined> = Promise.resolve(undefined);\n\n    for (let i = 0; i < ops.length; i++) {\n      if (isOpRequireReveal(ops[i]) || ops[i].kind === 'reveal') {\n        counterPromise = this.context.readProvider.getCounter(publicKeyHash, 'head');\n        break;\n      }\n    }\n\n    const [hash, protocol, headCounter] = await Promise.all([\n      blockHashPromise,\n      blockProtoPromise,\n      counterPromise,\n    ]);\n\n    const counter = parseInt(headCounter || '0', 10);\n    if (!counters[publicKeyHash] || counters[publicKeyHash] < counter) {\n      counters[publicKeyHash] = counter;\n    }\n\n    const getFee = (op: RPCOpWithFee) => {\n      const opCounter = ++counters[publicKeyHash];\n      return {\n        counter: `${opCounter}`,\n        fee: typeof op.fee === 'undefined' ? '0' : `${op.fee}`,\n        gas_limit: typeof op.gas_limit === 'undefined' ? '0' : `${op.gas_limit}`,\n        storage_limit: typeof op.storage_limit === 'undefined' ? '0' : `${op.storage_limit}`,\n      };\n    };\n\n    const getSource = (op: RPCOpWithSource) => {\n      return {\n        source: typeof op.source === 'undefined' ? source || publicKeyHash : op.source,\n      };\n    };\n\n    const constructOps = (cOps: RPCOperation[]): OperationContents[] =>\n      cOps.map((op: RPCOperation) => {\n        switch (op.kind) {\n          case OpKind.ACTIVATION:\n            return {\n              ...op,\n            };\n          case OpKind.ORIGINATION:\n            return {\n              ...op,\n              balance: typeof op.balance !== 'undefined' ? `${op.balance}` : '0',\n              ...getSource(op),\n              ...getFee(op),\n            };\n          case OpKind.TRANSACTION: {\n            const cops = {\n              ...op,\n              amount: typeof op.amount !== 'undefined' ? `${op.amount}` : '0',\n              ...getSource(op),\n              ...getFee(op),\n            };\n            if (cops.source.toLowerCase().startsWith('kt1')) {\n              throw new DeprecationError(\n                `KT1 addresses are not supported as source since ${Protocols.PsBabyM1}`\n              );\n            }\n            return cops;\n          }\n          case OpKind.REVEAL:\n          case OpKind.DELEGATION:\n          case OpKind.REGISTER_GLOBAL_CONSTANT:\n          case OpKind.TX_ROLLUP_ORIGINATION:\n          case OpKind.TX_ROLLUP_SUBMIT_BATCH:\n            return {\n              ...op,\n              ...getSource(op),\n              ...getFee(op),\n            };\n          default:\n            throw new InvalidOperationKindError((op as any).kind);\n        }\n      });\n\n    const contents = constructOps(ops);\n\n    return {\n      opOb: {\n        branch: hash,\n        contents,\n        protocol,\n      },\n      counter,\n    };\n  }\n\n  protected async forge({ opOb: { branch, contents, protocol }, counter }: PreparedOperation) {\n    const forgedBytes = await this.context.forger.forge({ branch, contents });\n\n    return {\n      opbytes: forgedBytes,\n      opOb: {\n        branch,\n        contents,\n        protocol,\n      },\n      counter,\n    };\n  }\n\n  protected async simulate(op: RPCRunOperationParam) {\n    return {\n      opResponse: await this.rpc.runOperation(op),\n      op,\n      context: this.context.clone(),\n    };\n  }\n\n  protected async estimate<T extends { fee?: number; gasLimit?: number; storageLimit?: number }>(\n    { fee, gasLimit, storageLimit, ...rest }: T,\n    estimator: (param: T) => Promise<Estimate>\n  ) {\n    let calculatedFee = fee;\n    let calculatedGas = gasLimit;\n    let calculatedStorage = storageLimit;\n\n    if (fee === undefined || gasLimit === undefined || storageLimit === undefined) {\n      const estimation = await estimator({ fee, gasLimit, storageLimit, ...(rest as any) });\n\n      if (calculatedFee === undefined) {\n        calculatedFee = estimation.suggestedFeeMutez;\n      }\n\n      if (calculatedGas === undefined) {\n        calculatedGas = estimation.gasLimit;\n      }\n\n      if (calculatedStorage === undefined) {\n        calculatedStorage = estimation.storageLimit;\n      }\n    }\n\n    return {\n      fee: calculatedFee,\n      gasLimit: calculatedGas,\n      storageLimit: calculatedStorage,\n    };\n  }\n\n  protected async signAndInject(forgedBytes: ForgedBytes) {\n    const signed = await this.signer.sign(forgedBytes.opbytes, new Uint8Array([3]));\n    forgedBytes.opbytes = signed.sbytes;\n    forgedBytes.opOb.signature = signed.prefixSig;\n\n    const opResponse: OperationContentsAndResult[] = [];\n    const results = await this.rpc.preapplyOperations([forgedBytes.opOb]);\n\n    if (!Array.isArray(results)) {\n      throw new TezosPreapplyFailureError(results);\n    }\n\n    for (let i = 0; i < results.length; i++) {\n      for (let j = 0; j < results[i].contents.length; j++) {\n        opResponse.push(results[i].contents[j]);\n      }\n    }\n\n    const errors = flattenErrors(results);\n\n    if (errors.length) {\n      throw new TezosOperationError(\n        errors,\n        'Error occurred during validation simulation of operation'\n      );\n    }\n\n    return {\n      hash: await this.context.injector.inject(forgedBytes.opbytes),\n      forgedBytes,\n      opResponse,\n      context: this.context.clone(),\n    };\n  }\n}\n","import { Context } from '../context';\nimport { ContractStorageType, DefaultContractType } from '../contract/contract';\nimport { ContractMethod } from '../contract/contract-methods/contract-method-flat-param';\nimport { ContractProvider } from '../contract/interface';\nimport {\n  createOriginationOperation,\n  createRegisterGlobalConstantOperation,\n  createRevealOperation,\n  createTxRollupOriginationOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n  createTxRollupBatchOperation,\n} from '../contract/prepare';\nimport { BatchOperation } from '../operations/batch-operation';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport {\n  ActivationParams,\n  DelegateParams,\n  OriginateParams,\n  RPCOperation,\n  TransferParams,\n  ParamsWithKind,\n  isOpWithFee,\n  withKind,\n  RevealParams,\n  RegisterGlobalConstantParams,\n  TxRollupOriginateParams,\n  TxRollupBatchParams,\n} from '../operations/types';\nimport { OpKind } from '@taquito/rpc';\nimport { ContractMethodObject } from '../contract/contract-methods/contract-method-object-param';\nimport {\n  validateAddress,\n  validateKeyHash,\n  InvalidAddressError,\n  InvalidKeyHashError,\n  ValidationResult,\n  InvalidOperationKindError,\n} from '@taquito/utils';\nimport { EstimationProvider } from '../estimate/estimate-provider-interface';\n\nexport const BATCH_KINDS = [\n  OpKind.ACTIVATION,\n  OpKind.ORIGINATION,\n  OpKind.TRANSACTION,\n  OpKind.DELEGATION,\n];\nexport type BatchKinds =\n  | OpKind.ACTIVATION\n  | OpKind.ORIGINATION\n  | OpKind.TRANSACTION\n  | OpKind.DELEGATION;\n\nexport class OperationBatch extends OperationEmitter {\n  private operations: ParamsWithKind[] = [];\n\n  constructor(context: Context, private estimator: EstimationProvider) {\n    super(context);\n  }\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withTransfer(params: TransferParams) {\n    if (validateAddress(params.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.to);\n    }\n    this.operations.push({ kind: OpKind.TRANSACTION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withContractCall(\n    params: ContractMethod<ContractProvider> | ContractMethodObject<ContractProvider>\n  ) {\n    return this.withTransfer(params.toTransferParams());\n  }\n\n  /**\n   *\n   * @description Add a delegation operation to the batch\n   *\n   * @param params Delegation operation parameter\n   */\n  withDelegation(params: DelegateParams) {\n    if (params.source && validateAddress(params.source) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.source);\n    }\n    if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.delegate);\n    }\n    this.operations.push({ kind: OpKind.DELEGATION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an activation operation to the batch\n   *\n   * @param params Activation operation parameter\n   */\n  withActivation({ pkh, secret }: ActivationParams) {\n    if (validateKeyHash(pkh) !== ValidationResult.VALID) {\n      throw new InvalidKeyHashError(pkh);\n    }\n    this.operations.push({ kind: OpKind.ACTIVATION, pkh, secret });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an origination operation to the batch\n   *\n   * @param params Origination operation parameter\n   */\n  withOrigination<TContract extends DefaultContractType = DefaultContractType>(\n    params: OriginateParams<ContractStorageType<TContract>>\n  ) {\n    this.operations.push({ kind: OpKind.ORIGINATION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an operation to register a global constant to the batch\n   *\n   * @param params RegisterGlobalConstant operation parameter\n   */\n  withRegisterGlobalConstant(params: RegisterGlobalConstantParams) {\n    this.operations.push({ kind: OpKind.REGISTER_GLOBAL_CONSTANT, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an operation to originate a rollup to the batch\n   *\n   * @param params Rollup origination operation parameter\n   */\n  withTxRollupOrigination(params?: TxRollupOriginateParams) {\n    this.operations.push({ kind: OpKind.TX_ROLLUP_ORIGINATION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an operation to submit a tx rollup batch to the batch\n   *\n   * @param params Tx rollup batch operation parameter\n   */\n  withTxRollupSubmitBatch(params: TxRollupBatchParams) {\n    this.operations.push({ kind: OpKind.TX_ROLLUP_SUBMIT_BATCH, ...params });\n    return this;\n  }\n\n  private async getRPCOp(param: ParamsWithKind) {\n    switch (param.kind) {\n      case OpKind.TRANSACTION:\n        return createTransferOperation({\n          ...param,\n        });\n      case OpKind.ORIGINATION:\n        return createOriginationOperation(\n          await this.context.parser.prepareCodeOrigination({\n            ...param,\n          })\n        );\n      case OpKind.DELEGATION:\n        return createSetDelegateOperation({\n          ...param,\n        });\n      case OpKind.ACTIVATION:\n        return {\n          ...param,\n        };\n      case OpKind.REGISTER_GLOBAL_CONSTANT:\n        return createRegisterGlobalConstantOperation({\n          ...param,\n        });\n      case OpKind.TX_ROLLUP_ORIGINATION:\n        return createTxRollupOriginationOperation({\n          ...param,\n        });\n      case OpKind.TX_ROLLUP_SUBMIT_BATCH:\n        return createTxRollupBatchOperation({\n          ...param,\n        });\n      default:\n        throw new InvalidOperationKindError((param as any).kind);\n    }\n  }\n\n  /**\n   *\n   * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array\n   *\n   * @param params Operations parameter\n   */\n  with(params: ParamsWithKind[]) {\n    for (const param of params) {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          this.withTransfer(param);\n          break;\n        case OpKind.ORIGINATION:\n          this.withOrigination(param);\n          break;\n        case OpKind.DELEGATION:\n          this.withDelegation(param);\n          break;\n        case OpKind.ACTIVATION:\n          this.withActivation(param);\n          break;\n        case OpKind.REGISTER_GLOBAL_CONSTANT:\n          this.withRegisterGlobalConstant(param);\n          break;\n        case OpKind.TX_ROLLUP_ORIGINATION:\n          this.withTxRollupOrigination(param);\n          break;\n        case OpKind.TX_ROLLUP_SUBMIT_BATCH:\n          this.withTxRollupSubmitBatch(param);\n          break;\n        default:\n          throw new InvalidOperationKindError((param as any).kind);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @description Forge and Inject the operation batch\n   *\n   * @param params Optionally specify the source of the operation\n   */\n  async send(params?: { source?: string }) {\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const publicKey = await this.signer.publicKey();\n    const estimates = await this.estimator.batch(this.operations);\n\n    const revealNeeded = await this.isRevealOpNeeded(this.operations, publicKeyHash);\n    let i = revealNeeded ? 1 : 0;\n\n    const ops: RPCOperation[] = [];\n    for (const op of this.operations) {\n      if (isOpWithFee(op)) {\n        const estimated = await this.estimate(op, async () => estimates[i]);\n        ops.push(await this.getRPCOp({ ...op, ...estimated }));\n      } else {\n        ops.push({ ...op });\n      }\n      i++;\n    }\n    if (revealNeeded) {\n      const reveal: withKind<RevealParams, OpKind.REVEAL> = { kind: OpKind.REVEAL };\n      const estimatedReveal = await this.estimate(reveal, async () => estimates[0]);\n      ops.unshift(await createRevealOperation({ ...estimatedReveal }, publicKeyHash, publicKey));\n    }\n\n    const source = (params && params.source) || publicKeyHash;\n    const prepared = await this.prepareOperation({\n      operation: ops,\n      source,\n    });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new BatchOperation(hash, ops, source, forgedBytes, opResponse, context);\n  }\n}\n\nexport class RPCBatchProvider {\n  constructor(private context: Context, private estimator: EstimationProvider) {}\n\n  /***\n   *\n   * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch\n   *\n   * @param params List of operation to batch together\n   */\n  batch(params?: ParamsWithKind[]) {\n    const batch = new OperationBatch(this.context, this.estimator);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n}\n","import { OperationContentsAndResult } from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { flattenOperationResult } from '../operations/operation-errors';\n\nexport interface Receipt {\n  totalFee: BigNumber;\n  totalGas: BigNumber;\n  totalStorage: BigNumber;\n  totalAllocationBurn: BigNumber;\n  totalOriginationBurn: BigNumber;\n  totalPaidStorageDiff: BigNumber;\n  totalStorageBurn: BigNumber;\n}\n\nexport const receiptFromOperation = (\n  op: OperationContentsAndResult[],\n  { ALLOCATION_BURN, ORIGINATION_BURN } = {\n    ALLOCATION_BURN: 257,\n    ORIGINATION_BURN: 257,\n  }\n): Receipt => {\n  const operationResults = flattenOperationResult({ contents: op });\n  let totalGas = new BigNumber(0);\n  let totalStorage = new BigNumber(0);\n  let totalFee = new BigNumber(0);\n  let totalOriginationBurn = new BigNumber(0);\n  let totalAllocationBurn = new BigNumber(0);\n  let totalPaidStorageDiff = new BigNumber(0);\n  operationResults.forEach(result => {\n    totalFee = totalFee.plus(result.fee || 0);\n    totalOriginationBurn = totalOriginationBurn.plus(\n      Array.isArray(result.originated_contracts)\n        ? result.originated_contracts.length * ORIGINATION_BURN\n        : 0\n    );\n    totalAllocationBurn = totalAllocationBurn.plus(\n      'allocated_destination_contract' in result ? ALLOCATION_BURN : 0\n    );\n    totalGas = totalGas.plus(result.consumed_gas || 0);\n    totalPaidStorageDiff = totalPaidStorageDiff.plus(\n      'paid_storage_size_diff' in result ? Number(result.paid_storage_size_diff) || 0 : 0\n    );\n  });\n\n  totalStorage = totalStorage\n    .plus(totalAllocationBurn)\n    .plus(totalOriginationBurn)\n    .plus(totalPaidStorageDiff);\n\n  return {\n    totalFee,\n    totalGas,\n    totalStorage,\n    totalAllocationBurn,\n    totalOriginationBurn,\n    totalPaidStorageDiff,\n    totalStorageBurn: new BigNumber(totalStorage.multipliedBy(1000)),\n  };\n};\n","import { BlockResponse, OperationContentsAndResult, OperationResultStatusEnum } from '@taquito/rpc';\nimport { combineLatest, from, Observable, of, ReplaySubject } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  shareReplay,\n  takeWhile,\n  tap,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { Receipt, receiptFromOperation } from './receipt';\nimport { validateOperation, ValidationResult, InvalidOperationHashError } from '@taquito/utils';\nimport { BlockIdentifier } from '../read-provider/interface';\nimport { InvalidConfirmationCountError, ConfirmationUndefinedError } from '../error';\n\nexport type OperationStatus = 'pending' | 'unknown' | OperationResultStatusEnum;\n\n/**\n *  @category Error\n *  @description Error that indicates a missed block when polling to retrieve new head block. This may happen when the polling interval is greater than the time between blocks.\n */\nexport class MissedBlockDuringConfirmationError extends Error {\n  name = 'MissedBlockDuringConfirmationError';\n\n  constructor() {\n    super(\n      'Taquito missed a block while waiting for operation confirmation and was not able to find the operation'\n    );\n  }\n}\n\nconst MAX_BRANCH_ANCESTORS = 60;\n\n/**\n * @description WalletOperation allows to monitor operation inclusion on chains and surface information related to the operation\n */\nexport class WalletOperation {\n  protected _operationResult = new ReplaySubject<OperationContentsAndResult[]>(1);\n  protected _includedInBlock = new ReplaySubject<BlockResponse>(1);\n  protected _included = false;\n\n  private lastHead: BlockResponse | undefined;\n  protected newHead$: Observable<BlockResponse> = this._newHead$.pipe(\n    tap((newHead) => {\n      if (\n        !this._included &&\n        this.lastHead &&\n        newHead.header.level - this.lastHead.header.level > 1\n      ) {\n        throw new MissedBlockDuringConfirmationError();\n      }\n\n      this.lastHead = newHead;\n    }),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  // Observable that emit once operation is seen in a block\n  private confirmed$ = this.newHead$.pipe(\n    map((head) => {\n      for (const opGroup of head.operations) {\n        for (const op of opGroup) {\n          if (op.hash === this.opHash) {\n            this._included = true;\n            this._includedInBlock.next(head);\n            this._operationResult.next(op.contents as OperationContentsAndResult[]);\n\n            // Return the block where the operation was found\n            return head;\n          }\n        }\n      }\n    }),\n    filter<BlockResponse | undefined, BlockResponse>((x): x is BlockResponse => {\n      return typeof x !== 'undefined';\n    }),\n    first(),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  async operationResults() {\n    return this._operationResult.pipe(first()).toPromise();\n  }\n\n  /**\n   * @description Receipt expose the total amount of tezos token burn and spent on fees\n   * The promise returned by receipt will resolve only once the transaction is included\n   */\n  async receipt(): Promise<Receipt> {\n    return receiptFromOperation(await this.operationResults());\n  }\n\n  /**\n   *\n   * @param opHash Operation hash\n   * @param raw Raw operation that was injected\n   * @param context Taquito context allowing access to rpc and signer\n   */\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    private _newHead$: Observable<BlockResponse>\n  ) {\n    if (validateOperation(this.opHash) !== ValidationResult.VALID) {\n      throw new InvalidOperationHashError(this.opHash);\n    }\n    this.confirmed$\n      .pipe(\n        first(),\n        catchError(() => of(undefined))\n      )\n      .subscribe();\n  }\n\n  async getCurrentConfirmation() {\n    if (!this._included) {\n      return 0;\n    }\n\n    return combineLatest([this._includedInBlock, from(this.context.readProvider.getBlock('head'))])\n      .pipe(\n        map(([foundAtBlock, head]) => {\n          return head.header.level - foundAtBlock.header.level + 1;\n        }),\n        first()\n      )\n      .toPromise();\n  }\n\n  async isInCurrentBranch(tipBlockIdentifier: BlockIdentifier = 'head') {\n    // By default it is assumed that the operation is in the current branch\n    if (!this._included) {\n      return true;\n    }\n\n    const tipBlockHeaderLevel = await this.context.readProvider.getBlockLevel(tipBlockIdentifier);\n    const inclusionBlock = await this._includedInBlock.pipe(first()).toPromise();\n\n    const levelDiff = tipBlockHeaderLevel - inclusionBlock.header.level;\n\n    // Block produced before the operation is included are assumed to be part of the current branch\n    if (levelDiff <= 0) {\n      return true;\n    }\n\n    const tipBlockLevel = Math.min(\n      inclusionBlock.header.level + levelDiff,\n      inclusionBlock.header.level + MAX_BRANCH_ANCESTORS\n    );\n\n    const blocks = new Set(await this.context.readProvider.getLiveBlocks(tipBlockLevel));\n    return blocks.has(inclusionBlock.hash);\n  }\n\n  confirmationObservable(confirmations?: number) {\n    if (typeof confirmations !== 'undefined' && confirmations < 1) {\n      throw new InvalidConfirmationCountError('Confirmation count must be at least 1');\n    }\n\n    const { defaultConfirmationCount } = this.context.config;\n\n    const conf = confirmations !== undefined ? confirmations : defaultConfirmationCount;\n\n    if (conf === undefined) {\n      throw new ConfirmationUndefinedError('Default confirmation count can not be undefined!');\n    }\n\n    return combineLatest([this._includedInBlock, this.newHead$]).pipe(\n      distinctUntilChanged(([, previousHead], [, newHead]) => {\n        return previousHead.hash === newHead.hash;\n      }),\n      map(([foundAtBlock, head]) => {\n        return {\n          block: head,\n          expectedConfirmation: conf,\n          currentConfirmation: head.header.level - foundAtBlock.header.level + 1,\n          completed: head.header.level - foundAtBlock.header.level >= conf - 1,\n          isInCurrentBranch: () => this.isInCurrentBranch(head.hash as BlockIdentifier),\n        };\n      }),\n      takeWhile(({ completed }) => !completed, true)\n    );\n  }\n\n  /**\n   *\n   * @param confirmations [0] Number of confirmation to wait for\n   */\n  confirmation(confirmations?: number) {\n    return this.confirmationObservable(confirmations).toPromise();\n  }\n}\n","import { BlockResponse, OperationContentsAndResultReveal, OpKind } from '@taquito/rpc';\nimport { Observable } from 'rxjs';\nimport { BATCH_KINDS } from '../batch/rpc-batch-provider';\nimport { Context } from '../context';\nimport { hasMetadataWithResult } from '../operations/types';\nimport { WalletOperation, OperationStatus } from './operation';\n\nexport class BatchWalletOperation extends WalletOperation {\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    newHead$: Observable<BlockResponse>\n  ) {\n    super(opHash, context, newHead$);\n  }\n\n  public async revealOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.REVEAL) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  async status(): Promise<OperationStatus> {\n    if (!this._included) {\n      return 'pending';\n    }\n\n    const op = await this.operationResults();\n\n    return (\n      op\n        .filter((result) => BATCH_KINDS.indexOf(result.kind) !== -1)\n        .map((result) => {\n          if (hasMetadataWithResult(result)) {\n            return result.metadata.operation_result.status;\n          } else {\n            return 'unknown';\n          }\n        })[0] || 'unknown'\n    );\n  }\n}\n","import {\n  BlockResponse,\n  OperationContentsAndResultDelegation,\n  OperationContentsAndResultReveal,\n  OpKind,\n} from '@taquito/rpc';\nimport { Observable } from 'rxjs';\nimport { Context } from '../context';\nimport { WalletOperation, OperationStatus } from './operation';\n\nexport class DelegationWalletOperation extends WalletOperation {\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    newHead$: Observable<BlockResponse>\n  ) {\n    super(opHash, context, newHead$);\n  }\n\n  public async revealOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find((x) => x.kind === OpKind.REVEAL) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  public async delegationOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find((x) => x.kind === OpKind.DELEGATION) as\n      | OperationContentsAndResultDelegation\n      | undefined;\n  }\n\n  public async status(): Promise<OperationStatus> {\n    if (!this._included) {\n      return 'pending';\n    }\n\n    const op = await this.delegationOperation();\n    if (!op) {\n      return 'unknown';\n    }\n\n    return op.metadata.operation_result.status;\n  }\n}\n","import {\n  BlockResponse,\n  OperationContentsAndResultOrigination,\n  OperationContentsAndResultReveal,\n  OpKind,\n} from '@taquito/rpc';\nimport { Observable } from 'rxjs';\nimport { Context } from '../context';\nimport { DefaultWalletType } from '../contract/contract';\nimport { findWithKind } from '../operations/types';\nimport { WalletOperation, OperationStatus } from './operation';\n\nexport class OriginationWalletOperation<TWallet extends DefaultWalletType = DefaultWalletType> extends WalletOperation {\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    newHead$: Observable<BlockResponse>\n  ) {\n    super(opHash, context, newHead$);\n  }\n\n  public async originationOperation() {\n    const operationResult = await this.operationResults();\n    return findWithKind(operationResult, OpKind.ORIGINATION) as\n      | OperationContentsAndResultOrigination\n      | undefined;\n  }\n\n  public async revealOperation() {\n    const operationResult = await this.operationResults();\n    return findWithKind(operationResult, OpKind.REVEAL) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  public async status(): Promise<OperationStatus> {\n    if (!this._included) {\n      return 'pending';\n    }\n\n    const op = await this.originationOperation();\n    if (!op) {\n      return 'unknown';\n    }\n\n    return op.metadata.operation_result.status;\n  }\n\n  public async contract() {\n    const op = await this.originationOperation();\n    const address = (op?.metadata.operation_result.originated_contracts || [])[0];\n    return this.context.wallet.at<TWallet>(address);\n  }\n}\n","import { WalletOperation, OperationStatus } from './operation';\nimport { Context } from '../context';\nimport { Observable } from 'rxjs';\nimport {\n  BlockResponse,\n  OpKind,\n  OperationContentsAndResultReveal,\n  OperationContentsAndResultTransaction,\n} from '@taquito/rpc';\n\nexport class TransactionWalletOperation extends WalletOperation {\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    newHead$: Observable<BlockResponse>\n  ) {\n    super(opHash, context, newHead$);\n  }\n\n  public async revealOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.REVEAL) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  public async transactionOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.TRANSACTION) as\n      | OperationContentsAndResultTransaction\n      | undefined;\n  }\n\n  public async status(): Promise<OperationStatus> {\n    if (!this._included) {\n      return 'pending';\n    }\n\n    const op = await this.transactionOperation();\n    if (!op) {\n      return 'unknown';\n    }\n\n    return op.metadata.operation_result.status;\n  }\n}\n","import { BlockResponse } from '@taquito/rpc';\nimport { concat, defer, from, Observable, of, range, SchedulerLike, throwError } from 'rxjs';\nimport { concatMap, shareReplay, startWith, switchMap, timeoutWith } from 'rxjs/operators';\nimport { Context } from '../context';\nimport { BlockIdentifier } from '../read-provider/interface';\nimport { createObservableFromSubscription } from '../subscribe/create-observable-from-subscription';\nimport { BatchWalletOperation } from './batch-operation';\nimport { DelegationWalletOperation } from './delegation-operation';\nimport { WalletOperation } from './operation';\nimport { OriginationWalletOperation } from './origination-operation';\nimport { TransactionWalletOperation } from './transaction-operation';\n\nexport const createNewPollingBasedHeadObservable = (\n  sharedHeadOb: Observable<BlockResponse>,\n  context: Context,\n  scheduler?: SchedulerLike\n): Observable<BlockResponse> => {\n  return sharedHeadOb.pipe(\n    timeoutWith(\n      context.config.confirmationPollingTimeoutSecond * 1000,\n      throwError(new Error('Confirmation polling timed out')),\n      scheduler\n    ),\n    shareReplay({\n      refCount: true,\n      scheduler,\n    })\n  );\n};\n\nexport interface OperationFactoryConfig {\n  blockIdentifier?: string;\n}\n\nexport class OperationFactory {\n  constructor(private context: Context) {}\n\n  // Cache the last block for one second across all operations\n  private sharedHeadObs = defer(() => {\n    return createObservableFromSubscription(this.context.stream.subscribeBlock('head'));\n  });\n\n  private async createNewHeadObservable() {\n    return createNewPollingBasedHeadObservable(this.sharedHeadObs, this.context);\n  }\n\n  private createPastBlockWalker(startBlock: string, count = 1) {\n    return from(this.context.readProvider.getBlock(startBlock as BlockIdentifier)).pipe(\n      switchMap((block) => {\n        if (count === 1) {\n          return of(block);\n        }\n\n        return range(block.header.level, count - 1).pipe(\n          startWith(block),\n          concatMap(async (level) => {\n            return this.context.readProvider.getBlock(\n              typeof level === 'number' ? level : level.header.level\n            );\n          })\n        );\n      })\n    );\n  }\n\n  private async createHeadObservableFromConfig({ blockIdentifier }: OperationFactoryConfig) {\n    const observableSequence: Observable<BlockResponse>[] = [];\n\n    if (blockIdentifier) {\n      observableSequence.push(this.createPastBlockWalker(blockIdentifier));\n    }\n\n    observableSequence.push(await this.createNewHeadObservable());\n\n    return concat(...observableSequence);\n  }\n\n  async createOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<WalletOperation> {\n    return new WalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n\n  async createBatchOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<BatchWalletOperation> {\n    return new BatchWalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n\n  async createTransactionOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<TransactionWalletOperation> {\n    return new TransactionWalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n\n  async createDelegationOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<DelegationWalletOperation> {\n    return new DelegationWalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n\n  async createOriginationOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<OriginationWalletOperation> {\n    return new OriginationWalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { Context } from '../context';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport { Operation } from '../operations/operations';\nimport { RPCActivateOperation } from '../operations/types';\nimport { TzProvider } from './interface';\nimport { OpKind } from '@taquito/rpc';\nimport {\n  validateAddress,\n  ValidationResult,\n  validateKeyHash,\n  InvalidAddressError,\n  InvalidKeyHashError,\n} from '@taquito/utils';\n\nexport class RpcTzProvider extends OperationEmitter implements TzProvider {\n  constructor(context: Context) {\n    super(context);\n  }\n\n  async getBalance(address: string): Promise<BigNumber> {\n    if (validateAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(address);\n    }\n    return this.context.readProvider.getBalance(address, 'head');\n  }\n\n  async getDelegate(address: string): Promise<string | null> {\n    if (validateAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(address);\n    }\n    return this.context.readProvider.getDelegate(address, 'head');\n  }\n\n  async activate(pkh: string, secret: string) {\n    if (validateKeyHash(pkh) !== ValidationResult.VALID) {\n      throw new InvalidKeyHashError(pkh);\n    }\n    const operation: RPCActivateOperation = {\n      kind: OpKind.ACTIVATION,\n      pkh,\n      secret,\n    };\n\n    const prepared = await this.prepareOperation({ operation: [operation], source: pkh });\n    const forgedBytes = await this.forge(prepared);\n    const bytes = `${forgedBytes.opbytes}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`;\n    return new Operation(\n      await this.rpc.injectOperation(bytes),\n      { ...forgedBytes, opbytes: bytes },\n      [],\n      this.context.clone()\n    );\n  }\n}\n","const MINIMAL_FEE_MUTEZ = 100;\nconst MINIMAL_FEE_PER_BYTE_MUTEZ = 1;\nconst MINIMAL_FEE_PER_GAS_MUTEZ = 0.1;\n\nconst GAS_BUFFER = 100;\n\nexport interface EstimateProperties {\n  milligasLimit: number;\n  storageLimit: number;\n  opSize: number;\n  minimalFeePerStorageByteMutez: number;\n  baseFeeMutez?: number;\n}\n\n/**\n * Examples of use :\n *\n *  Estimate a transfer operation :\n * ```\n * // Assuming that provider and signer are already configured...\n *\n * const amount = 2;\n * const address = 'tz1h3rQ8wBxFd8L9B3d7Jhaawu6Z568XU3xY';\n *\n * // Estimate gasLimit, storageLimit and fees for a transfer operation\n * const est = await Tezos.estimate.transfer({ to: address, amount: amount })\n * console.log(est.burnFeeMutez, est.gasLimit, est.minimalFeeMutez, est.storageLimit,\n *  est.suggestedFeeMutez, est.totalCost, est.usingBaseFeeMutez)\n *\n * ```\n *\n * Estimate a contract origination :\n * ```\n * // generic.json is referring to a Michelson Smart Contract\n *\n * const genericMultisigJSON = require('./generic.json')\n * const est = await Tezos.estimate.originate({\n *   code: genericMultisigJSON,\n *   storage: {\n *     stored_counter: 0,\n *     threshold: 1,\n *     keys: ['edpkuLxx9PQD8fZ45eUzrK3BhfDZJHhBuK4Zi49DcEGANwd2rpX82t']\n *   }\n * })\n * console.log(est.burnFeeMutez, est.gasLimit, est.minimalFeeMutez, est.storageLimit,\n *   est.suggestedFeeMutez, est.totalCost, est.usingBaseFeeMutez)\n *\n * ```\n */\n\nexport class Estimate {\n  constructor(\n    private readonly _milligasLimit: number | string,\n    private readonly _storageLimit: number | string,\n    public readonly opSize: number | string,\n    private readonly minimalFeePerStorageByteMutez: number | string,\n    /**\n     * @description Base fee in mutez (1 mutez = 1e10−6 tez)\n     */\n    private readonly baseFeeMutez: number | string = MINIMAL_FEE_MUTEZ\n  ) {}\n\n  /**\n   * @description The number of Mutez that will be burned for the storage of the [operation](https://tezos.gitlab.io/user/glossary.html#operations). (Storage + Allocation fees)\n   */\n  get burnFeeMutez() {\n    return this.roundUp(Number(this.storageLimit) * Number(this.minimalFeePerStorageByteMutez));\n  }\n\n  /**\n   * @description  The limit on the amount of storage an [operation](https://tezos.gitlab.io/user/glossary.html#operations) can use.\n   */\n  get storageLimit() {\n    const limit = Math.max(Number(this._storageLimit), 0);\n    return limit > 0 ? limit : 0;\n  }\n\n  /**\n   * @description The limit on the amount of [gas](https://tezos.gitlab.io/user/glossary.html#gas) a given operation can consume.\n   */\n  get gasLimit() {\n    return this.roundUp(Number(this._milligasLimit) / 1000 + GAS_BUFFER);\n  }\n\n  private get operationFeeMutez() {\n    return (\n      (Number(this._milligasLimit) / 1000 + GAS_BUFFER) * MINIMAL_FEE_PER_GAS_MUTEZ +\n      Number(this.opSize) * MINIMAL_FEE_PER_BYTE_MUTEZ\n    );\n  }\n\n  private roundUp(nanotez: number) {\n    return Math.ceil(Number(nanotez));\n  }\n\n  /**\n   * @description Minimum fees for the [operation](https://tezos.gitlab.io/user/glossary.html#operations) according to [baker](https://tezos.gitlab.io/user/glossary.html#baker) defaults.\n   */\n  get minimalFeeMutez() {\n    return this.roundUp(MINIMAL_FEE_MUTEZ + this.operationFeeMutez);\n  }\n\n  /**\n   * @description The suggested fee for the operation which includes minimal fees and a small buffer.\n   */\n  get suggestedFeeMutez() {\n    return this.roundUp(this.operationFeeMutez + MINIMAL_FEE_MUTEZ * 2);\n  }\n\n  /**\n   * @description Fees according to your specified base fee will ensure that at least minimum fees are used.\n   */\n  get usingBaseFeeMutez() {\n    return (\n      Math.max(Number(this.baseFeeMutez), MINIMAL_FEE_MUTEZ) + this.roundUp(this.operationFeeMutez)\n    );\n  }\n\n  /**\n   * @description The sum of `minimalFeeMutez` + `burnFeeMutez`.\n   */\n  get totalCost() {\n    return this.minimalFeeMutez + this.burnFeeMutez;\n  }\n\n  /**\n   * @description Since Delphinet, consumed gas is provided in milligas for more precision.\n   * This function returns an estimation of the gas that operation will consume in milligas.\n   */\n  get consumedMilligas() {\n    return Number(this._milligasLimit);\n  }\n\n  static createEstimateInstanceFromProperties(estimateProperties: EstimateProperties[]) {\n    let milligasLimit = 0;\n    let storageLimit = 0;\n    let opSize = 0;\n    let minimalFeePerStorageByteMutez = 0;\n    let baseFeeMutez: number | undefined;\n\n    estimateProperties.forEach((estimate) => {\n      milligasLimit += estimate.milligasLimit;\n      storageLimit += estimate.storageLimit;\n      opSize += estimate.opSize;\n      minimalFeePerStorageByteMutez = Math.max(\n        estimate.minimalFeePerStorageByteMutez,\n        minimalFeePerStorageByteMutez\n      );\n      if (estimate.baseFeeMutez) {\n        baseFeeMutez = baseFeeMutez ? baseFeeMutez + estimate.baseFeeMutez : estimate.baseFeeMutez;\n      }\n    });\n    return new Estimate(\n      milligasLimit,\n      storageLimit,\n      opSize,\n      minimalFeePerStorageByteMutez,\n      baseFeeMutez\n    );\n  }\n\n  static createArrayEstimateInstancesFromProperties(estimateProperties: EstimateProperties[]) {\n    return estimateProperties.map(\n      (x) =>\n        new Estimate(\n          x.milligasLimit,\n          x.storageLimit,\n          x.opSize,\n          x.minimalFeePerStorageByteMutez,\n          x.baseFeeMutez\n        )\n    );\n  }\n}\n","/**\n *  @category Error\n *  @description Error that indicates invalid public key being passed when doing a reveal operation estimate\n */\nexport class RevealEstimateError extends Error {\n  name = 'Reveal Estimate Error';\n  constructor() {\n    super('Unable to estimate the reveal operation, the public key is unknown');\n  }\n}\n","import { PreapplyResponse, RPCRunOperationParam, OpKind, ConstantsResponse } from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { DEFAULT_FEE, DEFAULT_GAS_LIMIT, DEFAULT_STORAGE_LIMIT } from '../constants';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport {\n  flattenErrors,\n  flattenOperationResult,\n  TezosOperationError,\n} from '../operations/operation-errors';\nimport {\n  DelegateParams,\n  isOpWithFee,\n  OriginateParams,\n  ParamsWithKind,\n  PrepareOperationParams,\n  RegisterDelegateParams,\n  RPCOperation,\n  TransferParams,\n  RevealParams,\n  RegisterGlobalConstantParams,\n  TxRollupOriginateParams,\n  TxRollupBatchParams,\n} from '../operations/types';\nimport { Estimate, EstimateProperties } from './estimate';\nimport { EstimationProvider } from '../estimate/estimate-provider-interface';\nimport {\n  createOriginationOperation,\n  createRegisterDelegateOperation,\n  createRevealOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n  createRegisterGlobalConstantOperation,\n  createTxRollupOriginationOperation,\n  createTxRollupBatchOperation,\n} from '../contract/prepare';\nimport {\n  validateAddress,\n  InvalidAddressError,\n  ValidationResult,\n  InvalidOperationKindError,\n} from '@taquito/utils';\nimport { RevealEstimateError } from './error';\n\ninterface Limits {\n  fee?: number;\n  storageLimit?: number;\n  gasLimit?: number;\n}\n\nconst mergeLimits = (\n  userDefinedLimit: Limits,\n  defaultLimits: Required<Limits>\n): Required<Limits> => {\n  return {\n    fee: typeof userDefinedLimit.fee === 'undefined' ? defaultLimits.fee : userDefinedLimit.fee,\n    gasLimit:\n      typeof userDefinedLimit.gasLimit === 'undefined'\n        ? defaultLimits.gasLimit\n        : userDefinedLimit.gasLimit,\n    storageLimit:\n      typeof userDefinedLimit.storageLimit === 'undefined'\n        ? defaultLimits.storageLimit\n        : userDefinedLimit.storageLimit,\n  };\n};\n\n// RPC requires a signature but does not verify it\nconst SIGNATURE_STUB =\n  'edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg';\n\nexport class RPCEstimateProvider extends OperationEmitter implements EstimationProvider {\n  private readonly ALLOCATION_STORAGE = 257;\n  private readonly ORIGINATION_STORAGE = 257;\n  private readonly OP_SIZE_REVEAL = 128;\n\n  private async getKeys(): Promise<{\n    publicKeyHash: string;\n    publicKey?: string;\n  }> {\n    const isSignerConfigured = this.context.isAnySignerConfigured();\n    return {\n      publicKeyHash: isSignerConfigured\n        ? await this.signer.publicKeyHash()\n        : await this.context.walletProvider.getPKH(),\n      publicKey: isSignerConfigured ? await this.signer.publicKey() : undefined,\n    };\n  }\n\n  // Maximum values defined by the protocol\n  private async getAccountLimits(\n    pkh: string,\n    constants: Pick<\n      ConstantsResponse,\n      | 'hard_gas_limit_per_operation'\n      | 'hard_gas_limit_per_block'\n      | 'hard_storage_limit_per_operation'\n      | 'cost_per_byte'\n    >,\n    numberOfOps?: number\n  ) {\n    const balance = await this.context.readProvider.getBalance(pkh, 'head');\n    const {\n      hard_gas_limit_per_operation,\n      hard_gas_limit_per_block,\n      hard_storage_limit_per_operation,\n      cost_per_byte,\n    } = constants;\n    return {\n      fee: 0,\n      gasLimit: numberOfOps\n        ? Math.floor(\n            this.ajustGasForBatchOperation(\n              hard_gas_limit_per_block,\n              hard_gas_limit_per_operation,\n              numberOfOps\n            ).toNumber()\n          )\n        : hard_gas_limit_per_operation.toNumber(),\n      storageLimit: Math.floor(\n        BigNumber.min(balance.dividedBy(cost_per_byte), hard_storage_limit_per_operation).toNumber()\n      ),\n    };\n  }\n\n  // Fix for Granada where the total gasLimit of a batch can not exceed the hard_gas_limit_per_block.\n  // If the total gasLimit of the batch is higher than the hard_gas_limit_per_block,\n  // the gasLimit is calculated by dividing the hard_gas_limit_per_block by the number of operation in the batch (numberOfOps).\n  // numberOfOps is incremented by 1 for safety in case a reveal operation is needed\n  private ajustGasForBatchOperation(\n    gasLimitBlock: BigNumber,\n    gaslimitOp: BigNumber,\n    numberOfOps: number\n  ) {\n    return BigNumber.min(gaslimitOp, gasLimitBlock.div(numberOfOps + 1));\n  }\n\n  private getEstimationPropertiesFromOperationContent(\n    content: PreapplyResponse['contents'][0],\n    size: number,\n    costPerByte: BigNumber,\n    tx_rollup_origination_size: number\n  ): EstimateProperties {\n    const operationResults = flattenOperationResult({ contents: [content] });\n    let totalGas = 0;\n    let totalMilligas = 0;\n    let totalStorage = 0;\n    operationResults.forEach((result) => {\n      totalStorage +=\n        'originated_contracts' in result && typeof result.originated_contracts !== 'undefined'\n          ? result.originated_contracts.length * this.ORIGINATION_STORAGE\n          : 0;\n      totalStorage += 'allocated_destination_contract' in result ? this.ALLOCATION_STORAGE : 0;\n      totalGas += Number(result.consumed_gas) || 0;\n      totalMilligas += Number(result.consumed_milligas) || 0;\n      totalStorage +=\n        'paid_storage_size_diff' in result ? Number(result.paid_storage_size_diff) || 0 : 0;\n      totalStorage +=\n        'storage_size' in result && 'global_address' in result\n          ? Number(result.storage_size) || 0\n          : 0;\n      totalStorage += 'originated_rollup' in result ? tx_rollup_origination_size : 0;\n    });\n\n    if (totalGas !== 0 && totalMilligas === 0) {\n      // This will convert gas to milligas for Carthagenet where result does not contain consumed gas in milligas.\n      totalMilligas = totalGas * 1000;\n    }\n\n    if (isOpWithFee(content)) {\n      return {\n        milligasLimit: totalMilligas || 0,\n        storageLimit: Number(totalStorage || 0),\n        opSize: size,\n        minimalFeePerStorageByteMutez: costPerByte.toNumber(),\n      };\n    } else {\n      return {\n        milligasLimit: 0,\n        storageLimit: 0,\n        opSize: size,\n        minimalFeePerStorageByteMutez: costPerByte.toNumber(),\n        baseFeeMutez: 0,\n      };\n    }\n  }\n\n  private async prepareEstimate(\n    params: PrepareOperationParams,\n    constants: Pick<ConstantsResponse, 'cost_per_byte' | 'tx_rollup_origination_size'>,\n    pkh: string\n  ) {\n    const prepared = await this.prepareOperation(params, pkh);\n    const {\n      opbytes,\n      opOb: { branch, contents },\n    } = await this.forge(prepared);\n    const operation: RPCRunOperationParam = {\n      operation: { branch, contents, signature: SIGNATURE_STUB },\n      chain_id: await this.context.readProvider.getChainId(),\n    };\n\n    const { opResponse } = await this.simulate(operation);\n    const { cost_per_byte, tx_rollup_origination_size } = constants;\n    const errors = [...flattenErrors(opResponse, 'backtracked'), ...flattenErrors(opResponse)];\n\n    // Fail early in case of errors\n    if (errors.length) {\n      throw new TezosOperationError(errors, 'Error occurred during estimation');\n    }\n\n    let numberOfOps = 1;\n    if (Array.isArray(params.operation) && params.operation.length > 1) {\n      numberOfOps =\n        opResponse.contents[0].kind === 'reveal'\n          ? params.operation.length - 1\n          : params.operation.length;\n    }\n\n    return opResponse.contents.map((x) => {\n      return this.getEstimationPropertiesFromOperationContent(\n        x,\n        // TODO: Calculate a specific opSize for each operation.\n        x.kind === 'reveal' ? this.OP_SIZE_REVEAL / 2 : opbytes.length / 2 / numberOfOps,\n        cost_per_byte,\n        tx_rollup_origination_size ?? 0\n      );\n    });\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for an origination operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param OriginationOperation Originate operation parameter\n   */\n  async originate({ fee, storageLimit, gasLimit, ...rest }: OriginateParams) {\n    const { publicKeyHash } = await this.getKeys();\n    const protocolConstants = await this.context.readProvider.getProtocolConstants('head');\n    const DEFAULT_PARAMS = await this.getAccountLimits(publicKeyHash, protocolConstants);\n    const op = await createOriginationOperation(\n      await this.context.parser.prepareCodeOrigination({\n        ...rest,\n        ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n      })\n    );\n    const isRevealNeeded = await this.isRevealOpNeeded([op], publicKeyHash);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], publicKeyHash) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: publicKeyHash },\n      protocolConstants,\n      publicKeyHash\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for an transfer operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param TransferOperation Originate operation parameter\n   */\n  async transfer({ fee, storageLimit, gasLimit, ...rest }: TransferParams) {\n    if (validateAddress(rest.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(rest.to);\n    }\n    if (rest.source && validateAddress(rest.source) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(rest.source);\n    }\n    const pkh = (await this.getKeys()).publicKeyHash;\n    const protocolConstants = await this.context.readProvider.getProtocolConstants('head');\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh, protocolConstants);\n    const op = await createTransferOperation({\n      ...rest,\n      ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n    });\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: pkh },\n      protocolConstants,\n      pkh\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a delegate operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param Estimate\n   */\n  async setDelegate({ fee, gasLimit, storageLimit, ...rest }: DelegateParams) {\n    if (rest.source && validateAddress(rest.source) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(rest.source);\n    }\n    if (rest.delegate && validateAddress(rest.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(rest.delegate);\n    }\n\n    const pkh = (await this.getKeys()).publicKeyHash;\n    const sourceOrDefault = rest.source || pkh;\n    const protocolConstants = await this.context.readProvider.getProtocolConstants('head');\n    const DEFAULT_PARAMS = await this.getAccountLimits(sourceOrDefault, protocolConstants);\n    const op = await createSetDelegateOperation({\n      ...rest,\n      ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n    });\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: pkh },\n      protocolConstants,\n      pkh\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a each operation in the batch\n   *\n   * @returns An array of Estimate objects. If a reveal operation is needed, the first element of the array is the Estimate for the reveal operation.\n   */\n  async batch(params: ParamsWithKind[]) {\n    const { publicKeyHash } = await this.getKeys();\n    let operations: RPCOperation[] = [];\n    const protocolConstants = await this.context.readProvider.getProtocolConstants('head');\n    const DEFAULT_PARAMS = await this.getAccountLimits(\n      publicKeyHash,\n      protocolConstants,\n      params.length\n    );\n    for (const param of params) {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          operations.push(\n            await createTransferOperation({\n              ...param,\n              ...mergeLimits(param, DEFAULT_PARAMS),\n            })\n          );\n          break;\n        case OpKind.ORIGINATION:\n          operations.push(\n            await createOriginationOperation(\n              await this.context.parser.prepareCodeOrigination({\n                ...param,\n                ...mergeLimits(param, DEFAULT_PARAMS),\n              })\n            )\n          );\n          break;\n        case OpKind.DELEGATION:\n          operations.push(\n            await createSetDelegateOperation({\n              ...param,\n              ...mergeLimits(param, DEFAULT_PARAMS),\n            })\n          );\n          break;\n        case OpKind.ACTIVATION:\n          operations.push({\n            ...param,\n            ...DEFAULT_PARAMS,\n          });\n          break;\n        case OpKind.REGISTER_GLOBAL_CONSTANT:\n          operations.push(\n            await createRegisterGlobalConstantOperation({\n              ...param,\n              ...mergeLimits(param, DEFAULT_PARAMS),\n            })\n          );\n          break;\n        case OpKind.TX_ROLLUP_ORIGINATION:\n          operations.push(\n            await createTxRollupOriginationOperation({\n              ...param,\n              ...mergeLimits(param, DEFAULT_PARAMS),\n            })\n          );\n          break;\n        case OpKind.TX_ROLLUP_SUBMIT_BATCH:\n          operations.push(\n            await createTxRollupBatchOperation({\n              ...param,\n              ...mergeLimits(param, DEFAULT_PARAMS),\n            })\n          );\n          break;\n        default:\n          throw new InvalidOperationKindError((params as any).kind);\n      }\n    }\n    const isRevealNeeded = await this.isRevealOpNeeded(operations, publicKeyHash);\n    operations = isRevealNeeded ? await this.addRevealOp(operations, publicKeyHash) : operations;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: operations, source: publicKeyHash },\n      protocolConstants,\n      publicKeyHash\n    );\n\n    return Estimate.createArrayEstimateInstancesFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a delegate operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param Estimate\n   */\n  async registerDelegate(params: RegisterDelegateParams) {\n    const pkh = (await this.getKeys()).publicKeyHash;\n    const protocolConstants = await this.context.readProvider.getProtocolConstants('head');\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh, protocolConstants);\n    const op = await createRegisterDelegateOperation({ ...params, ...DEFAULT_PARAMS }, pkh);\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: pkh },\n      protocolConstants,\n      pkh\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees to reveal the current account\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation or undefined if the account is already revealed\n   *\n   * @param Estimate\n   */\n  async reveal(params?: RevealParams) {\n    const { publicKeyHash, publicKey } = await this.getKeys();\n    if (!publicKey) {\n      throw new RevealEstimateError();\n    }\n    if (await this.isAccountRevealRequired(publicKeyHash)) {\n      const protocolConstants = await this.context.readProvider.getProtocolConstants('head');\n      const DEFAULT_PARAMS = await this.getAccountLimits(publicKeyHash, protocolConstants);\n      const op = await createRevealOperation(\n        {\n          ...params,\n          ...DEFAULT_PARAMS,\n        },\n        publicKeyHash,\n        publicKey\n      );\n      const estimateProperties = await this.prepareEstimate(\n        { operation: op, source: publicKeyHash },\n        protocolConstants,\n        publicKeyHash\n      );\n      return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n    }\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for an registerGlobalConstant operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param params registerGlobalConstant operation parameter\n   */\n  async registerGlobalConstant({\n    fee,\n    storageLimit,\n    gasLimit,\n    ...rest\n  }: RegisterGlobalConstantParams) {\n    const pkh = (await this.getKeys()).publicKeyHash;\n    const protocolConstants = await this.context.readProvider.getProtocolConstants('head');\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh, protocolConstants);\n    const op = await createRegisterGlobalConstantOperation({\n      ...rest,\n      ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n    });\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: pkh },\n      protocolConstants,\n      pkh\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a rollup origination operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param TxRollupOriginateParams Originate tx rollup operation parameter\n   */\n  async txRollupOriginate(params?: TxRollupOriginateParams) {\n    params = params ? params : {};\n    const { fee, storageLimit, gasLimit, ...rest } = params;\n    const pkh = (await this.getKeys()).publicKeyHash;\n    const protocolConstants = await this.context.readProvider.getProtocolConstants('head');\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh, protocolConstants);\n    const op = await createTxRollupOriginationOperation({\n      ...rest,\n      ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n    });\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: pkh },\n      protocolConstants,\n      pkh\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a tx rollup batch operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param Estimate\n   */\n  async txRollupSubmitBatch(params: TxRollupBatchParams) {\n    const { fee, storageLimit, gasLimit, ...rest } = params;\n    const pkh = (await this.getKeys()).publicKeyHash;\n    const protocolConstants = await this.context.readProvider.getProtocolConstants('head');\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh, protocolConstants);\n    const op = await createTxRollupBatchOperation({\n      ...rest,\n      ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n    });\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: pkh },\n      protocolConstants,\n      pkh\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  private async addRevealOp(op: RPCOperation[], pkh: string) {\n    const { publicKey } = await this.getKeys();\n    if (!publicKey) {\n      throw new RevealEstimateError();\n    }\n    op.unshift(\n      await createRevealOperation(\n        {\n          ...{\n            fee: DEFAULT_FEE.REVEAL,\n            gasLimit: DEFAULT_GAS_LIMIT.REVEAL,\n            storageLimit: DEFAULT_STORAGE_LIMIT.REVEAL,\n          },\n        },\n        pkh,\n        await this.signer.publicKey()\n      )\n    );\n    return op;\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultDelegation } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCDelegateOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Delegation operation provide utility function to fetch newly issued delegation\n *\n * @warn Currently support only one delegation per operation\n */\nexport class DelegateOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCDelegateOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const delegationOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'delegation') as OperationContentsAndResultDelegation);\n    const result = delegationOp && delegationOp.metadata && delegationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get delegate(): string {\n    return this.delegate;\n  }\n\n  get isRegisterOperation(): boolean {\n    return this.delegate === this.source;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get consumedGas() {\n    const consumedGas = this.operationResults && this.operationResults.consumed_gas;\n    return consumedGas ? consumedGas : undefined;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultOrigination } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { DefaultContractType } from '../contract/contract';\nimport { RpcContractProvider } from '../contract/rpc-contract-provider';\nimport { OriginationOperationError } from './operation-errors';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  hasMetadataWithResult,\n  RPCOriginationOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Origination operation provide utility function to fetch newly originated contract\n *\n * @warn Currently support only one origination per operation\n */\nexport class OriginationOperation<TContract extends DefaultContractType = DefaultContractType>\n  extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation\n{\n  /**\n   * @description Contract address of the newly originated contract\n   */\n  public readonly contractAddress?: string;\n\n  constructor(\n    hash: string,\n    private readonly params: RPCOriginationOperation,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context,\n    private contractProvider: RpcContractProvider\n  ) {\n    super(hash, raw, results, context);\n\n    const originatedContracts = this.operationResults && this.operationResults.originated_contracts;\n    if (Array.isArray(originatedContracts)) {\n      this.contractAddress = originatedContracts[0];\n    }\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get operationResults() {\n    const originationOp =\n      Array.isArray(this.results) &&\n      (this.results.find((op) => op.kind === 'origination') as\n        | OperationContentsAndResultOrigination\n        | undefined);\n\n    const result =\n      originationOp &&\n      hasMetadataWithResult(originationOp) &&\n      originationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get consumedGas() {\n    const consumedGas = this.operationResults && this.operationResults.consumed_gas;\n    return consumedGas ? consumedGas : undefined;\n  }\n\n  get storageDiff() {\n    const storageDiff = this.operationResults && this.operationResults.paid_storage_size_diff;\n    return storageDiff ? storageDiff : undefined;\n  }\n\n  get storageSize() {\n    const storageSize = this.operationResults && this.operationResults.storage_size;\n    return storageSize ? storageSize : undefined;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n\n  /**\n   * @description Provide the contract abstract of the newly originated contract\n   */\n  async contract(confirmations?: number, timeout?: number) {\n    if (!this.contractAddress) {\n      throw new OriginationOperationError('No contract was originated in this operation');\n    }\n\n    await this.confirmation(confirmations, timeout);\n    return this.contractProvider.at<TContract>(this.contractAddress);\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultRegisterGlobalConstant } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { Operation } from './operations';\nimport {\n    FeeConsumingOperation,\n    ForgedBytes,\n    GasConsumingOperation,\n    RPCRegisterGlobalConstantOperation,\n    StorageConsumingOperation,\n} from './types';\n\n/**\n * @description RegisterGlobalConstantOperation provides utility functions to fetch a newly issued operation of kind register_global_constant\n */\nexport class RegisterGlobalConstantOperation extends Operation\n    implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n\n    /**\n     * @description Hash (index) of the newly registered constant\n     */\n    public readonly globalConstantHash?: string;\n    constructor(\n        hash: string,\n        private readonly params: RPCRegisterGlobalConstantOperation,\n        public readonly source: string,\n        raw: ForgedBytes,\n        results: OperationContentsAndResult[],\n        context: Context\n    ) {\n        super(hash, raw, results, context);\n\n        this.globalConstantHash = this.operationResults && this.operationResults.global_address;\n    }\n\n    get operationResults() {\n        const registerGlobalConstantOp =\n            Array.isArray(this.results) &&\n            (this.results.find(op => op.kind === 'register_global_constant') as OperationContentsAndResultRegisterGlobalConstant);\n        const result = registerGlobalConstantOp && registerGlobalConstantOp.metadata && registerGlobalConstantOp.metadata.operation_result;\n        return result ? result : undefined;\n    }\n\n    get status() {\n        const operationResults = this.operationResults;\n        if (operationResults) {\n            return operationResults.status;\n        } else {\n            return 'unknown';\n        }\n    }\n\n    get registeredExpression() {\n        return this.params.value;\n    }\n\n    get fee() {\n        return this.params.fee;\n    }\n\n    get gasLimit() {\n        return this.params.gas_limit;\n    }\n\n    get storageLimit() {\n        return this.params.storage_limit;\n    }\n\n    get errors() {\n        return this.operationResults && this.operationResults.errors;\n    }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultReveal } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { flattenErrors, flattenOperationResult } from './operation-errors';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCRevealOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Reveal operation provides utility functions to fetch a newly issued revelation\n */\nexport class RevealOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCRevealOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const revealOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'reveal') as OperationContentsAndResultReveal);\n    return revealOp ? [revealOp] : [];\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    const txResult = operationResults[0];\n    if (txResult) {\n      return txResult.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get publicKey() {\n    return this.params.public_key;\n  }\n\n  private sumProp(arr: any[], prop: string) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  get consumedGas() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'consumed_gas')\n    );\n  }\n\n  get storageDiff() {\n    return String(\n      this.sumProp(\n        flattenOperationResult({ contents: this.operationResults }),\n        'paid_storage_size_diff'\n      )\n    );\n  }\n\n  get storageSize() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'storage_size')\n    );\n  }\n\n  get errors() {\n    return flattenErrors({ contents: this.operationResults });\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultTransaction } from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { Context } from '../context';\nimport { flattenErrors, flattenOperationResult } from './operation-errors';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCTransferOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Transaction operation provides utility functions to fetch a newly issued transaction\n *\n * @warn Currently supports one transaction per operation\n */\nexport class TransactionOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCTransferOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const transactionOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'transaction') as OperationContentsAndResultTransaction);\n    return transactionOp ? [transactionOp] : [];\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    const txResult = operationResults[0];\n    if (txResult) {\n      return txResult.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get amount() {\n    return new BigNumber(this.params.amount);\n  }\n\n  get destination() {\n    return this.params.destination;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  private sumProp(arr: any[], prop: string) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  get consumedGas() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'consumed_gas')\n    );\n  }\n\n  get storageDiff() {\n    return String(\n      this.sumProp(\n        flattenOperationResult({ contents: this.operationResults }),\n        'paid_storage_size_diff'\n      )\n    );\n  }\n\n  get storageSize() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'storage_size')\n    );\n  }\n\n  get errors() {\n    return flattenErrors({ contents: this.operationResults });\n  }\n}\n","const setDelegate = (key: string) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'key_hash' }, { string: key }],\n    },\n    { prim: 'SOME' },\n    { prim: 'SET_DELEGATE' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst transferImplicit = (key: string, mutez: number) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'key_hash' }, { string: key }],\n    },\n    { prim: 'IMPLICIT_ACCOUNT' },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'mutez' }, { int: `${mutez}` }],\n    },\n    { prim: 'UNIT' },\n    { prim: 'TRANSFER_TOKENS' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst removeDelegate = () => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    { prim: 'NONE', args: [{ prim: 'key_hash' }] },\n    { prim: 'SET_DELEGATE' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst transferToContract = (key: string, amount: number) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'address' }, { string: key }],\n    },\n    { prim: 'CONTRACT', args: [{ prim: 'unit' }] },\n    [\n      {\n        prim: 'IF_NONE',\n        args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], []],\n      },\n    ],\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'mutez' }, { int: `${amount}` }],\n    },\n    { prim: 'UNIT' },\n    { prim: 'TRANSFER_TOKENS' },\n    { prim: 'CONS' },\n  ];\n};\n\nexport const MANAGER_LAMBDA = {\n  setDelegate,\n  removeDelegate,\n  transferImplicit,\n  transferToContract,\n};\n","const code = [\n  {\n    prim: 'parameter',\n    args: [\n      {\n        prim: 'lambda',\n        args: [\n          { prim: 'unit' },\n          {\n            prim: 'pair',\n            args: [{ prim: 'list', args: [{ prim: 'operation' }] }, { prim: 'unit' }],\n          },\n        ],\n      },\n    ],\n  },\n  { prim: 'storage', args: [{ prim: 'unit' }] },\n  { prim: 'code', args: [[{ prim: 'CAR' }, { prim: 'UNIT' }, { prim: 'EXEC' }]] },\n];\n\nconst storage = 'Unit';\n\nexport const VIEW_LAMBDA = {\n  code,\n  storage\n}\n","import { Wallet } from '../wallet/wallet';\nimport { Context } from '../context';\nimport { ContractAbstraction } from './contract';\nimport { ContractProvider } from './interface';\n\nexport function compose<\n    ContractAbsComposer1 extends ContractAbstraction<ContractProvider | Wallet>,\n    ContractAbsComposer2 extends ContractAbstraction<ContractProvider | Wallet>,\n    ContractAbstractionComposed\n>(\n    functioncomposer1: (abs: ContractAbsComposer1, context: Context) => ContractAbsComposer2,\n    functioncomposer2: (abs: ContractAbsComposer2, context: Context) => ContractAbstractionComposed\n): (abs: ContractAbsComposer1, context: Context) => ContractAbstractionComposed {\n    return (contractAbstraction, context) =>\n        functioncomposer2(functioncomposer1(contractAbstraction, context), context);\n}\n","import { TransactionOperation } from '../../operations/transaction-operation';\nimport { TransferParams } from '../../operations/types';\nimport { ContractProvider } from '../interface';\nimport { TransactionWalletOperation, Wallet } from '../../wallet';\nimport { ParameterSchema } from '@taquito/michelson-encoder';\nimport {\n  ContractMethodInterface,\n  ExplicitTransferParams,\n  SendParams,\n} from './contract-method-interface';\nimport { DEFAULT_SMART_CONTRACT_METHOD_NAME } from '../contract';\nimport { InvalidParameterError } from '../errors';\n\n/**\n * @description Utility class to send smart contract operation\n * The format for the arguments is the flattened representation\n */\nexport class ContractMethod<T extends ContractProvider | Wallet>\n  implements ContractMethodInterface\n{\n  constructor(\n    private provider: T,\n    private address: string,\n    private parameterSchema: ParameterSchema,\n    private name: string,\n    private args: any[],\n    private isMultipleEntrypoint = true,\n    private isAnonymous = false\n  ) {}\n\n  private validateArgs(args: any[], schema: ParameterSchema, name: string) {\n    const sigs = schema.ExtractSignatures();\n\n    if (!sigs.find((x: any[]) => x.length === args.length)) {\n      throw new InvalidParameterError(name, sigs, args);\n    }\n  }\n\n  /**\n   * @description Get the schema of the smart contract method\n   */\n  get schema() {\n    return this.isAnonymous\n      ? this.parameterSchema.ExtractSchema()[this.name]\n      : this.parameterSchema.ExtractSchema();\n  }\n\n  /**\n   * @description Get the signature of the smart contract method\n   */\n  getSignature() {\n    if (this.isAnonymous) {\n      const sig = this.parameterSchema.ExtractSignatures().find((x: any[]) => x[0] === this.name);\n      if (sig) {\n        sig.shift();\n        return sig;\n      }\n    } else {\n      const sig = this.parameterSchema.ExtractSignatures();\n      return sig.length == 1 ? sig[0] : sig;\n    }\n  }\n\n  /**\n   *\n   * @description Send the smart contract operation\n   *\n   * @param Options generic operation parameter\n   */\n  send(\n    params: Partial<SendParams> = {}\n  ): Promise<T extends Wallet ? TransactionWalletOperation : TransactionOperation> {\n    if (this.provider instanceof Wallet) {\n      return (this.provider as unknown as Wallet)\n        .transfer(this.toTransferParams(params))\n        .send() as any;\n    } else {\n      return this.provider.transfer(this.toTransferParams(params)) as any;\n    }\n  }\n\n  /**\n   *\n   * @description Create transfer params to be used with TezosToolkit.contract.transfer methods\n   *\n   * @param Options generic transfer operation parameters\n   */\n  toTransferParams({\n    fee,\n    gasLimit,\n    storageLimit,\n    source,\n    amount = 0,\n    mutez = false,\n  }: Partial<SendParams> = {}): TransferParams {\n    const fullTransferParams: ExplicitTransferParams = {\n      to: this.address,\n      amount,\n      fee,\n      mutez,\n      source,\n      gasLimit,\n      storageLimit,\n      parameter: {\n        entrypoint: this.isMultipleEntrypoint ? this.name : DEFAULT_SMART_CONTRACT_METHOD_NAME,\n        value: this.isAnonymous\n          ? this.parameterSchema.Encode(this.name, ...this.args)\n          : this.parameterSchema.Encode(...this.args),\n      },\n    };\n    return fullTransferParams;\n  }\n}\n","import { Context } from '../context';\nimport { ContractAbstraction, ContractStorageType, DefaultWalletType } from '../contract';\nimport { ContractMethod } from '../contract/contract-methods/contract-method-flat-param';\nimport { ContractMethodObject } from '../contract/contract-methods/contract-method-object-param';\nimport { OpKind, withKind } from '../operations/types';\nimport { OriginationWalletOperation } from './origination-operation';\nimport {\n  WalletDelegateParams,\n  WalletOriginateParams,\n  WalletProvider,\n  WalletTransferParams,\n} from './interface';\n\nimport {\n  validateAddress,\n  validateContractAddress,\n  InvalidContractAddressError,\n  InvalidAddressError,\n  ValidationResult,\n  InvalidOperationKindError,\n} from '@taquito/utils';\n\nexport interface PKHOption {\n  forceRefetch?: boolean;\n}\n\nexport type WalletParamsWithKind =\n  | withKind<WalletTransferParams, OpKind.TRANSACTION>\n  | withKind<WalletOriginateParams, OpKind.ORIGINATION>\n  | withKind<WalletDelegateParams, OpKind.DELEGATION>;\n\nexport class WalletOperationBatch {\n  private operations: WalletParamsWithKind[] = [];\n\n  constructor(private walletProvider: WalletProvider, private context: Context) {}\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withTransfer(params: WalletTransferParams) {\n    if (validateAddress(params.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.to);\n    }\n    this.operations.push({ kind: OpKind.TRANSACTION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withContractCall(params: ContractMethod<Wallet> | ContractMethodObject<Wallet>) {\n    return this.withTransfer(params.toTransferParams());\n  }\n\n  /**\n   *\n   * @description Add a delegation operation to the batch\n   *\n   * @param params Delegation operation parameter\n   */\n  withDelegation(params: WalletDelegateParams) {\n    if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.delegate);\n    }\n    this.operations.push({ kind: OpKind.DELEGATION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an origination operation to the batch\n   *\n   * @param params Origination operation parameter\n   */\n  withOrigination<TWallet extends DefaultWalletType = DefaultWalletType>(\n    params: WalletOriginateParams<ContractStorageType<TWallet>>\n  ) {\n    this.operations.push({ kind: OpKind.ORIGINATION, ...params });\n    return this;\n  }\n\n  private async mapOperation(param: WalletParamsWithKind) {\n    switch (param.kind) {\n      case OpKind.TRANSACTION:\n        return this.walletProvider.mapTransferParamsToWalletParams(async () => param);\n      case OpKind.ORIGINATION:\n        return this.walletProvider.mapOriginateParamsToWalletParams(async () =>\n          this.context.parser.prepareCodeOrigination({\n            ...param,\n          })\n        );\n      case OpKind.DELEGATION:\n        return this.walletProvider.mapDelegateParamsToWalletParams(async () => param);\n      default:\n        throw new InvalidOperationKindError((param as any).kind);\n    }\n  }\n\n  /**\n   *\n   * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array\n   *\n   * @param params Operations parameter\n   */\n  with(params: WalletParamsWithKind[]) {\n    for (const param of params) {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          this.withTransfer(param);\n          break;\n        case OpKind.ORIGINATION:\n          this.withOrigination(param);\n          break;\n        case OpKind.DELEGATION:\n          this.withDelegation(param);\n          break;\n        default:\n          throw new InvalidOperationKindError((param as any).kind);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @description Submit batch operation to wallet\n   *\n   */\n  async send() {\n    const ops: WalletParamsWithKind[] = [];\n\n    for (const op of this.operations) {\n      ops.push(await this.mapOperation(op));\n    }\n\n    const opHash = await this.walletProvider.sendOperations(ops);\n\n    return this.context.operationFactory.createBatchOperation(opHash);\n  }\n}\n\nexport class Wallet {\n  constructor(private context: Context) {}\n\n  private get walletProvider() {\n    return this.context.walletProvider;\n  }\n\n  private _pkh?: string;\n\n  /**\n   * @description Retrieve the PKH of the account that is currently in use by the wallet\n   *\n   * @param option Option to use while fetching the PKH.\n   * If forceRefetch is specified the wallet provider implementation will refetch the PKH from the wallet\n   */\n  async pkh({ forceRefetch }: PKHOption = {}) {\n    if (!this._pkh || forceRefetch) {\n      this._pkh = await this.walletProvider.getPKH();\n    }\n\n    return this._pkh;\n  }\n\n  private walletCommand = <T>(send: () => Promise<T>) => {\n    return {\n      send,\n    };\n  };\n\n  /**\n   *\n   * @description Originate a new contract according to the script in parameters.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param originateParams Originate operation parameter\n   */\n  originate<TWallet extends DefaultWalletType = DefaultWalletType>(\n    params: WalletOriginateParams<ContractStorageType<TWallet>>\n  ): { send: () => Promise<OriginationWalletOperation<TWallet>> } {\n    return this.walletCommand(async () => {\n      const mappedParams = await this.walletProvider.mapOriginateParamsToWalletParams(() =>\n        this.context.parser.prepareCodeOrigination({\n          ...(params as WalletOriginateParams),\n        })\n      );\n      const opHash = await this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createOriginationOperation(opHash) as Promise<\n        OriginationWalletOperation<TWallet>\n      >;\n    });\n  }\n\n  /**\n   *\n   * @description Set the delegate for a contract.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param delegateParams operation parameter\n   */\n  setDelegate(params: WalletDelegateParams) {\n    if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.delegate);\n    }\n    return this.walletCommand(async () => {\n      const mappedParams = await this.walletProvider.mapDelegateParamsToWalletParams(\n        async () => params\n      );\n      const opHash = await this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createDelegationOperation(opHash);\n    });\n  }\n\n  /**\n   *\n   * @description Register the current address as delegate.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   */\n  registerDelegate() {\n    return this.walletCommand(async () => {\n      const mappedParams = await this.walletProvider.mapDelegateParamsToWalletParams(async () => {\n        const delegate = await this.pkh();\n        return { delegate };\n      });\n      const opHash = await this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createDelegationOperation(opHash);\n    });\n  }\n\n  /**\n   *\n   * @description Transfer tezos tokens from current address to a specific address or call a smart contract.\n   *\n   * @returns A wallet command from which we can send the operation to the wallet\n   *\n   * @param params operation parameter\n   */\n  transfer(params: WalletTransferParams) {\n    if (validateAddress(params.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.to);\n    }\n    return this.walletCommand(async () => {\n      const mappedParams = await this.walletProvider.mapTransferParamsToWalletParams(\n        async () => params\n      );\n      const opHash = await this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createTransactionOperation(opHash);\n    });\n  }\n\n  /**\n   *\n   * @description Create a batch of operation\n   *\n   * @returns A batch object from which we can add more operation or send a command to the wallet to execute the batch\n   *\n   * @param params List of operation to initialize the batch with\n   */\n  batch(params?: Parameters<WalletOperationBatch['with']>[0]) {\n    const batch = new WalletOperationBatch(this.walletProvider, this.context);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n\n  /**\n   *\n   * @description Create an smart contract abstraction for the address specified. Calling entrypoints with the returned\n   * smart contract abstraction will leverage the wallet provider to make smart contract calls\n   *\n   * @param address Smart contract address\n   */\n  async at<T extends ContractAbstraction<Wallet>>(\n    address: string,\n    contractAbstractionComposer: (abs: ContractAbstraction<Wallet>, context: Context) => T = (x) =>\n      x as any\n  ): Promise<T> {\n    if (validateContractAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidContractAddressError(address);\n    }\n    const rpc = this.context.withExtensions().rpc;\n    const readProvider = this.context.withExtensions().readProvider;\n    const script = await readProvider.getScript(address, 'head');\n    const entrypoints = await readProvider.getEntrypoints(address);\n    const abs = new ContractAbstraction(\n      address,\n      script,\n      this,\n      this.context.contract,\n      entrypoints,\n      rpc,\n      readProvider\n    );\n    return contractAbstractionComposer(abs, this.context);\n  }\n}\n","import { Context } from '../context';\nimport { attachKind, OpKind } from '../operations/types';\nimport {\n  WalletDelegateParams,\n  WalletOriginateParams,\n  WalletProvider,\n  WalletTransferParams,\n} from './interface';\nimport { WalletParamsWithKind } from './wallet';\n\nexport class LegacyWalletProvider implements WalletProvider {\n  constructor(private context: Context) {}\n\n  async getPKH(): Promise<string> {\n    return this.context.signer.publicKeyHash();\n  }\n\n  async mapTransferParamsToWalletParams(params: () => Promise<WalletTransferParams>) {\n    return attachKind(await params(), OpKind.TRANSACTION);\n  }\n\n  async mapOriginateParamsToWalletParams(params: () => Promise<WalletOriginateParams>) {\n    return attachKind(await params(), OpKind.ORIGINATION);\n  }\n\n  async mapDelegateParamsToWalletParams(params: () => Promise<WalletDelegateParams>) {\n    return attachKind(await params(), OpKind.DELEGATION);\n  }\n\n  async sendOperations(params: WalletParamsWithKind[]) {\n    const op = await this.context.batch.batch(params as any).send();\n    return op.hash;\n  }\n}\n","import { TransactionOperation } from '../../operations/transaction-operation';\nimport { TransferParams } from '../../operations/types';\nimport { ContractProvider } from '../interface';\nimport { TransactionWalletOperation, Wallet } from '../../wallet';\nimport { ParameterSchema } from \"@taquito/michelson-encoder\";\nimport { ContractMethodInterface, ExplicitTransferParams, SendParams } from './contract-method-interface';\nimport { DEFAULT_SMART_CONTRACT_METHOD_NAME } from '../contract';\n\n/**\n * @description Utility class to send smart contract operation\n * The format for the arguments is the object representation\n */\nexport class ContractMethodObject<T extends ContractProvider | Wallet> implements ContractMethodInterface {\n    constructor(\n        private provider: T,\n        private address: string,\n        private parameterSchema: ParameterSchema,\n        private name: string,\n        private args: any = 'unit',\n        private isMultipleEntrypoint = true,\n        private isAnonymous = false\n    ) { }\n\n    /**\n     * @description Get the signature of the smart contract method\n     */\n    getSignature() {\n        return this.isAnonymous\n            ? this.parameterSchema.ExtractSchema()[this.name]\n            : this.parameterSchema.ExtractSchema();\n    }\n\n    /**\n     *\n     * @description Send the smart contract operation\n     *\n     * @param Options generic operation parameter\n     */\n    send(\n        params: Partial<SendParams> = {}\n    ): Promise<T extends Wallet ? TransactionWalletOperation : TransactionOperation> {\n        if (this.provider instanceof Wallet) {\n            return (this.provider as unknown as Wallet).transfer(this.toTransferParams(params)).send() as any;\n        } else {\n            return this.provider.transfer(this.toTransferParams(params)) as any;\n        }\n    }\n\n    /**\n     *\n     * @description Create transfer params to be used with TezosToolkit.contract.transfer methods\n     *\n     * @param Options generic transfer operation parameters\n     */\n    toTransferParams({\n        fee,\n        gasLimit,\n        storageLimit,\n        source,\n        amount = 0,\n        mutez = false,\n    }: Partial<SendParams> = {}): TransferParams {\n        const fullTransferParams: ExplicitTransferParams = {\n            to: this.address,\n            amount,\n            fee,\n            mutez,\n            source,\n            gasLimit,\n            storageLimit,\n            parameter: {\n                entrypoint: this.isMultipleEntrypoint ? this.name : DEFAULT_SMART_CONTRACT_METHOD_NAME,\n                value: this.isAnonymous\n                    ? this.parameterSchema.EncodeObject({ [this.name]: this.args })\n                    : this.parameterSchema.EncodeObject(this.args),\n            },\n        };\n        return fullTransferParams;\n    }\n}","import { ViewSchema } from '@taquito/michelson-encoder';\nimport {\n  MichelsonV1Expression,\n  MichelsonV1ExpressionExtended,\n  RpcClientInterface,\n  RPCRunCodeParam,\n} from '@taquito/rpc';\nimport { validateAddress, ValidationResult } from '@taquito/utils';\nimport { TzReadProvider } from '../../read-provider/interface';\nimport {\n  InvalidViewSimulationContext,\n  InvalidViewParameterError,\n  ViewSimulationError,\n  validateAndExtractFailwith,\n} from '../errors';\n\nconst runCodeHelper = (\n  viewArgsType: MichelsonV1ExpressionExtended,\n  viewReturnType: MichelsonV1ExpressionExtended,\n  contractStorageType: MichelsonV1Expression,\n  viewInstructions: MichelsonV1ExpressionExtended[],\n  viewArgs: MichelsonV1Expression,\n  contractStorageValue: MichelsonV1Expression,\n  balance: string,\n  chain_id: string,\n  source?: string,\n  amount = '0'\n): RPCRunCodeParam => {\n  return {\n    script: [\n      { prim: 'parameter', args: [{ prim: 'pair', args: [viewArgsType, contractStorageType] }] },\n      { prim: 'storage', args: [{ prim: 'option', args: [viewReturnType] }] },\n      {\n        prim: 'code',\n        args: [\n          [\n            { prim: 'CAR' },\n            viewInstructions,\n            { prim: 'SOME' },\n            { prim: 'NIL', args: [{ prim: 'operation' }] },\n            { prim: 'PAIR' },\n          ],\n        ],\n      },\n    ],\n    storage: { prim: 'None' },\n    input: { prim: 'Pair', args: [viewArgs, contractStorageValue] },\n    amount,\n    balance,\n    chain_id,\n    source,\n  };\n};\n\nexport interface ExecutionContextParams {\n  source?: string;\n  viewCaller: string;\n}\n\nexport class OnChainView {\n  constructor(\n    private _rpc: RpcClientInterface,\n    private _readProvider: TzReadProvider,\n    private _contractAddress: string,\n    private _smartContractViewSchema: ViewSchema,\n    private _contractStorageType: MichelsonV1Expression,\n    private _args: any = 'Unit'\n  ) {}\n\n  /**\n   * @description Get the signature of the smart contract view\n   */\n  getSignature() {\n    return {\n      parameter: this._smartContractViewSchema.extractArgsSchema(),\n      result: this._smartContractViewSchema.extractResultSchema(),\n    };\n  }\n\n  /**\n   * @description Get the result of the view simulation\n   * @param executionContext.source the public key hash of the account who initialized this view execution.\n   * @param executionContext.viewCaller the contract address which is the caller of view.\n   */\n  async executeView(executionContext: ExecutionContextParams) {\n    this.verifyContextExecution(executionContext);\n    const balance = (await this._readProvider.getBalance(this._contractAddress, 'head')).toString();\n    const chainId = await this._readProvider.getChainId();\n    const storage = await this._readProvider.getStorage(this._contractAddress, 'head');\n    return this.executeViewAndDecodeResult(\n      runCodeHelper(\n        this._smartContractViewSchema.viewArgsType,\n        this._smartContractViewSchema.viewReturnType,\n        this._contractStorageType,\n        this.adaptViewCodeToContext(\n          this._smartContractViewSchema.instructions,\n          executionContext.viewCaller,\n          balance\n        ),\n        this.transformArgsToMichelson(),\n        storage,\n        balance,\n        chainId,\n        executionContext.source\n      )\n    );\n  }\n\n  private verifyContextExecution(executionContext: ExecutionContextParams) {\n    if (\n      executionContext.source &&\n      validateAddress(executionContext.source) !== ValidationResult.VALID\n    ) {\n      throw new InvalidViewSimulationContext(\n        `The source account who initialized the view execution is invalid: ${executionContext.source}.`\n      );\n    }\n    if (\n      !executionContext.viewCaller ||\n      validateAddress(executionContext.viewCaller) !== ValidationResult.VALID\n    ) {\n      throw new InvalidViewSimulationContext(\n        `The contract which is the caller of view is invalid: ${executionContext.viewCaller}.`\n      );\n    }\n  }\n\n  private transformArgsToMichelson() {\n    try {\n      return this._smartContractViewSchema.encodeViewArgs(this._args);\n    } catch (error) {\n      throw new InvalidViewParameterError(\n        this._smartContractViewSchema.viewName,\n        this.getSignature(),\n        this._args,\n        error\n      );\n    }\n  }\n  /**\n   * @description Loops through the view's instructions and replace BALANCE, SENDER, SELF_ADDRESS and AMOUNT with Michelson expressions that match the current context, if applicable.\n   *\n   * Certain specific instructions have different semantics in view:\n   * BALANCE represents the current amount of mutez held by the contract where view is;\n   * SENDER represents the contract which is the caller of view;\n   * SELF_ADDRESS represents the contract where view is;\n   * AMOUNT is always 0 mutez.\n   *\n   */\n  private adaptViewCodeToContext(\n    instructions: MichelsonV1ExpressionExtended[],\n    viewCaller: string,\n    contractBalance: string\n  ) {\n    const instructionsToReplace = {\n      BALANCE: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: contractBalance }] }],\n      SENDER: [{ prim: 'PUSH', args: [{ prim: 'address' }, { string: viewCaller }] }],\n      SELF_ADDRESS: [\n        { prim: 'PUSH', args: [{ prim: 'address' }, { string: this._contractAddress }] },\n      ],\n      AMOUNT: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: '0' }] }],\n    };\n\n    instructions.forEach((inst: any, i: number) => {\n      if (inst.prim in instructionsToReplace) {\n        instructions[i] = Object(instructionsToReplace)[inst.prim];\n      }\n      if (inst.args && inst.args.length !== 0) {\n        this.adaptViewCodeToContext(inst.args, viewCaller, contractBalance);\n      } else if (Array.isArray(inst)) {\n        this.adaptViewCodeToContext(inst, viewCaller, contractBalance);\n      }\n    });\n    return instructions;\n  }\n\n  private async executeViewAndDecodeResult(viewScript: RPCRunCodeParam) {\n    let storage: MichelsonV1ExpressionExtended;\n    try {\n      storage = (await this._rpc.runCode(viewScript)).storage as MichelsonV1ExpressionExtended;\n    } catch (error: any) {\n      const failWith = validateAndExtractFailwith(error);\n      throw failWith\n        ? new ViewSimulationError(\n            `The simulation of the on-chain view named ${\n              this._smartContractViewSchema.viewName\n            } failed with: ${JSON.stringify(failWith)}`,\n            this._smartContractViewSchema.viewName,\n            failWith,\n            error\n          )\n        : error;\n    }\n    if (!storage.args) {\n      throw new ViewSimulationError(\n        `View simulation failed with an invalid result: ${storage}`,\n        this._smartContractViewSchema.viewName\n      );\n    }\n    return this._smartContractViewSchema.decodeViewResult(storage.args[0]);\n  }\n}\n","import { Wallet } from '../../wallet';\nimport { ContractProvider } from '../../contract';\nimport { ContractMethodObject } from './contract-method-object-param';\nimport { ContractMethod } from './contract-method-flat-param';\nimport { ParameterSchema, ViewSchema } from '@taquito/michelson-encoder';\nimport { RpcClientInterface, MichelsonV1Expression } from '@taquito/rpc';\nimport { OnChainView } from './contract-on-chain-view';\nimport { TzReadProvider } from '../../read-provider/interface';\n\nexport class ContractMethodFactory<T extends ContractProvider | Wallet> {\n  constructor(private provider: T, private contractAddress: string) {}\n\n  createContractMethodFlatParams(\n    smartContractMethodSchema: ParameterSchema,\n    smartContractMethodName: string,\n    args: any[],\n    isMultipleEntrypoint = true,\n    isAnonymous = false\n  ) {\n    return new ContractMethod<T>(\n      this.provider,\n      this.contractAddress,\n      smartContractMethodSchema,\n      smartContractMethodName,\n      args,\n      isMultipleEntrypoint,\n      isAnonymous\n    );\n  }\n\n  createContractMethodObjectParam(\n    smartContractMethodSchema: ParameterSchema,\n    smartContractMethodName: string,\n    args: any[],\n    isMultipleEntrypoint = true,\n    isAnonymous = false\n  ) {\n    return new ContractMethodObject<T>(\n      this.provider,\n      this.contractAddress,\n      smartContractMethodSchema,\n      smartContractMethodName,\n      args,\n      isMultipleEntrypoint,\n      isAnonymous\n    );\n  }\n\n  createContractViewObjectParam(\n    rpc: RpcClientInterface,\n    readProvider: TzReadProvider,\n    smartContractViewSchema: ViewSchema,\n    contractStorageType: MichelsonV1Expression,\n    viewArgs: any\n  ) {\n    return new OnChainView(\n      rpc,\n      readProvider,\n      this.contractAddress,\n      smartContractViewSchema,\n      contractStorageType,\n      viewArgs\n    );\n  }\n}\n","import { ParameterSchema, Schema, ViewSchema } from '@taquito/michelson-encoder';\nimport {\n  EntrypointsResponse,\n  MichelsonV1Expression,\n  RpcClientInterface,\n  ScriptResponse,\n} from '@taquito/rpc';\nimport {\n  validateChain,\n  validateContractAddress,\n  ValidationResult,\n  InvalidChainIdError,\n  DeprecationError,\n} from '@taquito/utils';\nimport { ChainIds } from '../constants';\nimport { TzReadProvider } from '../read-provider/interface';\nimport { Wallet } from '../wallet';\nimport { ContractMethodFactory } from './contract-methods/contract-method-factory';\nimport { ContractMethod } from './contract-methods/contract-method-flat-param';\nimport { ContractMethodObject } from './contract-methods/contract-method-object-param';\nimport { OnChainView } from './contract-methods/contract-on-chain-view';\nimport { InvalidParameterError } from './errors';\nimport { ContractProvider, StorageProvider } from './interface';\n\nexport const DEFAULT_SMART_CONTRACT_METHOD_NAME = 'default';\n\n/**\n * @description Utility class to retrieve data from a smart contract's storage without incurring fees via a contract's view method\n */\nexport class ContractView {\n  constructor(\n    private currentContract: ContractAbstraction<ContractProvider | Wallet>,\n    private name: string,\n    private callbackParametersSchema: ParameterSchema,\n    private parameterSchema: ParameterSchema,\n    private args: any[],\n    private rpc: RpcClientInterface,\n    private readProvider: TzReadProvider\n  ) {}\n\n  async read(chainId?: ChainIds) {\n    if (validateContractAddress(chainId ?? \"\") == ValidationResult.VALID) {\n      throw new DeprecationError(\n        `Since version 12, the lambda view no longer depends on a lambda contract. The read method no longer accepts a contract address as a parameter.`\n      );\n    } else if (chainId && validateChain(chainId) !== ValidationResult.VALID) {\n      throw new InvalidChainIdError(chainId);\n    }\n    const arg = this.parameterSchema.Encode(...this.args);\n    const result = await this.rpc.runView({\n      contract: this.currentContract.address,\n      entrypoint: this.name,\n      input: arg,\n      chain_id: chainId ? chainId : await this.readProvider.getChainId(),\n    });\n    return this.callbackParametersSchema.Execute(result.data);\n  }\n}\n\nconst validateArgs = (args: any[], schema: ParameterSchema, name: string) => {\n  const sigs = schema.ExtractSignatures();\n\n  if (!sigs.find((x: any[]) => x.length === args.length)) {\n    throw new InvalidParameterError(name, sigs, args);\n  }\n};\n\n// lambda view tzip4\nconst isView = (entrypoint: MichelsonV1Expression): boolean => {\n  let isView = false;\n  if ('prim' in entrypoint && entrypoint.prim === 'pair' && entrypoint.args) {\n    const lastElement = entrypoint.args[entrypoint.args.length - 1];\n    if ('prim' in lastElement && lastElement.prim === 'contract') {\n      isView = true;\n    }\n  }\n  return isView;\n};\n\nexport type Contract = ContractAbstraction<ContractProvider>;\nexport type WalletContract = ContractAbstraction<Wallet>;\n\ntype DefaultMethods<T extends ContractProvider | Wallet> = Record<\n  string,\n  (...args: any[]) => ContractMethod<T>\n>;\ntype DefaultMethodsObject<T extends ContractProvider | Wallet> = Record<\n  string,\n  (args?: any) => ContractMethodObject<T>\n>;\ntype DefaultViews = Record<string, (...args: any[]) => ContractView>;\ntype DefaultContractViews = Record<string, (args?: any) => OnChainView>;\ntype DefaultStorage = unknown; // Record<string, unknown>;\n\ntype PromiseReturnType<T extends (...args: any) => any> = T extends (\n  ...args: any\n) => Promise<infer R>\n  ? R\n  : any;\nexport type ContractStorageType<T extends ContractAbstraction<ContractProvider | Wallet>> =\n  PromiseReturnType<T['storage']>;\nexport type DefaultContractType = ContractAbstraction<ContractProvider>;\nexport type DefaultWalletType = ContractAbstraction<Wallet>;\n\n/**\n * @description Smart contract abstraction\n */\nexport class ContractAbstraction<\n  T extends ContractProvider | Wallet,\n  TMethods extends DefaultMethods<T> = DefaultMethods<T>,\n  TMethodsObject extends DefaultMethodsObject<T> = DefaultMethodsObject<T>,\n  TViews extends DefaultViews = DefaultViews,\n  TContractViews extends DefaultContractViews = DefaultContractViews,\n  TStorage extends DefaultStorage = DefaultStorage\n> {\n  private contractMethodFactory: ContractMethodFactory<T>;\n  /**\n   * @description Contains methods that are implemented by the target Tezos Smart Contract, and offers the user to call the Smart Contract methods as if they were native TS/JS methods.\n   * NB: if the contract contains annotation it will include named properties; if not it will be indexed by a number.\n   *\n   */\n  public methods: TMethods = {} as TMethods;\n  /**\n   * @description Contains methods that are implemented by the target Tezos Smart Contract, and offers the user to call the Smart Contract methods as if they were native TS/JS methods.\n   * `methodsObject` serves the exact same purpose as the `methods` member. The difference is that it allows passing the parameter in an object format when calling the smart contract method (instead of the flattened representation)\n   * NB: if the contract contains annotation it will include named properties; if not it will be indexed by a number.\n   *\n   */\n  public methodsObject: TMethodsObject = {} as TMethodsObject;\n  /**\n   * @description Contains lamda views (tzip4) that are implemented by the target Tezos Smart Contract, and offers the user to call the lambda views as if they were native TS/JS methods.\n   * NB: These are the view defined in the tzip4 standard, not the views introduced by the Hangzhou protocol.\n   */\n  public views: TViews = {} as TViews;\n  /**\n   * @description Contains on-chain views that are defined by the target Tezos Smart Contract, and offers the user to simulate the views execution as if they were native TS/JS methods.\n   * NB: the expected format for the parameter when calling a smart contract view is the object format (same format as for the storage) and not the flattened representation.\n   *\n   */\n  public contractViews: TContractViews = {} as TContractViews;\n\n  public readonly schema: Schema;\n\n  public readonly parameterSchema: ParameterSchema;\n  public readonly viewSchema: ViewSchema[];\n\n  constructor(\n    public readonly address: string,\n    public readonly script: ScriptResponse,\n    provider: T,\n    private storageProvider: StorageProvider,\n    public readonly entrypoints: EntrypointsResponse,\n    private rpc: RpcClientInterface,\n    private readProvider: TzReadProvider\n  ) {\n    this.contractMethodFactory = new ContractMethodFactory(provider, address);\n    this.schema = Schema.fromRPCResponse({ script: this.script });\n    this.parameterSchema = ParameterSchema.fromRPCResponse({ script: this.script });\n\n    this.viewSchema = ViewSchema.fromRPCResponse({ script: this.script });\n    if (this.viewSchema.length !== 0) {\n      this._initializeOnChainViews(this, rpc, this.readProvider, this.viewSchema);\n    }\n    this._initializeMethods(this, this.entrypoints.entrypoints, this.rpc, this.readProvider);\n  }\n\n  private _initializeMethods(\n    currentContract: ContractAbstraction<T>,\n    entrypoints: {\n      [key: string]: object;\n    },\n    rpc: RpcClientInterface,\n    readProvider: TzReadProvider\n  ) {\n    const parameterSchema = this.parameterSchema;\n    const keys = Object.keys(entrypoints);\n    if (parameterSchema.isMultipleEntryPoint) {\n      keys.forEach((smartContractMethodName) => {\n        const smartContractMethodSchema = new ParameterSchema(entrypoints[smartContractMethodName]);\n\n        (this.methods as DefaultMethods<T>)[smartContractMethodName] = function (...args: any[]) {\n          return currentContract.contractMethodFactory.createContractMethodFlatParams(\n            smartContractMethodSchema,\n            smartContractMethodName,\n            args\n          );\n        };\n\n        (this.methodsObject as DefaultMethodsObject<T>)[smartContractMethodName] = function (\n          args: any\n        ) {\n          return currentContract.contractMethodFactory.createContractMethodObjectParam(\n            smartContractMethodSchema,\n            smartContractMethodName,\n            args\n          );\n        };\n\n        if (isView(entrypoints[smartContractMethodName])) {\n          const view = function (...args: any[]) {\n            const entrypointParamWithoutCallback = (entrypoints[smartContractMethodName] as any)\n              .args[0];\n            const smartContractMethodSchemaWithoutCallback = new ParameterSchema(\n              entrypointParamWithoutCallback\n            );\n            const parametersCallback = (entrypoints[smartContractMethodName] as any).args[1]\n              .args[0];\n            const smartContractMethodCallbackSchema = new ParameterSchema(parametersCallback);\n\n            validateArgs(args, smartContractMethodSchemaWithoutCallback, smartContractMethodName);\n            return new ContractView(\n              currentContract,\n              smartContractMethodName,\n              smartContractMethodCallbackSchema,\n              smartContractMethodSchemaWithoutCallback,\n              args,\n              rpc,\n              readProvider\n            );\n          };\n          (this.views as DefaultViews)[smartContractMethodName] = view;\n        }\n      });\n\n      // Deal with methods with no annotations which were not discovered by the RPC endpoint\n      // Methods with no annotations are discovered using parameter schema\n      const anonymousMethods = Object.keys(parameterSchema.ExtractSchema()).filter(\n        (key) => Object.keys(entrypoints).indexOf(key) === -1\n      );\n\n      anonymousMethods.forEach((smartContractMethodName) => {\n        (this.methods as DefaultMethods<T>)[smartContractMethodName] = function (...args: any[]) {\n          return currentContract.contractMethodFactory.createContractMethodFlatParams(\n            parameterSchema,\n            smartContractMethodName,\n            args,\n            false,\n            true\n          );\n        };\n\n        (this.methodsObject as DefaultMethodsObject<T>)[smartContractMethodName] = function (\n          args: any\n        ) {\n          return currentContract.contractMethodFactory.createContractMethodObjectParam(\n            parameterSchema,\n            smartContractMethodName,\n            args,\n            false,\n            true\n          );\n        };\n      });\n    } else {\n      const smartContractMethodSchema = this.parameterSchema;\n      (this.methods as DefaultMethods<T>)[DEFAULT_SMART_CONTRACT_METHOD_NAME] = function (\n        ...args: any[]\n      ) {\n        return currentContract.contractMethodFactory.createContractMethodFlatParams(\n          smartContractMethodSchema,\n          DEFAULT_SMART_CONTRACT_METHOD_NAME,\n          args,\n          false\n        );\n      };\n\n      (this.methodsObject as DefaultMethodsObject<T>)[DEFAULT_SMART_CONTRACT_METHOD_NAME] =\n        function (args: any) {\n          return currentContract.contractMethodFactory.createContractMethodObjectParam(\n            smartContractMethodSchema,\n            DEFAULT_SMART_CONTRACT_METHOD_NAME,\n            args,\n            false\n          );\n        };\n    }\n  }\n\n  private _initializeOnChainViews(\n    currentContract: ContractAbstraction<T>,\n    rpc: RpcClientInterface,\n    readProvider: TzReadProvider,\n    allContractViews: ViewSchema[]\n  ) {\n    const storageType = this.schema.val;\n\n    allContractViews.forEach((viewSchema) => {\n      (this.contractViews as DefaultContractViews)[viewSchema.viewName] = function (args: any) {\n        return currentContract.contractMethodFactory.createContractViewObjectParam(\n          rpc,\n          readProvider,\n          viewSchema,\n          storageType,\n          args\n        );\n      };\n    });\n  }\n\n  /**\n   * @description Return a friendly representation of the smart contract storage\n   */\n  public storage<T extends TStorage = TStorage>() {\n    return this.storageProvider.getStorage<T>(this.address, this.schema);\n  }\n\n  /**\n   *\n   * @description Return a friendly representation of the smart contract big map value\n   *\n   * @param key BigMap key to fetch\n   *\n   * @deprecated getBigMapKey has been deprecated in favor of getBigMapKeyByID\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n   */\n  public bigMap(key: string) {\n    return this.storageProvider.getBigMapKey(this.address, key, this.schema);\n  }\n}\n","import { Schema, BigMapKeyType } from '@taquito/michelson-encoder';\nimport BigNumber from 'bignumber.js';\nimport { ContractProvider } from './interface';\nimport { HttpResponseError, STATUS_CODE } from '@taquito/http-utils';\n\nexport class BigMapAbstraction {\n  constructor(private id: BigNumber, private schema: Schema, private provider: ContractProvider) {}\n\n  /**\n   *\n   * @description Fetch one value in a big map\n   *\n   * @param keysToEncode Key to query (will be encoded properly according to the schema)\n   * @param block optional block level to fetch the values from (head will be use by default)\n   * @returns Return a well formatted json object of a big map value or undefined if the key is not found in the big map\n   *\n   */\n  async get<T>(keyToEncode: BigMapKeyType, block?: number) {\n    try {\n      const id = await this.provider.getBigMapKeyByID<T>(\n        this.id.toString(),\n        keyToEncode,\n        this.schema,\n        block\n      );\n      return id;\n    } catch (e) {\n      if (e instanceof HttpResponseError && e.status === STATUS_CODE.NOT_FOUND) {\n        return undefined;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   *\n   * @description Fetch multiple values in a big map\n   * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it.\n   * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.\n   * If one of the keys does not exist in the big map, its value will be set to undefined.\n   *\n   * @param keysToEncode Array of keys to query (will be encoded properly according to the schema)\n   * @param block optional block level to fetch the values from\n   * @param batchSize optional batch size representing the number of requests to execute in parallel\n   * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format\n   *\n   */\n  async getMultipleValues<T>(keysToEncode: Array<BigMapKeyType>, block?: number, batchSize = 5) {\n    return this.provider.getBigMapKeysByID<T>(\n      this.id.toString(),\n      keysToEncode,\n      this.schema,\n      block,\n      batchSize\n    );\n  }\n\n  toJSON() {\n    return this.id.toString();\n  }\n\n  toString() {\n    return this.id.toString();\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { ContractProvider } from './interface';\n\nexport class SaplingStateAbstraction {\n    constructor(private id: BigNumber, private provider: ContractProvider) { }\n\n    /**\n     *\n     * @description Fetch the sapling state\n     * \n     * @param block optional block level to fetch the values from (head will be use by default)\n     * @returns Return a json object of the sapling_state\n     *\n     */\n    async getSaplingDiff(block?: number) {\n        return this.provider.getSaplingDiffByID(this.id.toString(), block);\n    }\n\n    getId() {\n        return this.id.toString();\n    }\n}\n","import { Schema, Semantic } from '@taquito/michelson-encoder';\nimport { BigMapAbstraction } from './big-map';\nimport { ContractProvider } from './interface';\nimport BigNumber from 'bignumber.js';\nimport { MichelsonV1Expression } from '@taquito/rpc';\nimport { SaplingStateAbstraction } from './sapling-state-abstraction';\n\n// Override the default michelson encoder semantic to provide richer abstraction over storage properties\nexport const smartContractAbstractionSemantic: (p: ContractProvider) => Semantic = (\n  provider: ContractProvider\n) => ({\n  // Provide a specific abstraction for BigMaps\n  big_map: (val: MichelsonV1Expression, code: MichelsonV1Expression) => {\n    if (!val || !('int' in val) || val.int === undefined) {\n      // Return an empty object in case of missing big map ID\n      return {};\n    } else {\n      const schema = new Schema(code);\n      return new BigMapAbstraction(new BigNumber(val.int), schema, provider);\n    }\n  },\n  sapling_state: (val: MichelsonV1Expression) => {\n    if (!val || !('int' in val) || val.int === undefined) {\n      // Return an empty object in case of missing sapling state ID\n      return {};\n    } else {\n      return new SaplingStateAbstraction(new BigNumber(val.int), provider);\n    }\n  }\n  /*\n  // TODO: embed useful other abstractions\n  'contract':  () => {},\n  'address':  () => {}\n  */\n});\n","import {\n  OperationContentsAndResult,\n  OperationContentsAndResultTxRollupOrigination,\n} from '@taquito/rpc';\nimport { Context } from '../context';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCTxRollupOriginationOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description TxRollupOriginationOperation provides utility functions to fetch a newly issued operation of kind tx_rollup_origination\n */\nexport class TxRollupOriginationOperation\n  extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation\n{\n  /**\n   * @description Address the newly originate rollup\n   */\n  public readonly originatedRollup?: string;\n  constructor(\n    hash: string,\n    private readonly params: RPCTxRollupOriginationOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n\n    this.originatedRollup = this.operationResults && this.operationResults.originated_rollup;\n  }\n\n  get operationResults() {\n    const rollupOriginationOp =\n      Array.isArray(this.results) &&\n      (this.results.find(\n        (op) => op.kind === 'tx_rollup_origination'\n      ) as OperationContentsAndResultTxRollupOrigination);\n    const result =\n      rollupOriginationOp &&\n      rollupOriginationOp.metadata &&\n      rollupOriginationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n}\n","import {\n  OperationContentsAndResult,\n  OperationContentsAndResultTxRollupSubmitBatch,\n} from '@taquito/rpc';\nimport { Context } from '../context';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCTxRollupBatchOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description TxRollupBatchOperation provides utility functions to fetch a newly issued operation of kind tx_rollup_submit_batch\n */\nexport class TxRollupBatchOperation\n  extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation\n{\n  constructor(\n    hash: string,\n    private readonly params: RPCTxRollupBatchOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const txrollupBatchOp =\n      Array.isArray(this.results) &&\n      (this.results.find(\n        (op) => op.kind === 'tx_rollup_submit_batch'\n      ) as OperationContentsAndResultTxRollupSubmitBatch);\n    const result =\n      txrollupBatchOp && txrollupBatchOp.metadata && txrollupBatchOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get content() {\n    return this.params.content;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n}\n","import { HttpResponseError, STATUS_CODE } from '@taquito/http-utils';\nimport { BigMapKeyType, MichelsonMap, MichelsonMapKey, Schema } from '@taquito/michelson-encoder';\nimport { OpKind, ScriptResponse } from '@taquito/rpc';\nimport { encodeExpr } from '@taquito/utils';\nimport { OperationBatch } from '../batch/rpc-batch-provider';\nimport { Context } from '../context';\nimport { DelegateOperation } from '../operations/delegate-operation';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport { OriginationOperation } from '../operations/origination-operation';\nimport { RegisterGlobalConstantOperation } from '../operations/register-global-constant-operation';\nimport { RevealOperation } from '../operations/reveal-operation';\nimport { TransactionOperation } from '../operations/transaction-operation';\nimport {\n  DelegateParams,\n  isOpRequireReveal,\n  OriginateParams,\n  TxRollupOriginateParams,\n  ParamsWithKind,\n  RegisterDelegateParams,\n  RegisterGlobalConstantParams,\n  RevealParams,\n  RPCOperation,\n  TransferParams,\n  withKind,\n  TxRollupBatchParams,\n} from '../operations/types';\nimport { DefaultContractType, ContractStorageType, ContractAbstraction } from './contract';\nimport { InvalidDelegationSource, RevealOperationError } from './errors';\nimport { ContractProvider, ContractSchema, StorageProvider } from './interface';\nimport {\n  createOriginationOperation,\n  createRegisterDelegateOperation,\n  createRegisterGlobalConstantOperation,\n  createRevealOperation,\n  createTxRollupOriginationOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n  createTxRollupBatchOperation,\n} from './prepare';\nimport { smartContractAbstractionSemantic } from './semantic';\nimport {\n  validateAddress,\n  validateContractAddress,\n  InvalidContractAddressError,\n  InvalidAddressError,\n  ValidationResult,\n} from '@taquito/utils';\nimport { EstimationProvider } from '../estimate/estimate-provider-interface';\nimport { TxRollupOriginationOperation } from '../operations/tx-rollup-origination-operation';\nimport { TxRollupBatchOperation } from '../operations/tx-rollup-batch-operation';\nexport class RpcContractProvider\n  extends OperationEmitter\n  implements ContractProvider, StorageProvider\n{\n  constructor(context: Context, private estimator: EstimationProvider) {\n    super(context);\n  }\n  contractProviderTypeSymbol = Symbol.for('taquito--provider-type-symbol');\n\n  /**\n   *\n   * @description Return a well formatted json object of the contract storage\n   *\n   * @param contract contract address you want to get the storage from\n   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-script\n   */\n  async getStorage<T>(contract: string, schema?: ContractSchema): Promise<T> {\n    if (validateContractAddress(contract) !== ValidationResult.VALID) {\n      throw new InvalidContractAddressError(contract);\n    }\n    const script = await this.context.readProvider.getScript(contract, 'head');\n    if (!schema) {\n      schema = script;\n    }\n\n    let contractSchema: Schema;\n    if (Schema.isSchema(schema as Schema)) {\n      contractSchema = schema as Schema;\n    } else {\n      contractSchema = Schema.fromRPCResponse({ script: schema as ScriptResponse });\n    }\n\n    return contractSchema.Execute(script.storage, smartContractAbstractionSemantic(this)) as T; // Cast into T because only the caller can know the true type of the storage\n  }\n\n  /**\n   *\n   * @description Return a well formatted json object of the contract big map storage\n   *\n   * @param contract contract address you want to get the storage from\n   * @param key contract big map key to fetch value from\n   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\n   *\n   * @deprecated Deprecated in favor of getBigMapKeyByID\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n   */\n  async getBigMapKey<T>(contract: string, key: string, schema?: ContractSchema): Promise<T> {\n    if (validateContractAddress(contract) !== ValidationResult.VALID) {\n      throw new InvalidContractAddressError(contract);\n    }\n    if (!schema) {\n      schema = (await this.rpc.getContract(contract)).script;\n    }\n\n    let contractSchema: Schema;\n    if (Schema.isSchema(schema as Schema)) {\n      contractSchema = schema as Schema\n    } else {\n      contractSchema = Schema.fromRPCResponse({ script: schema as ScriptResponse });\n    }\n\n    const encodedKey = contractSchema.EncodeBigMapKey(key);\n\n    const val = await this.rpc.getBigMapKey(contract, encodedKey);\n\n    return contractSchema.ExecuteOnBigMapValue(val) as T; // Cast into T because only the caller can know the true type of the storage\n  }\n\n  /**\n   *\n   * @description Return a well formatted json object of a big map value\n   *\n   * @param id Big Map ID\n   * @param keyToEncode key to query (will be encoded properly according to the schema)\n   * @param schema Big Map schema (can be determined using your contract type)\n   * @param block optional block level to fetch the values from\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr\n   */\n  async getBigMapKeyByID<T>(\n    id: string,\n    keyToEncode: BigMapKeyType,\n    schema: Schema,\n    block?: number\n  ): Promise<T> {\n    const { key, type } = schema.EncodeBigMapKey(keyToEncode);\n    const { packed } = await this.context.packer.packData({ data: key, type });\n\n    const encodedExpr = encodeExpr(packed);\n\n    const bigMapValue = block\n      ? await this.context.readProvider.getBigMapValue(\n          { id: id.toString(), expr: encodedExpr },\n          block\n        )\n      : await this.context.readProvider.getBigMapValue(\n          { id: id.toString(), expr: encodedExpr },\n          'head'\n        );\n\n    return schema.ExecuteOnBigMapValue(bigMapValue, smartContractAbstractionSemantic(this)) as T;\n  }\n\n  /**\n   *\n   * @description Fetch multiple values in a big map\n   * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it.\n   * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.\n   * If one of the keys does not exist in the big map, its value will be set to undefined.\n   *\n   * @param id Big Map ID\n   * @param keys Array of keys to query (will be encoded properly according to the schema)\n   * @param schema Big Map schema (can be determined using your contract type)\n   * @param block optional block level to fetch the values from\n   * @param batchSize optional batch size representing the number of requests to execute in parallel\n   * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format\n   *\n   */\n  async getBigMapKeysByID<T>(\n    id: string,\n    keys: Array<BigMapKeyType>,\n    schema: Schema,\n    block?: number,\n    batchSize = 5\n  ): Promise<MichelsonMap<MichelsonMapKey, T | undefined>> {\n    const level = await this.getBlockForRequest(keys, block);\n    const bigMapValues = new MichelsonMap<MichelsonMapKey, T | undefined>();\n\n    // Execute batch of promises in series\n    let position = 0;\n    let results: Array<T | undefined> = [];\n\n    while (position < keys.length) {\n      const keysBatch = keys.slice(position, position + batchSize);\n      const batch = keysBatch.map((keyToEncode) =>\n        this.getBigMapValueOrUndefined<T>(keyToEncode, id, schema, level)\n      );\n      results = [...results, ...(await Promise.all(batch))];\n      position += batchSize;\n    }\n\n    for (let i = 0; i < results.length; i++) {\n      bigMapValues.set(keys[i], results[i]);\n    }\n\n    return bigMapValues;\n  }\n\n  private async getBlockForRequest(keys: Array<BigMapKeyType>, block?: number) {\n    return keys.length === 1 || typeof block !== 'undefined'\n      ? block\n      : await this.context.readProvider.getBlockLevel('head');\n  }\n\n  private async getBigMapValueOrUndefined<T>(\n    keyToEncode: BigMapKeyType,\n    id: string,\n    schema: Schema,\n    level?: number\n  ) {\n    try {\n      return await this.getBigMapKeyByID<T>(id, keyToEncode, schema, level);\n    } catch (ex) {\n      if (ex instanceof HttpResponseError && ex.status === STATUS_CODE.NOT_FOUND) {\n        return;\n      } else {\n        throw ex;\n      }\n    }\n  }\n\n  /**\n   *\n   * @description Return a well formatted json object of a sapling state\n   *\n   * @param id Sapling state ID\n   * @param block optional block level to fetch the value from\n   *\n   */\n  async getSaplingDiffByID(id: string, block?: number) {\n    const saplingState = block\n      ? await this.context.readProvider.getSaplingDiffById({ id: id.toString() }, block)\n      : await this.context.readProvider.getSaplingDiffById({ id: id.toString() }, 'head');\n    return saplingState;\n  }\n\n  private async addRevealOperationIfNeeded(operation: RPCOperation, publicKeyHash: string) {\n    if (isOpRequireReveal(operation)) {\n      const ops: RPCOperation[] = [operation];\n      const publicKey = await this.signer.publicKey();\n      const estimateReveal = await this.estimator.reveal();\n      if (estimateReveal) {\n        const reveal: withKind<RevealParams, OpKind.REVEAL> = { kind: OpKind.REVEAL };\n        const estimatedReveal = await this.estimate(reveal, async () => estimateReveal);\n        ops.unshift(await createRevealOperation({ ...estimatedReveal }, publicKeyHash, publicKey));\n        return ops;\n      }\n    }\n    return operation;\n  }\n\n  /**\n   *\n   * @description Originate a new contract according to the script in parameters. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @warn You cannot specify storage and init at the same time (use init to pass the raw michelson representation of storage)\n   *\n   * @param OriginationOperation Originate operation parameter\n   */\n  async originate<TContract extends DefaultContractType = DefaultContractType>(\n    params: OriginateParams<ContractStorageType<TContract>>\n  ) {\n    const estimate = await this.estimate(params, this.estimator.originate.bind(this.estimator));\n\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const operation = await createOriginationOperation(\n      await this.context.parser.prepareCodeOrigination({\n        ...params,\n        ...estimate,\n      })\n    );\n    const ops = await this.addRevealOperationIfNeeded(operation, publicKeyHash);\n    const preparedOrigination = await this.prepareOperation({\n      operation: ops,\n      source: publicKeyHash,\n    });\n    const forgedOrigination = await this.forge(preparedOrigination);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(forgedOrigination);\n    return new OriginationOperation<TContract>(\n      hash,\n      operation,\n      forgedBytes,\n      opResponse,\n      context,\n      this\n    );\n  }\n\n  /**\n   *\n   * @description Set the delegate for a contract. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param SetDelegate operation parameter\n   */\n  async setDelegate(params: DelegateParams) {\n    if (params.source && validateAddress(params.source) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.source);\n    }\n    if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.delegate);\n    }\n\n    // Since babylon delegation source cannot smart contract\n    if (/kt1/i.test(params.source)) {\n      throw new InvalidDelegationSource(params.source);\n    }\n\n    const estimate = await this.estimate(params, this.estimator.setDelegate.bind(this.estimator));\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const operation = await createSetDelegateOperation({ ...params, ...estimate });\n    const sourceOrDefault = params.source || publicKeyHash;\n    const ops = await this.addRevealOperationIfNeeded(operation, publicKeyHash);\n    const prepared = await this.prepareOperation({\n      operation: ops,\n      source: sourceOrDefault,\n    });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new DelegateOperation(\n      hash,\n      operation,\n      sourceOrDefault,\n      forgedBytes,\n      opResponse,\n      context\n    );\n  }\n\n  /**\n   *\n   * @description Register the current address as delegate. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param RegisterDelegate operation parameter\n   */\n  async registerDelegate(params: RegisterDelegateParams) {\n    const estimate = await this.estimate(\n      params,\n      this.estimator.registerDelegate.bind(this.estimator)\n    );\n    const source = await this.signer.publicKeyHash();\n    const operation = await createRegisterDelegateOperation({ ...params, ...estimate }, source);\n    const ops = await this.addRevealOperationIfNeeded(operation, source);\n    const prepared = await this.prepareOperation({ operation: ops });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new DelegateOperation(hash, operation, source, forgedBytes, opResponse, context);\n  }\n\n  /**\n   *\n   * @description Transfer tz from current address to a specific address. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param Transfer operation parameter\n   */\n  async transfer(params: TransferParams) {\n    if (validateAddress(params.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.to);\n    }\n    if (params.source && validateAddress(params.source) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(params.source);\n    }\n\n    const publickKeyHash = await this.signer.publicKeyHash();\n    const estimate = await this.estimate(params, this.estimator.transfer.bind(this.estimator));\n    const operation = await createTransferOperation({\n      ...params,\n      ...estimate,\n    });\n    const source = params.source || publickKeyHash;\n    const ops = await this.addRevealOperationIfNeeded(operation, publickKeyHash);\n    const prepared = await this.prepareOperation({ operation: ops, source: params.source });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new TransactionOperation(hash, operation, source, forgedBytes, opResponse, context);\n  }\n\n  /**\n   *\n   * @description Reveal the current address. Will throw an error if the address is already revealed.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param RevealParams operation parameter\n   */\n  async reveal(params: RevealParams) {\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const estimateReveal = await this.estimator.reveal(params);\n    if (estimateReveal) {\n      const estimated = await this.estimate(params, async () => estimateReveal);\n      const operation = await createRevealOperation(\n        {\n          ...estimated,\n        },\n        publicKeyHash,\n        await this.signer.publicKey()\n      );\n      const prepared = await this.prepareOperation({ operation, source: publicKeyHash });\n      const opBytes = await this.forge(prepared);\n      const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n      return new RevealOperation(hash, operation, publicKeyHash, forgedBytes, opResponse, context);\n    } else {\n      throw new RevealOperationError(\n        `The publicKeyHash '${publicKeyHash}' has already been revealed.`\n      );\n    }\n  }\n\n  /**\n   *\n   * @description Register a Micheline expression in a global table of constants. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param params registerGlobalConstant operation parameter\n   */\n  async registerGlobalConstant(params: RegisterGlobalConstantParams) {\n    const publickKeyHash = await this.signer.publicKeyHash();\n    const estimate = await this.estimate(\n      params,\n      this.estimator.registerGlobalConstant.bind(this.estimator)\n    );\n    const operation = await createRegisterGlobalConstantOperation({\n      ...params,\n      ...estimate,\n    });\n    const ops = await this.addRevealOperationIfNeeded(operation, publickKeyHash);\n    const prepared = await this.prepareOperation({ operation: ops, source: publickKeyHash });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new RegisterGlobalConstantOperation(\n      hash,\n      operation,\n      publickKeyHash,\n      forgedBytes,\n      opResponse,\n      context\n    );\n  }\n\n  /**\n   *\n   * @description Originate a new tx rollup. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param TxRollupOriginateParams Originate rollup operation parameter\n   */\n  async txRollupOriginate(params?: TxRollupOriginateParams) {\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const estimate = await this.estimate(\n      params ? params : {},\n      this.estimator.txRollupOriginate.bind(this.estimator)\n    );\n    const operation = await createTxRollupOriginationOperation({\n      ...params,\n      ...estimate,\n    });\n    const ops = await this.addRevealOperationIfNeeded(operation, publicKeyHash);\n    const prepared = await this.prepareOperation({ operation: ops, source: publicKeyHash });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new TxRollupOriginationOperation(\n      hash,\n      operation,\n      publicKeyHash,\n      forgedBytes,\n      opResponse,\n      context\n    );\n  }\n\n  /**\n   *\n   * @description Submit a tx rollup batch. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param TxRollupBatchParams Batch tx rollup operation parameter\n   */\n  async txRollupSubmitBatch(params: TxRollupBatchParams) {\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const estimate = await this.estimate(\n      params,\n      this.estimator.txRollupSubmitBatch.bind(this.estimator)\n    );\n    const operation = await createTxRollupBatchOperation({\n      ...params,\n      ...estimate,\n    });\n    const ops = await this.addRevealOperationIfNeeded(operation, publicKeyHash);\n    const prepared = await this.prepareOperation({ operation: ops, source: publicKeyHash });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new TxRollupBatchOperation(\n      hash,\n      operation,\n      publicKeyHash,\n      forgedBytes,\n      opResponse,\n      context\n    );\n  }\n\n  async at<T extends DefaultContractType = DefaultContractType>(\n    address: string,\n    contractAbstractionComposer: ContractAbstractionComposer<T> = (x) => x as any\n  ): Promise<T> {\n    if (validateContractAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidContractAddressError(address);\n    }\n    const rpc = this.context.withExtensions().rpc;\n    const readProvider = this.context.withExtensions().readProvider;\n    const script = await readProvider.getScript(address, 'head');\n    const entrypoints = await readProvider.getEntrypoints(address);\n    const abs = new ContractAbstraction(\n      address,\n      script,\n      this,\n      this,\n      entrypoints,\n      rpc,\n      readProvider\n    );\n    return contractAbstractionComposer(abs, this.context);\n  }\n\n  /**\n   *\n   * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch\n   *\n   * @returns A batch object from which we can add more operation or send a command to execute the batch\n   *\n   * @param params List of operation to batch together\n   */\n  batch(params?: ParamsWithKind[]) {\n    const batch = new OperationBatch(this.context, this.estimator);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n}\n\ntype ContractAbstractionComposer<T> = (\n  abs: ContractAbstraction<ContractProvider>,\n  context: Context\n) => T;\n","import { Context } from '../context';\nimport { ParserProvider } from './interface';\nimport { Expr, GlobalConstantHashAndValue, Parser, Prim, ProtocolID } from '@taquito/michel-codec';\nimport { OriginateParams } from '../operations/types';\nimport { InvalidInitParameter, InvalidCodeParameter } from '../contract/errors';\nimport { Schema } from '@taquito/michelson-encoder';\nimport { MichelsonV1Expression, MichelsonV1ExpressionBase } from '@taquito/rpc';\nimport { Protocols } from '../constants';\n\nexport class MichelCodecParser implements ParserProvider {\n  constructor(private context: Context) {}\n\n  private async getNextProto(): Promise<ProtocolID> {\n    if (!this.context.proto) {\n      const nextProto = await this.context.readProvider.getNextProtocol('head');\n      this.context.proto = nextProto as Protocols;\n    }\n    return this.context.proto as ProtocolID;\n  }\n\n  async parseScript(src: string): Promise<Expr[] | null> {\n    const parser = new Parser({ protocol: await this.getNextProto() });\n    return parser.parseScript(src);\n  }\n\n  async parseMichelineExpression(src: string): Promise<Expr | null> {\n    const parser = new Parser({ protocol: await this.getNextProto() });\n    return parser.parseMichelineExpression(src);\n  }\n\n  async parseJSON(src: object): Promise<Expr> {\n    const parser = new Parser({ protocol: await this.getNextProto() });\n    return parser.parseJSON(src);\n  }\n\n  async prepareCodeOrigination(params: OriginateParams): Promise<OriginateParams> {\n    const parsedParams = params;\n    parsedParams.code = await this.formatCodeParam(params.code);\n    if (params.init) {\n      parsedParams.init = await this.formatInitParam(params.init);\n    } else if (params.storage) {\n      const storageType = (parsedParams.code as Expr[]).find(\n        (p): p is Prim => 'prim' in p && p.prim === 'storage'\n      );\n      if (!storageType?.args) {\n        throw new InvalidCodeParameter(\n          'The storage section is missing from the script',\n          params.code\n        );\n      }\n      const schema = new Schema(storageType.args[0] as MichelsonV1Expression);\n      const globalconstantsHashAndValue = await this.findGlobalConstantsHashAndValue(schema);\n\n      if (Object.keys(globalconstantsHashAndValue).length !== 0) {\n        // If there are global constants in the storage part of the contract code,\n        // they need to be locally expanded in order to encode the storage arguments\n        const p = new Parser({ expandGlobalConstant: globalconstantsHashAndValue });\n        const storageTypeNoGlobalConst = p.parseJSON(storageType.args[0]);\n        const schemaNoGlobalConst = new Schema(storageTypeNoGlobalConst);\n        parsedParams.init = schemaNoGlobalConst.Encode(params.storage);\n      } else {\n        parsedParams.init = schema.Encode(params.storage);\n      }\n      delete parsedParams.storage;\n    }\n    return parsedParams;\n  }\n\n  private async formatCodeParam(code: string | object[]) {\n    let parsedCode: Expr[];\n    if (typeof code === 'string') {\n      const c = await this.parseScript(code);\n      if (c === null) {\n        throw new InvalidCodeParameter('Invalid code parameter', code);\n      }\n      parsedCode = c;\n    } else {\n      const c = await this.parseJSON(code);\n      const order = ['parameter', 'storage', 'code'];\n      // Ensure correct ordering for RPC\n      parsedCode = (c as Prim[]).sort((a, b) => order.indexOf(a.prim) - order.indexOf(b.prim));\n    }\n    return parsedCode;\n  }\n\n  private async formatInitParam(init: string | object) {\n    let parsedInit: Expr;\n    if (typeof init === 'string') {\n      const c = await this.parseMichelineExpression(init);\n      if (c === null) {\n        throw new InvalidInitParameter('Invalid init parameter', init);\n      }\n      parsedInit = c;\n    } else {\n      parsedInit = await this.parseJSON(init);\n    }\n    return parsedInit;\n  }\n\n  private async findGlobalConstantsHashAndValue(schema: Schema) {\n    const globalConstantTokens = schema.findToken('constant');\n    const globalConstantsHashAndValue: GlobalConstantHashAndValue = {};\n\n    if (globalConstantTokens.length !== 0) {\n      for (const token of globalConstantTokens) {\n        const tokenArgs = token.tokenVal.args;\n        if (tokenArgs) {\n          const expression = tokenArgs[0] as MichelsonV1ExpressionBase\n          if (expression.string) {\n            const hash: string = expression.string\n            const michelineValue = await this.context.globalConstantsProvider.getGlobalConstantByHash(\n              hash\n              );\n              Object.assign(globalConstantsHashAndValue, {\n                [hash]: michelineValue,\n            });\n          }\n        }\n      }\n    }\n    return globalConstantsHashAndValue;\n  }\n}","import { Packer } from './interface';\nimport { Context } from '../context';\nimport { PackDataParams, PackDataResponse } from '@taquito/rpc';\n\nexport class RpcPacker implements Packer {\n  constructor(private context: Context) {}\n  \n  async packData(data: PackDataParams): Promise<PackDataResponse> {\n    return this.context.rpc.packData(data);\n  }\n}\n","/**\n *  @category Error\n *  @description Error that indicates that a global constant does not exist\n */\nexport class GlobalConstantNotFound extends Error {\n  name = 'GlobalConstantNotFound';\n\n  constructor(public hash: string) {\n    super(\n      `Please load the value associated with the constant ${hash} using the loadGlobalConstant method of the DefaultGlobalConstantsProvider.`\n    );\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates the global constant provider not being configured under TezosToolkit\n */\nexport class UnconfiguredGlobalConstantsProviderError extends Error {\n  name = 'UnconfiguredGlobalConstantsProviderError';\n\n  constructor() {\n    super(\n      'No global constants provider has been configured. Please configure one by calling setGlobalConstantsProvider({globalConstantsProvider}) on your TezosToolkit instance.'\n    );\n  }\n}\n","import { Expr } from \"@taquito/michel-codec\";\nimport { UnconfiguredGlobalConstantsProviderError } from \"./error\";\nimport { GlobalConstantHash, GlobalConstantsProvider } from \"./interface-global-constants-provider\";\n\nexport class NoopGlobalConstantsProvider implements GlobalConstantsProvider {\n    async getGlobalConstantByHash(_hash: GlobalConstantHash): Promise<Expr> {\n        throw new UnconfiguredGlobalConstantsProviderError();\n    }\n}","import {\n  BlockResponse,\n  EntrypointsResponse,\n  MichelsonV1Expression,\n  SaplingDiffResponse,\n  ScriptedContracts,\n} from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { Context } from '../context';\nimport { BigMapQuery, BlockIdentifier, SaplingStateQuery, TzReadProvider } from './interface';\n\n/**\n * @description Converts calls from TzReadProvider into calls to the wrapped RpcClient in a format it can understand.\n */\nexport class RpcReadAdapter implements TzReadProvider {\n  constructor(private context: Context) {}\n\n  /**\n   * @description Access the balance of a contract.\n   * @param address address from which we want to retrieve the balance\n   * @param block from which we want to retrieve the balance\n   * @returns the balance in mutez\n   */\n  async getBalance(address: string, block: BlockIdentifier): Promise<BigNumber> {\n    return this.context.rpc.getBalance(address, { block: String(block) });\n  }\n\n  /**\n   * @description Access the delegate of a contract, if any.\n   * @param address contract address from which we want to retrieve the delegate (baker)\n   * @param block from which we want to retrieve the delegate\n   * @returns the public key hash of the delegate or null if no delegate\n   */\n  async getDelegate(address: string, block: BlockIdentifier): Promise<string | null> {\n    return this.context.rpc.getDelegate(address, { block: String(block) });\n  }\n\n  /**\n   * @description Access the next protocol hash\n   * @param block from which we want to retrieve the next protocol hash\n   */\n  async getNextProtocol(block: BlockIdentifier): Promise<string> {\n    const protocols = await this.context.rpc.getProtocols({ block: String(block) });\n    return protocols.next_protocol;\n  }\n\n  /**\n   * @description Access protocol constants used in Taquito\n   * @param block from which we want to retrieve the constants\n   */\n  async getProtocolConstants(block: BlockIdentifier): Promise<{\n    time_between_blocks?: BigNumber[];\n    minimal_block_delay?: BigNumber | undefined;\n    hard_gas_limit_per_operation: BigNumber;\n    hard_gas_limit_per_block: BigNumber;\n    hard_storage_limit_per_operation: BigNumber;\n    cost_per_byte: BigNumber;\n    tx_rollup_origination_size?: number;\n  }> {\n    const {\n      time_between_blocks,\n      minimal_block_delay,\n      hard_gas_limit_per_operation,\n      hard_gas_limit_per_block,\n      hard_storage_limit_per_operation,\n      cost_per_byte,\n      tx_rollup_origination_size,\n    } = await this.context.rpc.getConstants({ block: String(block) });\n    return {\n      time_between_blocks,\n      minimal_block_delay,\n      hard_gas_limit_per_operation,\n      hard_gas_limit_per_block,\n      hard_storage_limit_per_operation,\n      cost_per_byte,\n      tx_rollup_origination_size,\n    };\n  }\n\n  /**\n   * @description Access the script (code and storage) of a smart contract\n   * @param contract contract address from which we want to retrieve the script\n   * @param block from which we want to retrieve the storage value\n   * @returns Note: The code must be in the JSON format and not contain global constant\n   */\n  async getScript(contract: string, block: BlockIdentifier): Promise<ScriptedContracts> {\n    const { script } = await this.context.rpc.getContract(contract, { block: String(block) });\n    return script;\n  }\n\n  /**\n   * @description Access the storage value of a contract\n   * @param contract contract address from which we want to retrieve the storage\n   * @param block from which we want to retrieve the storage value\n   */\n  async getStorage(contract: string, block: BlockIdentifier): Promise<MichelsonV1Expression> {\n    return this.context.rpc.getStorage(contract, { block: String(block) });\n  }\n\n  /**\n   * @description Access the block hash\n   */\n  async getBlockHash(block: BlockIdentifier): Promise<string> {\n    const { hash } = await this.context.rpc.getBlockHeader({ block: String(block) });\n    return hash;\n  }\n\n  /**\n   * @description Access the block level\n   */\n  async getBlockLevel(block: BlockIdentifier): Promise<number> {\n    const { level } = await this.context.rpc.getBlockHeader({ block: String(block) });\n    return level;\n  }\n\n  /**\n   * @description Access the counter of an address\n   * @param pkh from which we want to retrieve the counter\n   * @param block from which we want to retrieve the counter\n   */\n  async getCounter(pkh: string, block: BlockIdentifier): Promise<string> {\n    const { counter } = await this.context.rpc.getContract(pkh, { block: String(block) });\n    return counter || '0';\n  }\n\n  /**\n   * @description Access the timestamp of a block\n   * @param block from which we want to retrieve the timestamp\n   * @returns date ISO format zero UTC offset (\"2022-01-19T22:37:07Z\")\n   */\n  async getBlockTimestamp(block: BlockIdentifier): Promise<string> {\n    const { timestamp } = await this.context.rpc.getBlockHeader({ block: String(block) });\n    return timestamp;\n  }\n\n  /**\n   * @description Access the value associated with a key in a big map.\n   * @param bigMapQuery Big Map ID and Expression hash to query (A b58check encoded Blake2b hash of the expression)\n   * @param block from which we want to retrieve the big map value\n   */\n  async getBigMapValue(\n    bigMapQuery: BigMapQuery,\n    block: BlockIdentifier\n  ): Promise<MichelsonV1Expression> {\n    return this.context.rpc.getBigMapExpr(bigMapQuery.id, bigMapQuery.expr, {\n      block: String(block),\n    });\n  }\n\n  /**\n   * @description Access the value associated with a sapling state ID.\n   * @param id Sapling state ID\n   * @param block from which we want to retrieve the sapling state\n   */\n  async getSaplingDiffById(\n    saplingStateQuery: SaplingStateQuery,\n    block: BlockIdentifier\n  ): Promise<SaplingDiffResponse> {\n    return this.context.rpc.getSaplingDiffById(saplingStateQuery.id, { block: String(block) });\n  }\n\n  /**\n   * @description Return the list of entrypoints of the contract\n   * @param contract address of the contract we want to get the entrypoints of\n   */\n  async getEntrypoints(contract: string): Promise<EntrypointsResponse> {\n    return this.context.rpc.getEntrypoints(contract);\n  }\n\n  /**\n   * @description Access the chain id\n   */\n  async getChainId(): Promise<string> {\n    return this.context.rpc.getChainId();\n  }\n\n  /**\n   * @description Indicate if an account is revealed\n   * @param publicKeyHash of the account\n   * @param block from which we want to know if the account is revealed\n   */\n  async isAccountRevealed(publicKeyHash: string, block: BlockIdentifier): Promise<boolean> {\n    const manager = await this.context.rpc.getManagerKey(publicKeyHash, { block: String(block) });\n    const haveManager = manager && typeof manager === 'object' ? !!manager.key : !!manager;\n    return haveManager;\n  }\n\n  /**\n   * @description Return all the information about a block\n   * @param block from which we want to retrieve the information\n   */\n  async getBlock(block: BlockIdentifier): Promise<BlockResponse> {\n    return this.context.rpc.getBlock({ block: String(block) });\n  }\n\n  /**\n   * @description Return a list of the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.\n   * @param block from which we want to retrieve the information\n   */\n  getLiveBlocks(block: BlockIdentifier): Promise<string[]> {\n    return this.context.rpc.getLiveBlocks({ block: String(block) });\n  }\n}\n","import {\n  OpFilter,\n  FilterExpression,\n  Filter,\n  OpHashFilter,\n  SourceFilter,\n  KindFilter,\n  DestinationFilter,\n  OperationContent,\n} from './interface';\n\nimport { InvalidFilterExpressionError } from '../error';\n\nconst opHashFilter = (op: OperationContent, filter: OpHashFilter) => op.hash === filter.opHash;\n\nconst sourceFilter = (x: OperationContent, filter: SourceFilter) => {\n  switch (x.kind) {\n    case 'endorsement':\n      return 'metadata' in x && x.metadata.delegate === filter.source;\n    case 'activate_account':\n      return 'metadata' in x && x.pkh === filter.source;\n    default:\n      return 'source' in x && x.source === filter.source;\n  }\n};\n\nconst kindFilter = (x: OperationContent, filter: KindFilter) =>\n  'kind' in x && x.kind === filter.kind;\n\nconst destinationFilter = (x: OperationContent, filter: DestinationFilter) => {\n  switch (x.kind) {\n    case 'delegation':\n      return x.delegate === filter.destination;\n    case 'origination':\n      if (\n        'metadata' in x &&\n        'operation_result' in x.metadata &&\n        'originated_contracts' in x.metadata.operation_result &&\n        Array.isArray(x.metadata.operation_result.originated_contracts)\n      ) {\n        return x.metadata.operation_result.originated_contracts.some(\n          (contract) => contract === filter.destination\n        );\n      }\n      break;\n    case 'transaction':\n      return x.destination === filter.destination;\n    default:\n      return false;\n  }\n};\n\nexport const evaluateOpFilter = (op: OperationContent, filter: OpFilter) => {\n  if ('opHash' in filter) {\n    return opHashFilter(op, filter);\n  } else if ('source' in filter) {\n    return sourceFilter(op, filter);\n  } else if ('kind' in filter) {\n    return kindFilter(op, filter);\n  } else if ('destination' in filter) {\n    return destinationFilter(op, filter);\n  }\n\n  return false;\n};\n\nexport const evaluateExpression = (op: OperationContent, exp: FilterExpression): boolean => {\n  if (Array.isArray(exp.and)) {\n    return exp.and.every((x: OpFilter | FilterExpression) => evaluateFilter(op, x));\n  } else if (Array.isArray(exp.or)) {\n    return exp.or.some((x: OpFilter | FilterExpression) => evaluateFilter(op, x));\n  } else {\n    throw new InvalidFilterExpressionError('Filter expression must contain either and/or property');\n  }\n};\n\nexport const evaluateFilter = (op: OperationContent, filter: Filter): boolean => {\n  const filters: OpFilter[] | FilterExpression[] = [];\n  if (!Array.isArray(filter)) {\n    filters.push(filter as any);\n  } else {\n    filters.push(...(filter as any));\n  }\n\n  return (filters as any[]).every((filterOrExp: OpFilter | FilterExpression) => {\n    if ('and' in filterOrExp || 'or' in filterOrExp) {\n      return evaluateExpression(op, filterOrExp);\n    } else {\n      return evaluateOpFilter(op, filterOrExp as OpFilter);\n    }\n  });\n};\n","/* eslint-disable no-dupe-class-members */\nimport { Observable, Subject, NEVER, OperatorFunction } from 'rxjs';\nimport { Subscription } from './interface';\nimport { takeUntil, tap, catchError, retry } from 'rxjs/operators';\n\n/**\n *  @category Error\n *  @description Error that indicates an unsupported event being passed or used\n */\nexport class UnsupportedEventError extends Error {\n  public name = 'UnsupportedEventError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\nexport class ObservableSubscription<T> implements Subscription<T> {\n  private errorListeners: Array<(error: Error) => void> = [];\n  private messageListeners: Array<(data: T) => void> = [];\n  private closeListeners: Array<() => void> = [];\n  private completed$ = new Subject();\n\n  constructor(\n    obs: Observable<T>,\n    private shouldRetry: boolean = false,\n    private operatorFunction: OperatorFunction<T, T> = retry<T>()\n  ) {\n    obs\n      .pipe(\n        takeUntil(this.completed$),\n        tap(\n          (data: T) => {\n            this.call(this.messageListeners, data);\n          },\n          (error) => {\n            this.call(this.errorListeners, error);\n          },\n          () => {\n            this.call(this.closeListeners);\n          }\n        ),\n        this.shouldRetry ? operatorFunction : tap(),\n        catchError(() => NEVER)\n      )\n      .subscribe();\n  }\n\n  private call<K>(listeners: Array<(val: K) => void>, value?: K) {\n    for (const l of listeners) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        l(value!);\n      } catch (ex) {\n        console.error(ex);\n      }\n    }\n  }\n\n  private remove(listeners: Array<any>, value: any) {\n    const idx = listeners.indexOf(value);\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    }\n  }\n\n  public on(type: 'error', cb: (error: Error) => void): void;\n  public on(type: 'data', cb: (data: T) => void): void;\n  public on(type: 'close', cb: () => void): void;\n\n  public on(type: 'data' | 'error' | 'close', cb: any): void {\n    switch (type) {\n      case 'data':\n        this.messageListeners.push(cb);\n        break;\n      case 'error':\n        this.errorListeners.push(cb);\n        break;\n      case 'close':\n        this.closeListeners.push(cb);\n        break;\n      default:\n        throw new UnsupportedEventError(`Trying to register on an unsupported event: ${type}`);\n    }\n  }\n\n  public off(type: 'error', cb: (error: Error) => void): void;\n  public off(type: 'data', cb: (data: T) => void): void;\n  public off(type: 'close', cb: () => void): void;\n\n  public off(type: 'data' | 'error' | 'close', cb: any): void {\n    switch (type) {\n      case 'data':\n        this.remove(this.messageListeners, cb);\n        break;\n      case 'error':\n        this.remove(this.errorListeners, cb);\n        break;\n      case 'close':\n        this.remove(this.closeListeners, cb);\n        break;\n      default:\n        throw new UnsupportedEventError(`Trying to unregister on an unsupported event: ${type}`);\n    }\n  }\n\n  public close() {\n    this.completed$.next();\n  }\n}\n","import { BlockResponse } from '@taquito/rpc';\nimport { BehaviorSubject, from, Observable, ObservableInput, OperatorFunction, timer } from 'rxjs';\nimport {\n  concatMap,\n  distinctUntilKeyChanged,\n  first,\n  pluck,\n  publish,\n  refCount,\n  retry,\n  switchMap,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { evaluateFilter } from './filters';\nimport { Filter, SubscribeProvider, Subscription, OperationContent } from './interface';\nimport { ObservableSubscription } from './observable-subscription';\nimport BigNumber from 'bignumber.js';\n\nexport interface PollingSubscribeProviderConfig {\n  pollingIntervalMilliseconds?: number;\n  shouldObservableSubscriptionRetry: boolean;\n  observableSubscriptionRetryFunction: OperatorFunction<any, any>;\n}\n\nexport const defaultConfigStreamer: PollingSubscribeProviderConfig = {\n  shouldObservableSubscriptionRetry: false,\n  observableSubscriptionRetryFunction: retry(),\n};\n\nconst getLastBlock = (context: Context) => {\n  return from(context.rpc.getBlock()).pipe(first());\n};\n\nconst applyFilter = (filter: Filter) =>\n  concatMap<BlockResponse, ObservableInput<OperationContent>>((block) => {\n    return new Observable<OperationContent>((sub) => {\n      for (const ops of block.operations) {\n        for (const op of ops) {\n          for (const content of op.contents) {\n            if (evaluateFilter({ hash: op.hash, ...content }, filter)) {\n              sub.next({ hash: op.hash, ...content });\n            }\n          }\n        }\n      }\n      sub.complete();\n    });\n  });\n\nexport class PollingSubscribeProvider implements SubscribeProvider {\n  private _config$: BehaviorSubject<PollingSubscribeProviderConfig>;\n  // Map the changing polling interval to a timer, which will automatically terminate the previous timer when the next one starts.\n  private timer$: Observable<number>;\n\n  private newBlock$: Observable<BlockResponse>;\n\n  constructor(private context: Context, config: Partial<PollingSubscribeProviderConfig> = {}) {\n    this._config$ = new BehaviorSubject({\n      ...defaultConfigStreamer,\n      ...config,\n    });\n    this.timer$ = this._config$.pipe(\n      pluck('pollingIntervalMilliseconds'),\n      switchMap((pollingIntervalMilliseconds) => {\n        if (!pollingIntervalMilliseconds) {\n          return from(this.getConfirmationPollingInterval()).pipe(\n            switchMap((interval) => {\n              return timer(0, interval);\n            })\n          );\n        } else {\n          return timer(0, pollingIntervalMilliseconds);\n        }\n      })\n    );\n    this.newBlock$ = this.timer$.pipe(\n      switchMap(() => getLastBlock(this.context)),\n      distinctUntilKeyChanged('hash'),\n      publish(),\n      refCount()\n    );\n  }\n\n  get config() {\n    return this._config$.getValue();\n  }\n\n  private async getConfirmationPollingInterval() {\n    if (!this.config.pollingIntervalMilliseconds) {\n      const defaultIntervalTestnetsMainnet = 5000;\n      const defaultIntervalSandbox = 1000;\n      try {\n        const constants = await this.context.readProvider.getProtocolConstants('head');\n        const blockTime = constants.minimal_block_delay\n          ? constants.minimal_block_delay.multipliedBy(1000)\n          : constants.time_between_blocks\n          ? constants.time_between_blocks[0].multipliedBy(1000)\n          : new BigNumber(defaultIntervalTestnetsMainnet);\n        const confirmationPollingInterval = blockTime.dividedBy(3);\n\n        this.config.pollingIntervalMilliseconds =\n          confirmationPollingInterval.toNumber() === 0\n            ? defaultIntervalSandbox\n            : confirmationPollingInterval.toNumber();\n      } catch (exception) {\n        return defaultIntervalTestnetsMainnet;\n      }\n    }\n    return this.config.pollingIntervalMilliseconds;\n  }\n\n  subscribeBlock(_filter: 'head'): Subscription<BlockResponse> {\n    return new ObservableSubscription(\n      this.newBlock$,\n      this.config.shouldObservableSubscriptionRetry,\n      this.config.observableSubscriptionRetryFunction\n    );\n  }\n\n  subscribe(_filter: 'head'): Subscription<string> {\n    return new ObservableSubscription(\n      this.newBlock$.pipe(pluck('hash')),\n      this.config.shouldObservableSubscriptionRetry,\n      this.config.observableSubscriptionRetryFunction\n    );\n  }\n\n  subscribeOperation(filter: Filter): Subscription<OperationContent> {\n    return new ObservableSubscription(\n      this.newBlock$.pipe(applyFilter(filter)),\n      this.config.shouldObservableSubscriptionRetry,\n      this.config.observableSubscriptionRetryFunction\n    );\n  }\n}\n","import {\n  LocalForger,\n  Forger,\n  ForgeParams,\n  ForgeResponse,\n  ProtocolsHash,\n} from '@taquito/local-forging';\nimport { Protocols } from '../constants';\nimport { Context } from '../context';\n\nexport class TaquitoLocalForger implements Forger {\n  constructor(private context: Context) {}\n\n  private async getNextProto(): Promise<ProtocolsHash> {\n    if (!this.context.proto) {\n      const nextProto = await this.context.readProvider.getNextProtocol('head');\n      this.context.proto = nextProto as Protocols;\n    }\n    return this.context.proto as unknown as ProtocolsHash;\n  }\n\n  async forge({ branch, contents }: ForgeParams): Promise<ForgeResponse> {\n    const forger = new LocalForger(await this.getNextProto());\n    return forger.forge({ branch, contents });\n  }\n}\n","import { RpcClient, RpcClientInterface } from '@taquito/rpc';\nimport { Protocols } from './constants';\nimport { Forger } from '@taquito/local-forging';\nimport { Injector } from './injector/interface';\nimport { RpcInjector } from './injector/rpc-injector';\nimport { Signer } from './signer/interface';\nimport { NoopSigner } from './signer/noop';\nimport { OperationFactory } from './wallet/operation-factory';\nimport { RpcTzProvider } from './tz/rpc-tz-provider';\nimport { RPCEstimateProvider } from './estimate/rpc-estimate-provider';\nimport { RpcContractProvider } from './contract/rpc-contract-provider';\nimport { RPCBatchProvider } from './batch/rpc-batch-provider';\n\nimport { Wallet, LegacyWalletProvider, WalletProvider } from './wallet';\nimport { ParserProvider } from './parser/interface';\nimport { MichelCodecParser } from './parser/michel-codec-parser';\nimport { Packer } from './packer/interface';\nimport { RpcPacker } from './packer/rpc-packer';\nimport { BehaviorSubject } from 'rxjs';\nimport { GlobalConstantsProvider } from './global-constants/interface-global-constants-provider';\nimport { NoopGlobalConstantsProvider } from './global-constants/noop-global-constants-provider';\nimport { TzReadProvider } from './read-provider/interface';\nimport { RpcReadAdapter } from './read-provider/rpc-read-adapter';\nimport { SubscribeProvider } from './subscribe/interface';\nimport { PollingSubscribeProvider } from './subscribe/polling-subcribe-provider';\nimport { TaquitoLocalForger } from './forger/taquito-local-forger';\n\nexport interface TaquitoProvider<T, K extends Array<any>> {\n  new (context: Context, ...rest: K): T;\n}\n\nexport interface ConfigConfirmation {\n  confirmationPollingTimeoutSecond: number;\n  defaultConfirmationCount: number;\n}\n\nexport const defaultConfigConfirmation: ConfigConfirmation = {\n  defaultConfirmationCount: 1,\n  confirmationPollingTimeoutSecond: 180,\n};\n\n/**\n * @description Encapsulate common service used throughout different part of the library\n */\nexport class Context {\n  private _rpcClient: RpcClientInterface;\n  private _forger: Forger;\n  private _parser: ParserProvider;\n  private _injector: Injector;\n  private _walletProvider: WalletProvider;\n  public readonly operationFactory: OperationFactory;\n  private _packer: Packer;\n  private providerDecorator: Array<(context: Context) => Context> = [];\n  private _globalConstantsProvider: GlobalConstantsProvider;\n  private _readProvider: TzReadProvider;\n  private _stream: SubscribeProvider;\n  public readonly tz = new RpcTzProvider(this);\n  public readonly estimate = new RPCEstimateProvider(this);\n  public readonly contract = new RpcContractProvider(this, this.estimate);\n  public readonly batch = new RPCBatchProvider(this, this.estimate);\n  public readonly wallet = new Wallet(this);\n\n  constructor(\n    private _rpc: RpcClientInterface | string,\n    private _signer: Signer = new NoopSigner(),\n    private _proto?: Protocols,\n    public readonly _config = new BehaviorSubject({\n      ...defaultConfigConfirmation,\n    }),\n    forger?: Forger,\n    injector?: Injector,\n    packer?: Packer,\n    wallet?: WalletProvider,\n    parser?: ParserProvider,\n    globalConstantsProvider?: GlobalConstantsProvider,\n    readProvider?: TzReadProvider,\n    stream?: SubscribeProvider\n  ) {\n    if (typeof this._rpc === 'string') {\n      this._rpcClient = new RpcClient(this._rpc);\n    } else {\n      this._rpcClient = this._rpc;\n    }\n    this._forger = forger ? forger : new TaquitoLocalForger(this);\n    this._injector = injector ? injector : new RpcInjector(this);\n    this.operationFactory = new OperationFactory(this);\n    this._walletProvider = wallet ? wallet : new LegacyWalletProvider(this);\n    this._parser = parser ? parser : new MichelCodecParser(this);\n    this._packer = packer ? packer : new RpcPacker(this);\n    this._globalConstantsProvider = globalConstantsProvider\n      ? globalConstantsProvider\n      : new NoopGlobalConstantsProvider();\n    this._readProvider = readProvider ? readProvider : new RpcReadAdapter(this);\n    this._stream = stream ? stream : new PollingSubscribeProvider(this);\n  }\n\n  get config(): ConfigConfirmation {\n    return this._config.getValue();\n  }\n\n  set config(value: ConfigConfirmation) {\n    this._config.next({\n      ...value,\n    });\n  }\n\n  setPartialConfig(value: Partial<ConfigConfirmation>) {\n    this._config.next({\n      ...this._config.getValue(),\n      ...value,\n    });\n  }\n\n  get rpc(): RpcClientInterface {\n    return this._rpcClient;\n  }\n\n  set rpc(value: RpcClientInterface) {\n    this._rpcClient = value;\n  }\n\n  get injector() {\n    return this._injector;\n  }\n\n  set injector(value: Injector) {\n    this._injector = value;\n  }\n\n  get forger() {\n    return this._forger;\n  }\n\n  set forger(value: Forger) {\n    this._forger = value;\n  }\n\n  get signer() {\n    return this._signer;\n  }\n\n  set signer(value: Signer) {\n    this._signer = value;\n  }\n\n  get walletProvider() {\n    return this._walletProvider;\n  }\n\n  set walletProvider(value: WalletProvider) {\n    this._walletProvider = value;\n  }\n\n  set proto(value: Protocols | undefined) {\n    this._proto = value;\n  }\n\n  get proto() {\n    return this._proto;\n  }\n\n  get parser() {\n    return this._parser;\n  }\n\n  set parser(value: ParserProvider) {\n    this._parser = value;\n  }\n\n  get packer() {\n    return this._packer;\n  }\n\n  set packer(value: Packer) {\n    this._packer = value;\n  }\n\n  get globalConstantsProvider() {\n    return this._globalConstantsProvider;\n  }\n\n  set globalConstantsProvider(value: GlobalConstantsProvider) {\n    this._globalConstantsProvider = value;\n  }\n\n  get readProvider() {\n    return this._readProvider;\n  }\n\n  set readProvider(value: TzReadProvider) {\n    this._readProvider = value;\n  }\n\n  get stream() {\n    return this._stream;\n  }\n\n  set stream(value: SubscribeProvider) {\n    this._stream = value;\n  }\n\n  async isAnyProtocolActive(protocol: string[] = []) {\n    if (this._proto) {\n      return protocol.includes(this._proto);\n    } else {\n      const next_protocol = await this.readProvider.getNextProtocol('head');\n      return protocol.includes(next_protocol);\n    }\n  }\n\n  isAnySignerConfigured() {\n    return !(this.signer instanceof NoopSigner);\n  }\n\n  /**\n   * @description Create a copy of the current context. Useful when you have long running operation and you do not want a context change to affect the operation\n   */\n  clone(): Context {\n    return new Context(\n      this.rpc,\n      this.signer,\n      this.proto,\n      this._config,\n      this.forger,\n      this._injector,\n      this.packer,\n      this._walletProvider,\n      this._parser,\n      this._globalConstantsProvider,\n      this._readProvider,\n      this._stream\n    );\n  }\n\n  /**\n   * @description Allows extensions set on the TezosToolkit to inject logic into the context\n   */\n  registerProviderDecorator(fx: (context: Context) => Context) {\n    this.providerDecorator.push(fx);\n  }\n\n  /**\n   * @description Applies the decorators on a cloned instance of the context and returned this cloned instance.\n   * The decorators are functions that inject logic into the context.\n   * They are provided by the extensions set on the TezosToolkit by calling the registerProviderDecorator method.\n   */\n  withExtensions = (): Context => {\n    let clonedContext = this.clone();\n    this.providerDecorator.forEach((decorator) => {\n      clonedContext = decorator(clonedContext);\n    });\n\n    return clonedContext;\n  };\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"6d90b3d5e616a6e9b9ad9dd8453b5068e7396fff\",\n    \"version\": \"13.0.1\"\n};\n","import { Forger, ForgeParams, ForgeResponse } from '@taquito/local-forging';\n\n/**\n *  @category Error\n *  @description Error that indicates a value mismatch when forging\n */\nexport class ForgingMismatchError extends Error {\n  name = 'ForgingMismatchError';\n  constructor(public results: string[]) {\n    super('Forging mismatch error');\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a forger not being specified in TezosToolkit\n */\nexport class UnspecifiedForgerError extends Error {\n  name = 'UnspecifiedForgerError';\n  constructor() {\n    super('At least one forger must be specified');\n  }\n}\n\nexport class CompositeForger implements Forger {\n  constructor(private forgers: Forger[]) {\n    if (forgers.length === 0) {\n      throw new UnspecifiedForgerError();\n    }\n  }\n\n  async forge({ branch, contents }: ForgeParams): Promise<ForgeResponse> {\n    const results = await Promise.all(\n      this.forgers.map((forger) => {\n        return forger.forge({ branch, contents });\n      })\n    );\n\n    if (results.length === 0) {\n      throw new UnspecifiedForgerError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    let lastResult: string = results.pop()!; // Assumed to be more than one since we\n    while (results.length) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const currentResult = results.pop()!;\n\n      if (currentResult !== lastResult) {\n        throw new ForgingMismatchError([lastResult, currentResult]);\n      }\n      lastResult = currentResult;\n    }\n\n    return lastResult;\n  }\n}\n","import { Forger, ForgeParams, ForgeResponse } from '@taquito/local-forging';\nimport { Context } from '../context';\n\nexport class RpcForger implements Forger {\n  constructor(private context: Context) {}\n\n  forge({ branch, contents }: ForgeParams): Promise<ForgeResponse> {\n    return this.context.rpc.forgeOperations({ branch, contents });\n  }\n}\n","import { OriginateParams } from \"../operations/types\";\nimport { ParserProvider } from \"./interface\";\n\nexport class NoopParser implements ParserProvider {\n    async prepareCodeOrigination(params: OriginateParams): Promise<OriginateParams> {\n        return params;\n    }\n}","import { Packer } from './interface';\nimport { packDataBytes, MichelsonData, MichelsonType } from '@taquito/michel-codec'\nimport { PackDataResponse, PackDataParams } from '@taquito/rpc';\n\nexport class MichelCodecPacker implements Packer {\n\n  async packData(data: PackDataParams): Promise<PackDataResponse> {\n    const { bytes } = packDataBytes(data.data as MichelsonData, data.type as MichelsonType);\n    return { packed: bytes }\n  }\n}\n","import { GlobalConstantHashAndValue } from '@taquito/michel-codec';\nimport { GlobalConstantNotFound } from './error';\nimport { GlobalConstantHash, GlobalConstantsProvider } from './interface-global-constants-provider';\n\nexport class DefaultGlobalConstantsProvider implements GlobalConstantsProvider {\n  private _globalConstantsLibrary: GlobalConstantHashAndValue = {};\n\n  /**\n   *\n   * @description Allows to load global constant hashes and their corresponding Michelson JSON values\n   */\n  loadGlobalConstant(globalConstant: GlobalConstantHashAndValue) {\n    for (const hash in globalConstant) {\n      Object.assign(this._globalConstantsLibrary, {\n        [hash]: globalConstant[hash],\n      });\n    }\n  }\n\n  /**\n   *\n   * @description Retrieve the Michelson value of a global constant based on its hash\n   *\n   * @param hash a string representing the global constant hash\n   * @returns Expr, the JSON Michelson value\n   */\n  async getGlobalConstantByHash(hash: GlobalConstantHash) {\n    const value = this._globalConstantsLibrary[hash];\n    if (!value) {\n      throw new GlobalConstantNotFound(hash);\n    }\n    return value;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @taquito/taquito\n */\n\nimport { RpcClient, RpcClientInterface } from '@taquito/rpc';\nimport { Forger } from '@taquito/local-forging';\nimport { RPCBatchProvider } from './batch/rpc-batch-provider';\nimport { Protocols } from './constants';\nimport { ConfigConfirmation, Context, TaquitoProvider } from './context';\nimport { ContractProvider } from './contract/interface';\nimport { Extension } from './extension/extension';\nimport { format } from './format';\nimport { GlobalConstantsProvider } from './global-constants/interface-global-constants-provider';\nimport { NoopGlobalConstantsProvider } from './global-constants/noop-global-constants-provider';\nimport { Packer } from './packer/interface';\nimport { RpcPacker } from './packer/rpc-packer';\nimport { TzReadProvider } from './read-provider/interface';\nimport { RpcReadAdapter } from './read-provider/rpc-read-adapter';\nimport { Signer } from './signer/interface';\nimport { NoopSigner } from './signer/noop';\nimport { SubscribeProvider } from './subscribe/interface';\nimport { PollingSubscribeProvider } from './subscribe/polling-subcribe-provider';\nimport { TzProvider } from './tz/interface';\nimport { VERSION } from './version';\nimport { LegacyWalletProvider, Wallet, WalletProvider } from './wallet';\nimport { OperationFactory } from './wallet/operation-factory';\nimport { TaquitoLocalForger } from './forger/taquito-local-forger';\nimport { EstimationProvider } from './estimate/estimate-provider-interface';\n\nexport { MichelsonMap, UnitValue } from '@taquito/michelson-encoder';\nexport { Forger, ForgeParams, ForgeResponse } from '@taquito/local-forging';\nexport * from './constants';\nexport * from './context';\nexport { TaquitoProvider } from './context';\nexport * from './contract';\nexport * from './contract/big-map';\nexport { CompositeForger } from './forger/composite-forger';\nexport { RpcForger } from './forger/rpc-forger';\nexport * from './operations';\nexport { OperationBatch } from './batch/rpc-batch-provider';\nexport * from './signer/interface';\nexport * from './subscribe/interface';\nexport { SubscribeProvider } from './subscribe/interface';\nexport { PollingSubscribeProvider } from './subscribe/polling-subcribe-provider';\nexport { ObservableSubscription } from './subscribe/observable-subscription';\nexport * from './tz/interface';\nexport * from './wallet';\nexport { Extension } from './extension/extension';\nexport * from './parser/interface';\nexport * from './parser/michel-codec-parser';\nexport * from './parser/noop-parser';\nexport * from './packer/interface';\nexport * from './packer/michel-codec-packer';\nexport * from './packer/rpc-packer';\nexport * from './global-constants/default-global-constants-provider';\nexport * from './global-constants/error';\nexport * from './global-constants/interface-global-constants-provider';\nexport {\n  BigMapQuery,\n  SaplingStateQuery,\n  BlockIdentifier,\n  TzReadProvider,\n} from './read-provider/interface';\nexport { RpcReadAdapter } from './read-provider/rpc-read-adapter';\nexport * from './estimate';\nexport { TaquitoLocalForger } from './forger/taquito-local-forger';\n\nexport interface SetProviderOptions {\n  forger?: Forger;\n  wallet?: WalletProvider;\n  rpc?: string | RpcClientInterface;\n  readProvider?: TzReadProvider;\n  stream?: string | SubscribeProvider;\n  signer?: Signer;\n  protocol?: Protocols;\n  config?: Partial<ConfigConfirmation>;\n  packer?: Packer;\n  globalConstantsProvider?: GlobalConstantsProvider;\n}\n\nexport interface VersionInfo {\n  commitHash: string;\n  version: string;\n}\n\n/**\n * @description Facade class that surfaces all of the libraries capability and allow it's configuration\n *\n * @param _rpc The RPC server to use\n */\nexport class TezosToolkit {\n  private _options: SetProviderOptions = {};\n  private _rpcClient: RpcClientInterface;\n  private _wallet: Wallet;\n  private _context: Context;\n  /**\n   * @deprecated TezosToolkit.batch has been deprecated in favor of TezosToolkit.contract.batch\n   *\n   */\n  public batch: RPCBatchProvider['batch'];\n\n  public readonly format = format;\n\n  constructor(private _rpc: RpcClientInterface | string) {\n    if (typeof this._rpc === 'string') {\n      this._rpcClient = new RpcClient(this._rpc);\n    } else {\n      this._rpcClient = this._rpc;\n    }\n    this._context = new Context(_rpc);\n    this._wallet = new Wallet(this._context);\n    this.setProvider({ rpc: this._rpcClient });\n    this.batch = this._context.batch.batch.bind(this._context.batch);\n  }\n\n  /**\n   * @description Sets configuration on the Tezos Taquito instance. Allows user to choose which signer, rpc client, rpc url, forger and so forth\n   *\n   * @param options rpc url or rpcClient to use to interact with the Tezos network\n   *\n   * @example Tezos.setProvider({rpc: 'https://mainnet.api.tez.ie/', signer: new InMemorySigner.fromSecretKey(“edsk...”)})\n   * @example Tezos.setProvider({ config: { confirmationPollingTimeoutSecond: 300 }})\n   *\n   */\n\n  setProvider({\n    rpc,\n    stream,\n    signer,\n    protocol,\n    config,\n    forger,\n    wallet,\n    packer,\n    globalConstantsProvider,\n    readProvider,\n  }: SetProviderOptions) {\n    this.setRpcProvider(rpc);\n    this.setStreamProvider(stream);\n    this.setSignerProvider(signer);\n    this.setForgerProvider(forger);\n    this.setWalletProvider(wallet);\n    this.setPackerProvider(packer);\n    this.setGlobalConstantsProvider(globalConstantsProvider);\n    this.setReadProvider(readProvider);\n\n    this._context.proto = protocol;\n    if (config) {\n      this._context.setPartialConfig(config);\n    }\n  }\n\n  /**\n   * @description Sets signer provider on the Tezos Taquito instance.\n   *\n   * @param options signer to use to interact with the Tezos network\n   *\n   * @example Tezos.setSignerProvider(new InMemorySigner.fromSecretKey('edsk...'))\n   *\n   */\n  setSignerProvider(signer?: SetProviderOptions['signer']) {\n    if (!this._options.signer && typeof signer === 'undefined') {\n      this._context.signer = new NoopSigner();\n      this._options.signer = signer;\n    } else if (typeof signer !== 'undefined') {\n      this._context.signer = signer;\n      this._options.signer = signer;\n    }\n  }\n\n  /**\n   * @description Sets rpc provider on the Tezos Taquito instance\n   *\n   * @param options rpc url or rpcClient to use to interact with the Tezos network\n   *\n   * @example Tezos.setRpcProvider('https://mainnet.api.tez.ie/')\n   *\n   */\n  setRpcProvider(rpc?: SetProviderOptions['rpc']) {\n    if (typeof rpc === 'string') {\n      this._rpcClient = new RpcClient(rpc);\n    } else if (rpc === undefined) {\n      // do nothing, RPC is required in the constructor, do not override it\n    } else {\n      this._rpcClient = rpc;\n    }\n    this._options.rpc = this._rpcClient;\n    this._context.rpc = this._rpcClient;\n  }\n\n  /**\n   * @description Sets forger provider on the Tezos Taquito instance\n   * The `LocalForger` from `@taquito/local-forging` is set by default.\n   *\n   * @param options forger to use to interact with the Tezos network\n   *\n   * @example Tezos.setForgerProvider(this.getFactory(RpcForger)())\n   *\n   */\n  setForgerProvider(forger?: SetProviderOptions['forger']) {\n    if (typeof forger !== 'undefined') {\n      this._options.forger = forger;\n      this._context.forger = forger;\n    } else if (this._options.forger === undefined) {\n      const f = this.getFactory(TaquitoLocalForger)();\n      this._options.forger = f;\n      this._context.forger = f;\n    }\n  }\n\n  /**\n   * @description Sets stream provider on the Tezos Taquito instance\n   *\n   * @param options stream to use to interact with the Tezos network\n   *\n   * @example Tezos.setStreamProvider(...)\n   *\n   */\n  setStreamProvider(stream?: SetProviderOptions['stream']) {\n    if (typeof stream === 'string') {\n      const s = new PollingSubscribeProvider(new Context(new RpcClient(stream)));\n      this._options.stream = s;\n      this._context.stream = s;\n    } else if (typeof stream !== 'undefined') {\n      this._options.stream = stream;\n      this._context.stream = stream;\n    } else if (this._options.stream === undefined) {\n      const s = this.getFactory(PollingSubscribeProvider)();\n      this._options.stream = s;\n      this._context.stream = s;\n    }\n  }\n\n  /**\n   * @description Sets wallet provider on the Tezos Taquito instance\n   *\n   * @param options wallet to use to interact with the Tezos network\n   *\n   * @example Tezos.setWalletProvider(...)\n   *\n   */\n  setWalletProvider(wallet?: SetProviderOptions['wallet']) {\n    if (!this._options.wallet && typeof wallet === 'undefined') {\n      const w = this.getFactory(LegacyWalletProvider)();\n      this._options.wallet = w;\n      this._context.walletProvider = w;\n    } else if (typeof wallet !== 'undefined') {\n      this._options.wallet = wallet;\n      this._context.walletProvider = wallet;\n    }\n  }\n\n  /**\n   * @description Sets Packer provider on the Tezos Taquito instance\n   *\n   * @param options packer to use to interact with the Tezos network\n   *\n   * @example Tezos.setPackerProvider(new MichelCodecPacker())\n   *\n   */\n  setPackerProvider(packer?: SetProviderOptions['packer']) {\n    if (!this._options.packer && typeof packer === 'undefined') {\n      const p = this.getFactory(RpcPacker)();\n      this._context.packer = p;\n      this._options.packer = p;\n    } else if (typeof packer !== 'undefined') {\n      this._context.packer = packer;\n      this._options.packer = packer;\n    }\n  }\n\n  /**\n   * @description Sets global constants provider on the Tezos Taquito instance\n   *\n   * @param options globalConstantsProvider to use to interact with the Tezos network\n   *\n   * @example\n   * ```\n   * const globalConst = new DefaultGlobalConstantsProvider();\n   * globalConst.loadGlobalConstant({\n   *  \"expruu5BTdW7ajqJ9XPTF3kgcV78pRiaBW3Gq31mgp3WSYjjUBYxre\": { prim: \"int\" },\n   *  // ...\n   * })\n   * Tezos.setGlobalConstantsProvider(globalConst);\n   * ```\n   *\n   */\n  setGlobalConstantsProvider(\n    globalConstantsProvider?: SetProviderOptions['globalConstantsProvider']\n  ) {\n    if (!this._options.globalConstantsProvider && typeof globalConstantsProvider === 'undefined') {\n      const g = new NoopGlobalConstantsProvider();\n      this._context.globalConstantsProvider = g;\n      this._options.globalConstantsProvider = g;\n    } else if (typeof globalConstantsProvider !== 'undefined') {\n      this._context.globalConstantsProvider = globalConstantsProvider;\n      this._options.globalConstantsProvider = globalConstantsProvider;\n    }\n  }\n\n  /**\n   * @description Sets read provider on the Tezos Taquito instance\n   * By default reads are done from the RPC usign the RpcReadAdapter class, this can be overridden to read from an indexer that implements the TzReadProvider interface\n   *\n   * @param options TzReadProvider to use to interact with the Tezos network\n   *\n   */\n  setReadProvider(readProvider?: SetProviderOptions['readProvider']) {\n    const readP =\n      typeof readProvider === 'undefined' ? this.getFactory(RpcReadAdapter)() : readProvider;\n    this._options.readProvider = readP;\n    this._context.readProvider = readP;\n  }\n\n  /**\n   * @description Provide access to tezos account management\n   */\n  get tz(): TzProvider {\n    return this._context.tz;\n  }\n\n  /**\n   * @description Provide access to smart contract utilities\n   */\n  get contract(): ContractProvider {\n    return this._context.contract;\n  }\n\n  get wallet(): Wallet {\n    return this._wallet;\n  }\n\n  get operation(): OperationFactory {\n    return this._context.operationFactory;\n  }\n\n  /**\n   * @description Provide access to operation estimation utilities\n   */\n  get estimate(): EstimationProvider {\n    return this._context.estimate;\n  }\n\n  /**\n   * @description Provide access to streaming utilities backed by an streamer implementation\n   */\n  get stream(): SubscribeProvider {\n    return this._context.stream;\n  }\n\n  /**\n   * @description Provide access to the currently used rpc client\n   */\n  get rpc(): RpcClientInterface {\n    return this._context.rpc;\n  }\n\n  /**\n   * @description Provide access to the currently used signer\n   */\n  get signer() {\n    return this._context.signer;\n  }\n\n  /**\n   * @description Provide access to the currently used globalConstantsProvider\n   */\n  get globalConstants() {\n    return this._context.globalConstantsProvider;\n  }\n\n  /**\n   * @description Allow to add a module to the TezosToolkit instance. This method adds the appropriate Providers(s) required by the module to the internal context.\n   *\n   * @param module extension to add to the TezosToolkit instance\n   *\n   * @example Tezos.addExtension(new Tzip16Module());\n   */\n  addExtension(module: Extension | Extension[]) {\n    if (Array.isArray(module)) {\n      module.forEach((extension) => extension.configureContext(this._context));\n    } else {\n      module.configureContext(this._context);\n    }\n  }\n\n  getFactory<T, K extends Array<any>>(ctor: TaquitoProvider<T, K>) {\n    return (...args: K) => {\n      return new ctor(this._context, ...args);\n    };\n  }\n\n  /**\n   * @description Gets an object containing the version of Taquito library and git sha of the commit this library is compiled from\n   */\n  getVersionInfo(): VersionInfo {\n    return VERSION;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}