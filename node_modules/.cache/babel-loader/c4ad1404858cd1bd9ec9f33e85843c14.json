{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable no-console */\nimport { getDebugEnabled } from '../debug';\n/**\n * The logger that is used internally\n */\n\nexport class InternalLogger {\n  constructor() {}\n\n  debug(name, method) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    this._log('debug', name, method, args);\n  }\n\n  log(name, method) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    this._log('log', name, method, args);\n  }\n\n  warn(name, method) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      args[_key3 - 2] = arguments[_key3];\n    }\n\n    this._log('warn', name, method, args);\n  }\n\n  error(name, method) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n      args[_key4 - 2] = arguments[_key4];\n    }\n\n    this._log('error', name, method, args);\n  }\n\n  _log(type, name, method) {\n    let args = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    if (!getDebugEnabled()) {\n      return;\n    }\n\n    let groupText = `[BEACON] ${new Date().toISOString()} [${name}](${method})`;\n    let data = args;\n\n    if (args[0] && typeof args[0] === 'string') {\n      groupText += ` ${args[0]}`;\n      data = args.slice(1);\n    }\n\n    switch (type) {\n      case 'error':\n        console.group(groupText);\n        console.error(...data);\n        break;\n\n      case 'warn':\n        console.group(groupText);\n        console.warn(...data);\n        break;\n\n      case 'debug':\n        console.groupCollapsed(groupText);\n        console.debug(...data);\n        break;\n\n      default:\n        console.group(groupText);\n        console.log(...data);\n    }\n\n    console.groupEnd(); // echo.group(echo.asWarning(`[BEACON] ${message}`))\n    // echo.log(echo.asWarning(`[${this.name}]`), echo.asAlert(`(${method})`), ...args)\n    // echo.groupEnd()\n  }\n\n}\nexport class Logger {\n  constructor(service) {\n    this.name = service;\n  }\n\n  debug(method) {\n    for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      args[_key5 - 1] = arguments[_key5];\n    }\n\n    logger.debug(this.name, method, args);\n  }\n\n  log(method) {\n    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      args[_key6 - 1] = arguments[_key6];\n    }\n\n    logger.log(this.name, method, args);\n  }\n\n  warn(method) {\n    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      args[_key7 - 1] = arguments[_key7];\n    }\n\n    logger.warn(this.name, method, args);\n  }\n\n  error(method) {\n    for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      args[_key8 - 1] = arguments[_key8];\n    }\n\n    logger.error(this.name, method, args);\n  }\n\n}\nconst loggerWrapper = new Logger('');\nlet logger = new InternalLogger();\nexport const setLogger = newLogger => {\n  logger = newLogger;\n};\nexport const getLogger = () => loggerWrapper;","map":{"version":3,"mappings":"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","names":["getDebugEnabled","InternalLogger","constructor","debug","name","method","args","_log","log","warn","error","type","groupText","Date","toISOString","data","slice","console","group","groupCollapsed","groupEnd","Logger","service","logger","loggerWrapper","setLogger","newLogger","getLogger"],"sourceRoot":"","sources":["../../../src/utils/Logger.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}