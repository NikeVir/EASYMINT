{"ast":null,"code":"import { TezosToolkit, MichelsonMap, OpKind } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { bytes2Char, char2Bytes } from '@taquito/utils';\nimport axios from 'axios';\nexport const NAME = 'Tutorial';\nexport const CONTRACT_ADDRESS = 'KT1XSqpRQUqubwJwdjRFduYwKa3vXAqBssxU';\nexport const NETWORK = 'jakartanet';\nconst tezos = new TezosToolkit(\"https://jakartanet.smartpy.io\");\nconst wallet = new BeaconWallet({\n  name: \"tezosNFT\",\n  preferredNetwork: \"jakartanet\"\n});\n\nconst connectWallet = async () => {\n  await wallet.requestPermissions({\n    network: {\n      type: \"jakartanet\"\n    }\n  });\n};\n\ntezos.setWalletProvider(wallet);\n\nconst getContractdetails = async () => {\n  const contract = await tezos.wallet.at(\"KT1XSqpRQUqubwJwdjRFduYwKa3vXAqBssxU\");\n  return contract;\n};\n\nconst disconnectWallet = async () => {\n  await wallet.clearActiveAccount();\n};\n\nconst getPKH = async () => {\n  const pkh = await wallet.client.getActiveAccount();\n\n  if (pkh) {\n    return pkh.address;\n  } else {\n    return '';\n  }\n};\n\nconst mulmintNFT = async (address, urlobj) => {\n  try {\n    await disconnectWallet();\n    await connectWallet();\n    var obj = [];\n    const amount = 1;\n    let url;\n    const contract = await getContractdetails();\n    const token_id = await getNFTs();\n\n    for (var i = 0; i < urlobj.length; i++) {\n      url = char2Bytes(urlobj[i].toString());\n      console.log(url);\n      const op = contract.methods.mint(address, amount, MichelsonMap.fromLiteral({\n        \"NFT\": url\n      }), token_id.length + i).toTransferParams();\n      op.kind = OpKind.TRANSACTION;\n      obj[i] = op;\n    }\n\n    console.log(obj);\n    const batch = await tezos.wallet.batch(obj);\n    const operation = await batch.send();\n    return await operation.receipt;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst mintNFT = async (address, urlobj) => {\n  try {\n    const amount = 1;\n    const token_id = await getNFTs();\n    const contract = await getContractdetails();\n    const url = char2Bytes(urlobj);\n    const op = await contract.methods.mint(address, amount, MichelsonMap.fromLiteral({\n      \"\": url\n    }), token_id.length).send();\n    return await op.confirmation(3);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst getNFTs = async () => {\n  const response = await axios.get(`https://api.jakartanet.tzkt.io/v1/contracts/${CONTRACT_ADDRESS}/bigmaps/token_metadata/keys`);\n  const data = response.data;\n  let tokens = [];\n\n  for (let i = 0; i < data.length; i++) {\n    let url = data[i].value.token_info[''];\n\n    if (url) {\n      url = bytes2Char(url);\n    }\n\n    const token = {\n      token_id: data[i].value.token_id,\n      url\n    };\n    tokens.push(token);\n  }\n\n  return tokens;\n};\n\nexport { connectWallet, disconnectWallet, getPKH, getContractdetails, mintNFT, getNFTs, mulmintNFT };","map":{"version":3,"names":["TezosToolkit","MichelsonMap","OpKind","BeaconWallet","bytes2Char","char2Bytes","axios","NAME","CONTRACT_ADDRESS","NETWORK","tezos","wallet","name","preferredNetwork","connectWallet","requestPermissions","network","type","setWalletProvider","getContractdetails","contract","at","disconnectWallet","clearActiveAccount","getPKH","pkh","client","getActiveAccount","address","mulmintNFT","urlobj","obj","amount","url","token_id","getNFTs","i","length","toString","console","log","op","methods","mint","fromLiteral","toTransferParams","kind","TRANSACTION","batch","operation","send","receipt","err","mintNFT","confirmation","response","get","data","tokens","value","token_info","token","push"],"sources":["C:/Users/Aaru/Dropbox/My PC (LAPTOP-EJG84MCS)/Desktop/EasyMint-Final/src/utils/wallet.js"],"sourcesContent":["import { TezosToolkit, MichelsonMap, OpKind } from \"@taquito/taquito\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { bytes2Char, char2Bytes } from '@taquito/utils';\nimport axios from 'axios';\n\n\n\nexport const NAME = 'Tutorial';\nexport const CONTRACT_ADDRESS = 'KT1XSqpRQUqubwJwdjRFduYwKa3vXAqBssxU';\nexport const NETWORK = 'jakartanet';\n\n\n\nconst tezos = new TezosToolkit(\"https://jakartanet.smartpy.io\")\n\nconst wallet = new BeaconWallet({\n    name: \"tezosNFT\",\n    preferredNetwork: \"jakartanet\",\n\n})\n\nconst connectWallet = async () => {\n    await wallet.requestPermissions({ network: { type: \"jakartanet\" } })\n};\n\ntezos.setWalletProvider(wallet);\n\nconst getContractdetails = async () => {\n    const contract = await tezos.wallet.at(\"KT1XSqpRQUqubwJwdjRFduYwKa3vXAqBssxU\")\n    return contract;\n}\n\n\nconst disconnectWallet = async () => {\n    await wallet.clearActiveAccount();\n};\n\nconst getPKH = async () => {\n    const pkh = await wallet.client.getActiveAccount();\n    if (pkh) {\n        return pkh.address;\n    }\n    else { return '' }\n};\n\nconst mulmintNFT = async (address, urlobj) => {\n    try {\n        await disconnectWallet();\n        await connectWallet();\n        var obj = []\n        const amount = 1;\n        let url\n        const contract = await getContractdetails();\n        const token_id = await getNFTs();\n\n        for (var i = 0; i < urlobj.length; i++) {\n            url = char2Bytes(urlobj[i].toString());\n            console.log(url)\n            const op = contract.methods.mint(address, amount, MichelsonMap.fromLiteral({ \"NFT\": url }), token_id.length + i).toTransferParams();\n            op.kind = OpKind.TRANSACTION;\n            obj[i] = op\n        }\n        console.log(obj)\n        const batch = await tezos.wallet.batch(obj);\n        const operation = await batch.send();\n        return await operation.receipt;\n\n    } catch (err) {\n        console.log(err)\n    }\n\n};\n\nconst mintNFT = async (address, urlobj) => {\n    try {\n\n        const amount = 1;\n        const token_id = await getNFTs();\n        const contract = await getContractdetails();\n        const url = char2Bytes(urlobj)\n        const op = await contract.methods.mint(address, amount, MichelsonMap.fromLiteral({ \"\": url }), token_id.length).send();\n        return await op.confirmation(3);\n\n    } catch (err) {\n        console.log(err)\n    }\n\n};\n\nconst getNFTs = async () => {\n    const response = await axios.get(\n        `https://api.jakartanet.tzkt.io/v1/contracts/${CONTRACT_ADDRESS}/bigmaps/token_metadata/keys`\n    );\n    const data = response.data;\n    let tokens = [];\n    for (let i = 0; i < data.length; i++) {\n        let url = data[i].value.token_info[''];\n        if (url) {\n            url = bytes2Char(url);\n        }\n        const token = {\n            token_id: data[i].value.token_id,\n            url,\n        };\n        tokens.push(token);\n    }\n    return tokens;\n};\n\nexport { connectWallet, disconnectWallet, getPKH, getContractdetails, mintNFT, getNFTs, mulmintNFT };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}