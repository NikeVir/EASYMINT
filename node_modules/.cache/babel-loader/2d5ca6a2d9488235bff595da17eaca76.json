{"ast":null,"code":"import stringify from 'fast-json-stable-stringify';\nimport BigNumber from 'bignumber.js';\nimport { b58decode, validateAddress, ValidationResult, encodePubKey, b58decodeL2Address, encodeL2Address, encodeKey, validatePublicKey, Prefix, b58cdecode, prefix, encodeKeyHash, validateKeyHash, validateSignature, validateChain } from '@taquito/utils';\n\nvar _a$1;\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid map type being passed or used\r\n */\n\n\nclass InvalidMapTypeError extends Error {\n  constructor(mapType) {\n    super(`The map type '${mapType}' is invalid`);\n    this.mapType = mapType;\n    this.name = 'InvalidMapTypeError';\n  }\n\n} // Retrieve a unique symbol associated with the key from the environment\n// Used in order to identify all object that are of type MichelsonMap even if they come from different module\n\n\nconst michelsonMapTypeSymbol = Symbol.for('taquito-michelson-map-type-symbol');\n\nconst isMapType = value => {\n  return 'args' in value && Array.isArray(value.args) && value.args.length === 2;\n};\n/**\r\n *  @category Error\r\n *  @description Error that indicates a map type mismatch, where an attempt to set a key or value in a Map doesn't match the defined type of the Map\r\n */\n\n\nclass MapTypecheckError extends Error {\n  constructor(value, type, errorType) {\n    super(`${errorType} not compliant with underlying michelson type`);\n    this.value = value;\n    this.type = type;\n    this.name = 'MapTypecheckError';\n  }\n\n}\n/**\r\n * @description Michelson Map is an abstraction over the michelson native map. It supports complex Pair as key\r\n */\n\n\nclass MichelsonMap {\n  /**\r\n   * @param mapType If specified key and value will be type-checked before being added to the map\r\n   *\r\n   * @example new MichelsonMap({ prim: \"map\", args: [{prim: \"string\"}, {prim: \"int\"}]})\r\n   */\n  constructor(mapType) {\n    this.valueMap = new Map();\n    this.keyMap = new Map();\n    this[_a$1] = true;\n\n    if (mapType) {\n      this.setType(mapType);\n    }\n  } // Used to check if an object is a michelson map.\n  // Using instanceof was not working for project that had multiple instance of taquito dependencies\n  // as the class constructor is different\n\n\n  static isMichelsonMap(obj) {\n    return obj && obj[michelsonMapTypeSymbol] === true;\n  }\n\n  setType(mapType) {\n    if (!isMapType(mapType)) {\n      throw new InvalidMapTypeError(mapType.toString());\n    }\n\n    this.keySchema = new Schema(mapType.args[0]);\n    this.valueSchema = new Schema(mapType.args[1]);\n  }\n\n  removeType() {\n    this.keySchema = undefined;\n    this.valueSchema = undefined;\n  }\n\n  static fromLiteral(obj, mapType) {\n    const map = new MichelsonMap(mapType);\n    Object.keys(obj).forEach(key => {\n      map.set(key, obj[key]);\n    });\n    return map;\n  }\n\n  typecheckKey(key) {\n    if (this.keySchema) {\n      return this.keySchema.Typecheck(key);\n    }\n\n    return true;\n  }\n\n  typecheckValue(value) {\n    if (this.valueSchema) {\n      return this.valueSchema.Typecheck(value);\n    }\n\n    return true;\n  }\n\n  assertTypecheckValue(value) {\n    if (!this.typecheckValue(value)) {\n      throw new MapTypecheckError(value, this.valueSchema, 'value');\n    }\n  }\n\n  assertTypecheckKey(key) {\n    if (!this.typecheckKey(key)) {\n      throw new MapTypecheckError(key, this.keySchema, 'key');\n    }\n  }\n\n  serializeDeterministically(key) {\n    return stringify(key);\n  }\n\n  *keys() {\n    for (const [key] of this.entries()) {\n      yield key;\n    }\n  }\n\n  *values() {\n    for (const [, value] of this.entries()) {\n      yield value;\n    }\n  }\n\n  *entries() {\n    for (const key of this.valueMap.keys()) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      yield [this.keyMap.get(key), this.valueMap.get(key)];\n    }\n  }\n\n  get(key) {\n    this.assertTypecheckKey(key);\n    const strKey = this.serializeDeterministically(key);\n    return this.valueMap.get(strKey);\n  }\n  /**\r\n   *\r\n   * @description Set a key and a value in the MichelsonMap. If the key already exists, override the current value.\r\n   *\r\n   * @example map.set(\"myKey\", \"myValue\") // Using a string as key\r\n   *\r\n   * @example map.set({0: \"test\", 1: \"test1\"}, \"myValue\") // Using a pair as key\r\n   *\r\n   * @warn The same key can be represented in multiple ways, depending on the type of the key. This duplicate key situation will cause a runtime error (duplicate key) when sending the map data to the Tezos RPC node.\r\n   *\r\n   * For example, consider a contract with a map whose key is of type boolean.  If you set the following values in MichelsonMap: map.set(false, \"myValue\") and map.set(null, \"myValue\").\r\n   *\r\n   * You will get two unique entries in the MichelsonMap. These values will both be evaluated as falsy by the MichelsonEncoder and ultimately rejected by the Tezos RPC.\r\n   */\n\n\n  set(key, value) {\n    this.assertTypecheckKey(key);\n    this.assertTypecheckValue(value);\n    const strKey = this.serializeDeterministically(key);\n    this.keyMap.set(strKey, key);\n    this.valueMap.set(strKey, value);\n  }\n\n  delete(key) {\n    this.assertTypecheckKey(key);\n    this.keyMap.delete(this.serializeDeterministically(key));\n    this.valueMap.delete(this.serializeDeterministically(key));\n  }\n\n  has(key) {\n    this.assertTypecheckKey(key);\n    const strKey = this.serializeDeterministically(key);\n    return this.keyMap.has(strKey) && this.valueMap.has(strKey);\n  }\n\n  clear() {\n    this.keyMap.clear();\n    this.valueMap.clear();\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  forEach(cb) {\n    for (const [key, value] of this.entries()) {\n      cb(value, key, this);\n    }\n  }\n\n}\n\n_a$1 = michelsonMapTypeSymbol;\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when encoding invalid or incorrect data (e.g. if an address is expected but a number is received)\r\n */\n\nclass TokenValidationError extends Error {\n  constructor(value, token, baseMessage) {\n    super();\n    this.value = value;\n    this.token = token;\n    this.name = 'ValidationError';\n    const annot = this.token.annot();\n    const annotText = annot ? `[${annot}] ` : '';\n    this.message = `${annotText}${baseMessage}`;\n  }\n\n}\n\nclass Token {\n  constructor(val, idx, fac) {\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n    this.createToken = this.fac;\n  }\n\n  typeWithoutAnnotations() {\n    const handleMichelsonExpression = val => {\n      if (typeof val === 'object') {\n        if (Array.isArray(val)) {\n          const array = val;\n          return array.map(item => handleMichelsonExpression(item));\n        }\n\n        const extended = val;\n\n        if (extended.args) {\n          return {\n            prim: extended.prim,\n            args: extended.args.map(x => handleMichelsonExpression(x))\n          };\n        } else {\n          return {\n            prim: extended.prim\n          };\n        }\n      }\n\n      return val;\n    };\n\n    const handleMichelsonExtended = val => {\n      if (val.args) {\n        return {\n          prim: val.prim,\n          args: val.args.map(x => handleMichelsonExpression(x))\n        };\n      } else {\n        return {\n          prim: val.prim\n        };\n      }\n    };\n\n    return handleMichelsonExtended(this.val);\n  }\n\n  annot() {\n    return (Array.isArray(this.val.annots) && this.val.annots.length > 0 ? this.val.annots[0] : String(this.idx)).replace(/(%|:)(_Liq_entry_)?/, '');\n  }\n\n  hasAnnotations() {\n    return Array.isArray(this.val.annots) && this.val.annots.length;\n  }\n\n  get tokenVal() {\n    return this.val;\n  }\n\n  ExtractSignature() {\n    return [[this.ExtractSchema()]];\n  }\n\n}\n\nclass ComparableToken extends Token {\n  compare(o1, o2) {\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure happening when parsing encoding/executing Big Map types\r\n */\n\n\nclass BigMapValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'BigMapValidationError';\n  }\n\n}\n\nclass BigMapToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  get ValueSchema() {\n    return this.createToken(this.val.args[1], 0);\n  }\n\n  get KeySchema() {\n    return this.createToken(this.val.args[0], 0);\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return {\n      big_map: {\n        key: this.KeySchema.ExtractSchema(),\n        value: this.ValueSchema.ExtractSchema()\n      }\n    };\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: BigMapToken.prim,\n      schema: {\n        key: this.KeySchema.generateSchema(),\n        value: this.ValueSchema.generateSchema()\n      }\n    };\n  }\n\n  isValid(value) {\n    if (MichelsonMap.isMichelsonMap(value)) {\n      return null;\n    }\n\n    return new BigMapValidationError(value, this, 'Value must be a MichelsonMap');\n  }\n\n  objLitToMichelsonMap(val) {\n    if (val instanceof MichelsonMap) return val;\n\n    if (typeof val === 'object') {\n      if (Object.keys(val).length === 0) {\n        return new MichelsonMap();\n      } else {\n        return MichelsonMap.fromLiteral(val);\n      }\n    }\n\n    return val;\n  }\n\n  Encode(args) {\n    const val = this.objLitToMichelsonMap(args.pop());\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys()).sort((a, b) => this.KeySchema.compare(a, b)).map(key => {\n      return {\n        prim: 'Elt',\n        args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))]\n      };\n    });\n  }\n\n  EncodeObject(args, semantic) {\n    const val = this.objLitToMichelsonMap(args);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[BigMapToken.prim]) {\n      return semantic[BigMapToken.prim](val, this.val);\n    }\n\n    return Array.from(val.keys()).sort((a, b) => this.KeySchema.compare(a, b)).map(key => {\n      return {\n        prim: 'Elt',\n        args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))]\n      };\n    });\n  }\n\n  Execute(val, semantic) {\n    if (semantic && semantic[BigMapToken.prim]) {\n      return semantic[BigMapToken.prim](val, this.val);\n    }\n\n    if (Array.isArray(val)) {\n      // Athens is returning an empty array for big map in storage\n      // Internal: In taquito v5 it is still used to decode big map diff (as if they were a regular map)\n      const map = new MichelsonMap(this.val);\n      val.forEach(current => {\n        map.set(this.KeySchema.ToKey(current.args[0]), this.ValueSchema.Execute(current.args[1]));\n      });\n      return map;\n    } else if ('int' in val) {\n      // Babylon is returning an int with the big map id in contract storage\n      return val.int;\n    } else {\n      throw new BigMapValidationError(val, this, `Big map is expecting either an array (Athens) or an object with an int property (Babylon). Got ${JSON.stringify(val)}`);\n    }\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (BigMapToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    this.KeySchema.findAndReturnTokens(tokenToFind, tokens);\n    this.ValueSchema.findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n\n}\n\nBigMapToken.prim = 'big_map';\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when decoding OR Token methods\r\n */\n\nclass OrTokenDecodingError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'OrTokenDecodingError';\n  }\n\n}\n\nclass OrToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Encode(args) {\n    const label = args[args.length - 1];\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n      args.pop();\n      return {\n        prim: 'Left',\n        args: [leftToken.Encode(args)]\n      };\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n      args.pop();\n      return {\n        prim: 'Right',\n        args: [rightToken.Encode(args)]\n      };\n    } else {\n      if (leftToken instanceof OrToken) {\n        const val = leftToken.Encode(args);\n\n        if (val) {\n          return {\n            prim: 'Left',\n            args: [val]\n          };\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        const val = rightToken.Encode(args);\n\n        if (val) {\n          return {\n            prim: 'Right',\n            args: [val]\n          };\n        }\n      }\n\n      return null;\n    }\n  }\n\n  ExtractSignature() {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n    const newSig = [];\n\n    if (leftToken instanceof OrToken) {\n      newSig.push(...leftToken.ExtractSignature());\n    } else {\n      for (const sig of leftToken.ExtractSignature()) {\n        newSig.push([leftToken.annot(), ...sig]);\n      }\n    }\n\n    if (rightToken instanceof OrToken) {\n      newSig.push(...rightToken.ExtractSignature());\n    } else {\n      for (const sig of rightToken.ExtractSignature()) {\n        newSig.push([rightToken.annot(), ...sig]);\n      }\n    }\n\n    return newSig;\n  }\n\n  EncodeObject(args, semantic) {\n    const label = Object.keys(args)[0];\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n      return {\n        prim: 'Left',\n        args: [leftToken.EncodeObject(args[label], semantic)]\n      };\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n      return {\n        prim: 'Right',\n        args: [rightToken.EncodeObject(args[label], semantic)]\n      };\n    } else {\n      if (leftToken instanceof OrToken) {\n        const val = leftToken.EncodeObject(args, semantic);\n\n        if (val) {\n          return {\n            prim: 'Left',\n            args: [val]\n          };\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        const val = rightToken.EncodeObject(args, semantic);\n\n        if (val) {\n          return {\n            prim: 'Right',\n            args: [val]\n          };\n        }\n      }\n\n      return null;\n    }\n  }\n\n  Execute(val, semantics) {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (val.prim === 'Right') {\n      if (rightToken instanceof OrToken) {\n        return rightToken.Execute(val.args[0], semantics);\n      } else {\n        return {\n          [rightToken.annot()]: rightToken.Execute(val.args[0], semantics)\n        };\n      }\n    } else if (val.prim === 'Left') {\n      if (leftToken instanceof OrToken) {\n        return leftToken.Execute(val.args[0], semantics);\n      }\n\n      return {\n        [leftToken.annot()]: leftToken.Execute(val.args[0], semantics)\n      };\n    } else {\n      throw new OrTokenDecodingError(`Was expecting Left or Right prim but got: ${val.prim}`);\n    }\n  }\n\n  traversal(getLeftValue, getRightValue, concat) {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    let leftValue;\n\n    if (leftToken instanceof OrToken && !leftToken.hasAnnotations()) {\n      leftValue = getLeftValue(leftToken);\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    } else {\n      leftValue = {\n        [leftToken.annot()]: getLeftValue(leftToken)\n      };\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n    let rightValue;\n\n    if (rightToken instanceof OrToken && !rightToken.hasAnnotations()) {\n      rightValue = getRightValue(rightToken);\n    } else {\n      rightValue = {\n        [rightToken.annot()]: getRightValue(rightToken)\n      };\n    }\n\n    const res = concat(leftValue, rightValue);\n    return res;\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return this.traversal(leftToken => leftToken.ExtractSchema(), rightToken => rightToken.ExtractSchema(), (leftValue, rightValue) => Object.assign(Object.assign({}, leftValue), rightValue));\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: OrToken.prim,\n      schema: this.traversal(leftToken => {\n        if (leftToken instanceof OrToken && !leftToken.hasAnnotations()) {\n          return leftToken.generateSchema().schema;\n        } else {\n          return leftToken.generateSchema();\n        }\n      }, rightToken => {\n        if (rightToken instanceof OrToken && !rightToken.hasAnnotations()) {\n          return rightToken.generateSchema().schema;\n        } else {\n          return rightToken.generateSchema();\n        }\n      }, (leftValue, rightValue) => Object.assign(Object.assign({}, leftValue), rightValue))\n    };\n  }\n\n  findToken(label) {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken) && leftToken instanceof ComparableToken) {\n      return leftToken;\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken) && rightToken instanceof ComparableToken) {\n      return rightToken;\n    } else {\n      if (leftToken instanceof OrToken) {\n        const tok = leftToken.findToken(label);\n\n        if (tok) {\n          return tok;\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        const tok = rightToken.findToken(label);\n\n        if (tok) {\n          return tok;\n        }\n      }\n\n      return null;\n    }\n  }\n\n  compare(val1, val2) {\n    const labelVal1 = Object.keys(val1)[0];\n    const labelVal2 = Object.keys(val2)[0];\n\n    if (labelVal1 === labelVal2) {\n      const token = this.findToken(labelVal1);\n\n      if (token instanceof ComparableToken) {\n        return token.compare(val1[labelVal1], val2[labelVal1]);\n      }\n    } else {\n      const encoded1 = JSON.stringify(this.EncodeObject(val1));\n      const encoded2 = JSON.stringify(this.EncodeObject(val2));\n      return encoded1 < encoded2 ? -1 : 1;\n    }\n  }\n\n  ToKey(val) {\n    return this.Execute(val);\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations()\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (OrToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    this.traversal(leftToken => leftToken.findAndReturnTokens(tokenToFind, tokens), rightToken => rightToken.findAndReturnTokens(tokenToFind, tokens), (leftValue, rightValue) => Object.assign(Object.assign({}, leftValue), rightValue));\n    return tokens;\n  }\n\n}\n\nOrToken.prim = 'or';\n/**\r\n *  @category Error\r\n *  @description Error that indicates in invalid token argument being passed\r\n */\n\nclass TokenArgumentValidationError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'TokenArgumentValidationError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure occurring when doing a comparison of tokens\r\n */\n\n\nclass TokenComparisonError extends Error {\n  constructor(val1, val2) {\n    super(`Tokens ${val1} and ${val2} are not comparable`);\n    this.val1 = val1;\n    this.val2 = val2;\n    this.name = 'TokenComparisonError';\n  }\n\n} // collapse comb pair\n\n\nfunction collapse$1(val) {\n  let prim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PairToken.prim;\n\n  if (Array.isArray(val)) {\n    return collapse$1({\n      prim: prim,\n      args: val\n    }, prim);\n  }\n\n  if (val.args === undefined) {\n    throw new TokenArgumentValidationError('Encountered an invalid PairToken with no arguments, a pair must have two or more arguments');\n  }\n\n  if (val.args.length > 2) {\n    return [val.args[0], {\n      prim: prim,\n      args: val.args.slice(1)\n    }];\n  }\n\n  return [val.args[0], val.args[1]];\n}\n\nclass PairToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(Array.isArray(val) ? {\n      prim: PairToken.prim,\n      args: val\n    } : val.prim ? val : {\n      prim: PairToken.prim,\n      args: val\n    }, idx, fac);\n  }\n\n  args() {\n    // collapse comb pair\n    return collapse$1(this.val);\n  }\n\n  tokens() {\n    let cnt = 0;\n    return this.args().map(a => {\n      const tok = this.createToken(a, this.idx + cnt);\n\n      if (tok instanceof PairToken) {\n        cnt += Object.keys(tok.ExtractSchema()).length;\n      } else {\n        cnt++;\n      }\n\n      return tok;\n    });\n  }\n\n  Encode(args) {\n    return {\n      prim: 'Pair',\n      args: this.tokens().map(t => t.Encode(args))\n    };\n  }\n\n  ExtractSignature() {\n    const args = this.args();\n    const leftToken = this.createToken(args[0], this.idx);\n    let keyCount = 1;\n\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(args[1], this.idx + keyCount);\n    const newSig = [];\n\n    for (const leftSig of leftToken.ExtractSignature()) {\n      for (const rightSig of rightToken.ExtractSignature()) {\n        newSig.push([...leftSig, ...rightSig]);\n      }\n    }\n\n    return newSig;\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations()\n    };\n  }\n\n  ToKey(val) {\n    return this.Execute(val);\n  }\n\n  EncodeObject(args, semantic) {\n    const [leftToken, rightToken] = this.tokens();\n    let leftValue;\n\n    if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n      leftValue = args;\n    } else {\n      leftValue = args[leftToken.annot()];\n    }\n\n    let rightValue;\n\n    if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n      rightValue = args;\n    } else {\n      rightValue = args[rightToken.annot()];\n    }\n\n    return {\n      prim: 'Pair',\n      args: [leftToken.EncodeObject(leftValue, semantic), rightToken.EncodeObject(rightValue, semantic)]\n    };\n  }\n\n  traversal(getLeftValue, getRightValue) {\n    const args = this.args();\n    const leftToken = this.createToken(args[0], this.idx);\n    let keyCount = 1;\n    let leftValue;\n\n    if (leftToken instanceof PairToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n      leftValue = getLeftValue(leftToken);\n    } else {\n      leftValue = {\n        [leftToken.annot()]: getLeftValue(leftToken)\n      };\n    }\n\n    const rightToken = this.createToken(args[1], this.idx + keyCount);\n    let rightValue;\n\n    if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n      rightValue = getRightValue(rightToken);\n    } else {\n      rightValue = {\n        [rightToken.annot()]: getRightValue(rightToken)\n      };\n    }\n\n    const res = Object.assign(Object.assign({}, leftValue), rightValue);\n    return res;\n  }\n\n  Execute(val, semantics) {\n    const args = collapse$1(val, 'Pair');\n    return this.traversal(leftToken => leftToken.Execute(args[0], semantics), rightToken => rightToken.Execute(args[1], semantics));\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return this.traversal(leftToken => leftToken.ExtractSchema(), rightToken => rightToken.ExtractSchema());\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: PairToken.prim,\n      schema: this.traversal(leftToken => {\n        if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n          return leftToken.generateSchema().schema;\n        } else {\n          return leftToken.generateSchema();\n        }\n      }, rightToken => {\n        if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n          return rightToken.generateSchema().schema;\n        } else {\n          return rightToken.generateSchema();\n        }\n      })\n    };\n  }\n\n  compare(val1, val2) {\n    const [leftToken, rightToken] = this.tokens();\n\n    const getValue = (token, args) => {\n      if (token instanceof PairToken && !token.hasAnnotations()) {\n        return args;\n      } else {\n        return args[token.annot()];\n      }\n    };\n\n    if (leftToken instanceof ComparableToken && rightToken instanceof ComparableToken) {\n      const result = leftToken.compare(getValue(leftToken, val1), getValue(leftToken, val2));\n\n      if (result === 0) {\n        return rightToken.compare(getValue(rightToken, val1), getValue(rightToken, val2));\n      }\n\n      return result;\n    }\n\n    throw new TokenComparisonError(val1, val2);\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (PairToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    this.tokens().map(t => t.findAndReturnTokens(tokenToFind, tokens));\n    return tokens;\n  }\n\n}\n\nPairToken.prim = 'pair';\n\nclass NatValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'NatValidationError';\n  }\n\n}\n\nclass NatToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(val) {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      int: new BigNumber(val).toFixed()\n    };\n  }\n\n  isValid(val) {\n    const bigNumber = new BigNumber(val);\n\n    if (bigNumber.isNaN()) {\n      return new NatValidationError(val, this, `Value is not a number: ${val}`);\n    } else if (bigNumber.isNegative()) {\n      return new NatValidationError(val, this, `Value cannot be negative: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  EncodeObject(val, semantic) {\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[NatToken.prim]) {\n      return semantic[NatToken.prim](val);\n    }\n\n    return {\n      int: new BigNumber(val).toFixed()\n    };\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return NatToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: NatToken.prim,\n      schema: NatToken.prim\n    };\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: {\n        int: String(val)\n      },\n      type: {\n        prim: NatToken.prim\n      }\n    };\n  }\n\n  ToKey(_ref) {\n    let {\n      int\n    } = _ref;\n    return new BigNumber(int);\n  }\n\n  compare(nat1, nat2) {\n    const o1 = Number(nat1);\n    const o2 = Number(nat2);\n\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (NatToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nNatToken.prim = 'nat';\n\nclass StringToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(val) {\n    return val[Object.keys(val)[0]];\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return StringToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: StringToken.prim,\n      schema: StringToken.prim\n    };\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    return {\n      string: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    if (semantic && semantic[StringToken.prim]) {\n      return semantic[StringToken.prim](val);\n    }\n\n    return {\n      string: val\n    };\n  }\n\n  ToKey(_ref2) {\n    let {\n      string\n    } = _ref2;\n    return string;\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: StringToken.prim\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (StringToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nStringToken.prim = 'string';\n\nclass AddressValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'AddressValidationError';\n  }\n\n}\n\nclass AddressToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  ToBigMapKey(val) {\n    const decoded = b58decode(val);\n    return {\n      key: {\n        bytes: decoded\n      },\n      type: {\n        prim: 'bytes'\n      }\n    };\n  }\n\n  isValid(value) {\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      return new AddressValidationError(value, this, `Address is not valid: ${value}`);\n    }\n\n    return null;\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[AddressToken.prim]) {\n      return semantic[AddressToken.prim](val);\n    }\n\n    return {\n      string: val\n    };\n  }\n\n  Execute(val) {\n    if (val.string) {\n      return val.string;\n    }\n\n    if (!val.bytes) {\n      throw new AddressValidationError(val, this, `cannot be missing both string and bytes: ${val}`);\n    }\n\n    return encodePubKey(val.bytes);\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return AddressToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: AddressToken.prim,\n      schema: AddressToken.prim\n    };\n  }\n\n  ToKey(_ref3) {\n    let {\n      bytes,\n      string\n    } = _ref3;\n\n    if (string) {\n      return string;\n    }\n\n    if (!bytes) {\n      throw new AddressValidationError({\n        bytes,\n        string\n      }, this, `cannot be missing both string and bytes ${{\n        string,\n        bytes\n      }}`);\n    }\n\n    return encodePubKey(bytes);\n  }\n\n  compare(address1, address2) {\n    const isImplicit = address => {\n      return address.startsWith('tz');\n    };\n\n    const implicit1 = isImplicit(address1);\n    const implicit2 = isImplicit(address2);\n\n    if (implicit1 && !implicit2) {\n      return -1;\n    } else if (implicit2 && !implicit1) {\n      return 1;\n    }\n\n    return super.compare(address1, address2);\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (AddressToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nAddressToken.prim = 'address';\n\nclass MapValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'MapValidationError';\n  }\n\n}\n\nclass MapToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  get ValueSchema() {\n    return this.createToken(this.val.args[1], 0);\n  }\n\n  get KeySchema() {\n    return this.createToken(this.val.args[0], 0);\n  }\n\n  isValid(value) {\n    if (MichelsonMap.isMichelsonMap(value)) {\n      return null;\n    }\n\n    return new MapValidationError(value, this, 'Value must be a MichelsonMap');\n  }\n\n  Execute(val, semantics) {\n    const map = new MichelsonMap(this.val);\n    val.forEach(current => {\n      map.set(this.KeySchema.ToKey(current.args[0]), this.ValueSchema.Execute(current.args[1], semantics));\n    });\n    return map;\n  }\n\n  objLitToMichelsonMap(val) {\n    if (val instanceof MichelsonMap) return val;\n\n    if (typeof val === 'object') {\n      if (Object.keys(val).length === 0) {\n        return new MichelsonMap();\n      } else {\n        return MichelsonMap.fromLiteral(val);\n      }\n    }\n\n    return val;\n  }\n\n  Encode(args) {\n    const val = this.objLitToMichelsonMap(args.pop());\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys()).sort((a, b) => this.KeySchema.compare(a, b)).map(key => {\n      return {\n        prim: 'Elt',\n        args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))]\n      };\n    });\n  }\n\n  EncodeObject(args, semantic) {\n    const val = this.objLitToMichelsonMap(args);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[MapToken.prim]) {\n      return semantic[MapToken.prim](val);\n    }\n\n    return Array.from(val.keys()).sort((a, b) => this.KeySchema.compare(a, b)).map(key => {\n      return {\n        prim: 'Elt',\n        args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))]\n      };\n    });\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return {\n      map: {\n        key: this.KeySchema.ExtractSchema(),\n        value: this.ValueSchema.ExtractSchema()\n      }\n    };\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: MapToken.prim,\n      schema: {\n        key: this.KeySchema.generateSchema(),\n        value: this.ValueSchema.generateSchema()\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (MapToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    this.KeySchema.findAndReturnTokens(tokenToFind, tokens);\n    this.ValueSchema.findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n\n}\n\nMapToken.prim = 'map';\n\nclass BoolToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(val) {\n    return String(val.prim).toLowerCase() === 'true' ? true : false;\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    return {\n      prim: val ? 'True' : 'False'\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    if (semantic && semantic[BoolToken.prim]) {\n      return semantic[BoolToken.prim](val);\n    }\n\n    return {\n      prim: val ? 'True' : 'False'\n    };\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return BoolToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: BoolToken.prim,\n      schema: BoolToken.prim\n    };\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: this.EncodeObject(val),\n      type: {\n        prim: BoolToken.prim\n      }\n    };\n  }\n\n  ToKey(val) {\n    return this.EncodeObject(val);\n  }\n\n  compare(val1, val2) {\n    if (val1 && val2 || !val1 && !val2) {\n      return 0;\n    } else if (val1) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (BoolToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nBoolToken.prim = 'bool';\n\nclass TxRollupL2AddressValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'TxRollupL2AddressValidationError';\n  }\n\n}\n\nclass TxRollupL2AddressToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  ToBigMapKey(val) {\n    const decoded = b58decodeL2Address(val);\n    return {\n      key: {\n        bytes: decoded\n      },\n      type: {\n        prim: 'bytes'\n      }\n    };\n  }\n\n  isValid(value) {\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      throw new TxRollupL2AddressValidationError(value, this, `tx_rollup_l2_address is not valid: ${value}`);\n    }\n\n    return null;\n  }\n\n  Encode(args) {\n    const val = args.pop();\n\n    if (!val) {\n      throw new TxRollupL2AddressValidationError(val, this, `arg missing to encode: this -> \"${val}\"`);\n    } // no need to test since method throws\n\n\n    this.isValid(val);\n    return {\n      string: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    // no need to test since method throws\n    this.isValid(val);\n\n    if (semantic && semantic[TxRollupL2AddressToken.prim]) {\n      return semantic[TxRollupL2AddressToken.prim](val);\n    }\n\n    return {\n      string: val\n    };\n  }\n\n  Execute(val) {\n    if (val.string) {\n      return val.string;\n    }\n\n    if (!val.bytes) {\n      throw new TxRollupL2AddressValidationError(val, this, `value cannot be missing string and byte value. must have one ${JSON.stringify(val)}`);\n    }\n\n    return encodeL2Address(val.bytes);\n  }\n\n  ExtractSchema() {\n    return TxRollupL2AddressToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: TxRollupL2AddressToken.prim,\n      schema: TxRollupL2AddressToken.prim\n    };\n  }\n\n  ToKey(_ref4) {\n    let {\n      bytes,\n      string\n    } = _ref4;\n\n    if (string) {\n      return string;\n    }\n\n    if (!bytes) {\n      throw new TxRollupL2AddressValidationError(bytes, this, `value cannot be missing string and byte value. must have one: bytes = ${bytes}`);\n    }\n\n    return encodeL2Address(bytes);\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (TxRollupL2AddressToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nTxRollupL2AddressToken.prim = 'tx_rollup_l2_address';\n\nclass ContractValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'ContractValidationError';\n  }\n\n}\n\nclass ContractToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  isValid(value) {\n    // tz1,tz2 and tz3 seems to be valid contract values (for Unit contract)\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      return new ContractValidationError(value, this, 'Contract address is not valid');\n    }\n\n    return null;\n  }\n\n  Execute(val) {\n    if (val.string) {\n      return val.string;\n    }\n\n    if (!val.bytes) {\n      throw new ContractValidationError(val, this, 'must contain bytes or string');\n    }\n\n    return encodePubKey(val.bytes);\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[ContractToken.prim]) {\n      return semantic[ContractToken.prim](val);\n    }\n\n    return {\n      string: val\n    };\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return ContractToken.prim;\n  }\n\n  generateSchema() {\n    const valueSchema = this.createToken(this.val.args[0], 0);\n    return {\n      __michelsonType: ContractToken.prim,\n      schema: {\n        parameter: this.val.args[0] ? valueSchema.generateSchema() : {}\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (ContractToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nContractToken.prim = 'contract';\n\nclass ListValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'ListValidationError';\n  }\n\n}\n\nclass ListToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  get valueSchema() {\n    return this.createToken(this.val.args[0], this.idx);\n  }\n\n  isValid(value) {\n    if (Array.isArray(value)) {\n      return null;\n    }\n\n    return new ListValidationError(value, this, 'Value must be an array');\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    const schema = this.createToken(this.val.args[0], 0);\n    return val.reduce((prev, current) => {\n      return [...prev, schema.EncodeObject(current)];\n    }, []);\n  }\n\n  Execute(val, semantics) {\n    const schema = this.createToken(this.val.args[0], 0);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return val.reduce((prev, current) => {\n      return [...prev, schema.Execute(current, semantics)];\n    }, []);\n  }\n\n  EncodeObject(args, semantic) {\n    const schema = this.createToken(this.val.args[0], 0);\n    const err = this.isValid(args);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[ListToken.prim]) {\n      return semantic[ListToken.prim](args);\n    }\n\n    return args.reduce((prev, current) => {\n      return [...prev, schema.EncodeObject(current)];\n    }, []);\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return {\n      [ListToken.prim]: this.valueSchema.ExtractSchema()\n    };\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: ListToken.prim,\n      schema: this.valueSchema.generateSchema()\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (ListToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    this.createToken(this.val.args[0], this.idx).findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n\n}\n\nListToken.prim = 'list';\n\nclass MutezValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'MutezValidationError';\n  }\n\n}\n\nclass MutezToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(val) {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return MutezToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: MutezToken.prim,\n      schema: MutezToken.prim\n    };\n  }\n\n  isValid(val) {\n    const bigNumber = new BigNumber(val);\n\n    if (bigNumber.isNaN()) {\n      return new MutezValidationError(val, this, `Value is not a number: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      int: String(val).toString()\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[MutezToken.prim]) {\n      return semantic[MutezToken.prim](val);\n    }\n\n    return {\n      int: String(val).toString()\n    };\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: {\n        int: String(val)\n      },\n      type: {\n        prim: MutezToken.prim\n      }\n    };\n  }\n\n  ToKey(_ref5) {\n    let {\n      int\n    } = _ref5;\n    return int;\n  }\n\n  compare(mutez1, mutez2) {\n    const o1 = Number(mutez1);\n    const o2 = Number(mutez2);\n\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (MutezToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nMutezToken.prim = 'mutez';\n\nclass BytesValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'BytesValidationError';\n  }\n\n}\n\nclass BytesToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: {\n        bytes: val\n      },\n      type: {\n        prim: BytesToken.prim\n      }\n    };\n  }\n\n  isValid(val) {\n    if (typeof val === 'string' && /^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new BytesValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  convertUint8ArrayToHexString(val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args) {\n    let val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      bytes: String(val).toString()\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[BytesToken.prim]) {\n      return semantic[BytesToken.prim](val);\n    }\n\n    return {\n      bytes: String(val).toString()\n    };\n  }\n\n  Execute(val) {\n    return val.bytes;\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return BytesToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: BytesToken.prim,\n      schema: BytesToken.prim\n    };\n  }\n\n  ToKey(_ref6) {\n    let {\n      bytes,\n      string\n    } = _ref6;\n\n    if (string) {\n      return string;\n    }\n\n    return bytes;\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (BytesToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nBytesToken.prim = 'bytes';\n\nclass OptionToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  subToken() {\n    return this.createToken(this.val.args[0], this.idx);\n  }\n\n  schema() {\n    return this.createToken(this.val.args[0], 0);\n  }\n\n  annot() {\n    return Array.isArray(this.val.annots) ? super.annot() : this.createToken(this.val.args[0], this.idx).annot();\n  }\n\n  Encode(args) {\n    const value = args;\n\n    if (value === undefined || value === null) {\n      return {\n        prim: 'None'\n      };\n    } else if (Array.isArray(value) && (value[value.length - 1] === undefined || value[value.length - 1] === null)) {\n      value.pop();\n      return {\n        prim: 'None'\n      };\n    }\n\n    return {\n      prim: 'Some',\n      args: [this.schema().Encode(args)]\n    };\n  }\n\n  EncodeObject(args, semantic) {\n    const value = args;\n\n    if (value === undefined || value === null) {\n      return {\n        prim: 'None'\n      };\n    }\n\n    return {\n      prim: 'Some',\n      args: [this.schema().EncodeObject(value, semantic)]\n    };\n  }\n\n  Execute(val, semantics) {\n    if (val.prim === 'None') {\n      return null;\n    }\n\n    return this.schema().Execute(val.args[0], semantics);\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return this.schema().ExtractSchema();\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: OptionToken.prim,\n      schema: this.schema().generateSchema()\n    };\n  }\n\n  ExtractSignature() {\n    return [...this.schema().ExtractSignature(), []];\n  }\n\n  get KeySchema() {\n    return this.schema();\n  }\n\n  compare(val1, val2) {\n    if (!val1) {\n      return -1;\n    } else if (!val2) {\n      return 1;\n    }\n\n    return this.KeySchema.compare(val1, val2);\n  }\n\n  ToKey(val) {\n    return this.Execute(val);\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations()\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (OptionToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    this.subToken().findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n\n}\n\nOptionToken.prim = 'option';\n\nclass TimestampToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(val) {\n    if (val.string && /^\\d+$/.test(val.string)) {\n      return new Date(Number(val.string) * 1000).toISOString();\n    } else if (val.string) {\n      return new Date(val.string).toISOString();\n    } else if (val.int) {\n      return new Date(Number(val.int) * 1000).toISOString();\n    }\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    return {\n      string: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    if (semantic && semantic[TimestampToken.prim]) {\n      return semantic[TimestampToken.prim](val);\n    }\n\n    return {\n      string: val\n    };\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return TimestampToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: TimestampToken.prim,\n      schema: TimestampToken.prim\n    };\n  }\n\n  ToKey(_ref7) {\n    let {\n      string\n    } = _ref7;\n    return string;\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: TimestampToken.prim\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (TimestampToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nTimestampToken.prim = 'timestamp';\n\nclass IntValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'IntValidationError';\n  }\n\n}\n\nclass IntToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(val) {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return IntToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: IntToken.prim,\n      schema: IntToken.prim\n    };\n  }\n\n  isValid(val) {\n    const bigNumber = new BigNumber(val);\n\n    if (bigNumber.isNaN()) {\n      return new IntValidationError(val, this, `Value is not a number: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      int: new BigNumber(val).toFixed()\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[IntToken.prim]) {\n      return semantic[IntToken.prim](val);\n    }\n\n    return {\n      int: new BigNumber(val).toFixed()\n    };\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: {\n        int: String(val)\n      },\n      type: {\n        prim: IntToken.prim\n      }\n    };\n  }\n\n  ToKey(_ref8) {\n    let {\n      int\n    } = _ref8;\n    return int;\n  }\n\n  compare(int1, int2) {\n    const o1 = Number(int1);\n    const o2 = Number(int2);\n\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (IntToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nIntToken.prim = 'int';\n\nclass UnitToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Encode(args) {\n    args.pop();\n    return {\n      prim: 'Unit'\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    if (semantic && semantic[UnitToken.prim]) {\n      return semantic[UnitToken.prim](val);\n    }\n\n    return {\n      prim: 'Unit'\n    };\n  }\n\n  Execute(_val) {\n    return UnitValue;\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return UnitToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: UnitToken.prim,\n      schema: UnitToken.prim\n    };\n  }\n\n  compare(_val1, _val2) {\n    return 0;\n  }\n\n  ToKey(_val) {\n    return UnitValue;\n  }\n\n  ToBigMapKey(_val) {\n    return {\n      key: {\n        prim: 'Unit'\n      },\n      type: {\n        prim: UnitToken.prim\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (UnitToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nUnitToken.prim = 'unit';\nconst publicKeyPrefixLength = 4;\n\nclass KeyValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'KeyValidationError';\n  }\n\n}\n\nclass KeyToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(val) {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodeKey(val.bytes);\n  }\n\n  isValid(value) {\n    if (validatePublicKey(value) !== ValidationResult.VALID) {\n      return new KeyValidationError(value, this, 'Key is not valid');\n    }\n\n    return null;\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[KeyToken.prim]) {\n      return semantic[KeyToken.prim](val);\n    }\n\n    return {\n      string: val\n    };\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return KeyToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: KeyToken.prim,\n      schema: KeyToken.prim\n    };\n  }\n\n  ToKey(val) {\n    return this.Execute(val);\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: KeyToken.prim\n      }\n    };\n  }\n\n  compare(key1, key2) {\n    const keyPrefix1 = this.getPrefix(key1);\n    const keyPrefix2 = this.getPrefix(key2);\n\n    if (keyPrefix1 === Prefix.EDPK && keyPrefix2 !== Prefix.EDPK) {\n      return -1;\n    } else if (keyPrefix1 === Prefix.SPPK && keyPrefix2 !== Prefix.SPPK) {\n      return keyPrefix2 === Prefix.EDPK ? 1 : -1;\n    } else if (keyPrefix1 === Prefix.P2PK) {\n      if (keyPrefix2 !== Prefix.P2PK) {\n        return 1;\n      }\n\n      const keyBytes1 = this.getP256PublicKeyComparableBytes(key1);\n      const keyBytes2 = this.getP256PublicKeyComparableBytes(key2);\n      return Buffer.compare(keyBytes1, keyBytes2);\n    }\n\n    return super.compare(key1, key2);\n  }\n\n  getPrefix(val) {\n    return val.substring(0, publicKeyPrefixLength);\n  }\n\n  getP256PublicKeyComparableBytes(p2pk) {\n    return b58cdecode(p2pk, prefix[Prefix.P2PK]).slice(1);\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (KeyToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nKeyToken.prim = 'key';\n\nclass KeyHashValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'KeyHashValidationError';\n  }\n\n}\n\nclass KeyHashToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(val) {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodeKeyHash(val.bytes);\n  }\n\n  isValid(value) {\n    if (validateKeyHash(value) !== ValidationResult.VALID) {\n      return new KeyHashValidationError(value, this, `KeyHash is not valid: ${value}`);\n    }\n\n    return null;\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[KeyHashToken.prim]) {\n      return semantic[KeyHashToken.prim](val);\n    }\n\n    return {\n      string: val\n    };\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return KeyHashToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: KeyHashToken.prim,\n      schema: KeyHashToken.prim\n    };\n  }\n\n  ToKey(_ref9) {\n    let {\n      string,\n      bytes\n    } = _ref9;\n\n    if (string) {\n      return string;\n    }\n\n    return encodeKeyHash(bytes);\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: KeyHashToken.prim\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (KeyHashToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nKeyHashToken.prim = 'key_hash';\n\nclass SignatureValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'SignatureValidationError';\n  }\n\n}\n\nclass SignatureToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(val) {\n    if (val.string) {\n      return val.string;\n    } // TODO decode the signature\n\n\n    return val.bytes;\n  }\n\n  isValid(value) {\n    if (validateSignature(value) !== ValidationResult.VALID) {\n      return new SignatureValidationError(value, this, 'Signature is not valid');\n    }\n\n    return null;\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[SignatureToken.prim]) {\n      return semantic[SignatureToken.prim](val);\n    }\n\n    return {\n      string: val\n    };\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return SignatureToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: SignatureToken.prim,\n      schema: SignatureToken.prim\n    };\n  }\n\n  ToKey(val) {\n    return this.Execute(val);\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: SignatureToken.prim\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (SignatureToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nSignatureToken.prim = 'signature';\n\nclass LambdaToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  get paramSchema() {\n    return this.createToken(this.val.args[0], this.idx);\n  }\n\n  get returnSchema() {\n    return this.createToken(this.val.args[1], this.idx + 1);\n  }\n\n  Execute(val) {\n    if (val.string) {\n      return val.string;\n    } else {\n      return val;\n    }\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    return val;\n  }\n\n  EncodeObject(val, semantic) {\n    if (semantic && semantic[LambdaToken.prim]) {\n      return semantic[LambdaToken.prim](val);\n    }\n\n    return val;\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return {\n      [LambdaToken.prim]: {\n        parameters: this.paramSchema.ExtractSchema(),\n        returns: this.returnSchema.ExtractSchema()\n      }\n    };\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: LambdaToken.prim,\n      schema: {\n        parameters: this.paramSchema.generateSchema(),\n        returns: this.returnSchema.generateSchema()\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (LambdaToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    this.createToken(this.val.args[0], this.idx).findAndReturnTokens(tokenToFind, tokens);\n    this.createToken(this.val.args[1], this.idx).findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n\n}\n\nLambdaToken.prim = 'lambda';\n\nclass OperationToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(val) {\n    return val.string;\n  }\n\n  Encode() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const val = args.pop();\n    return {\n      string: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    if (semantic && semantic[OperationToken.prim]) {\n      return semantic[OperationToken.prim](val);\n    }\n\n    return {\n      string: val\n    };\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return OperationToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: OperationToken.prim,\n      schema: OperationToken.prim\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (OperationToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nOperationToken.prim = 'operation';\n\nclass SetValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'SetValidationError';\n  }\n\n}\n\nclass SetToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  get KeySchema() {\n    return this.createToken(this.val.args[0], 0);\n  }\n\n  isValid(value) {\n    if (Array.isArray(value)) {\n      return null;\n    }\n\n    return new SetValidationError(value, this, 'Value must be an array');\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return val.sort((a, b) => this.KeySchema.compare(a, b)).reduce((prev, current) => {\n      return [...prev, this.KeySchema.EncodeObject(current)];\n    }, []);\n  }\n\n  Execute(val, semantics) {\n    return val.reduce((prev, current) => {\n      return [...prev, this.KeySchema.Execute(current, semantics)];\n    }, []);\n  }\n\n  EncodeObject(args, semantic) {\n    const err = this.isValid(args);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[SetToken.prim]) {\n      return semantic[SetToken.prim](args);\n    }\n\n    return args.sort((a, b) => this.KeySchema.compare(a, b)).reduce((prev, current) => {\n      return [...prev, this.KeySchema.EncodeObject(current)];\n    }, []);\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return SetToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: SetToken.prim,\n      schema: this.KeySchema.generateSchema()\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (SetToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    this.KeySchema.findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n\n}\n\nSetToken.prim = 'set';\n\nclass ChainIDValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'ChainIDValidationError';\n  }\n\n}\n\nclass ChainIDToken extends ComparableToken {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  isValid(value) {\n    if (validateChain(value) !== ValidationResult.VALID) {\n      return new ChainIDValidationError(value, this, 'ChainID is not valid');\n    }\n\n    return null;\n  }\n\n  Execute(val) {\n    return val[Object.keys(val)[0]];\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return ChainIDToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: ChainIDToken.prim,\n      schema: ChainIDToken.prim\n    };\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      string: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[ChainIDToken.prim]) {\n      return semantic[ChainIDToken.prim](val);\n    }\n\n    return {\n      string: val\n    };\n  }\n\n  ToKey(_ref10) {\n    let {\n      string\n    } = _ref10;\n    return string;\n  }\n\n  ToBigMapKey(val) {\n    return {\n      key: {\n        string: val\n      },\n      type: {\n        prim: ChainIDToken.prim\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (ChainIDToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nChainIDToken.prim = 'chain_id';\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when encoding and sending a ticket to the blockchain\r\n */\n\nclass EncodeTicketError extends Error {\n  constructor() {\n    super('Tickets cannot be sent to the blockchain; they are created on-chain');\n    this.name = 'TicketEncodeError';\n  }\n\n}\n\nconst ticketerType = {\n  prim: 'contract'\n};\nconst amountType = {\n  prim: 'int'\n};\n\nclass TicketToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  get valueToken() {\n    return this.createToken(this.val.args[0], this.idx);\n  }\n\n  Encode(_args) {\n    throw new EncodeTicketError();\n  }\n\n  EncodeObject(args, semantic) {\n    if (semantic && semantic[TicketToken.prim]) {\n      return semantic[TicketToken.prim](args, this.val);\n    }\n\n    throw new EncodeTicketError();\n  }\n\n  Execute(val, semantics) {\n    if (semantics && semantics[TicketToken.prim]) {\n      return semantics[TicketToken.prim](val, this.val);\n    }\n\n    const ticketer = this.createToken(ticketerType, this.idx);\n    const value = this.valueToken;\n    const amount = this.createToken(amountType, this.idx);\n\n    if (undefined === val.args[2] && undefined !== val.args[1].args) {\n      return {\n        ticketer: ticketer.Execute(val.args[0], semantics),\n        value: value.Execute(val.args[1].args[0], semantics),\n        amount: amount.Execute(val.args[1].args[1], semantics)\n      };\n    }\n\n    return {\n      ticketer: ticketer.Execute(val.args[0], semantics),\n      value: value.Execute(val.args[1], semantics),\n      amount: amount.Execute(val.args[2], semantics)\n    };\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return {\n      ticketer: ContractToken.prim,\n      value: this.valueToken.ExtractSchema(),\n      amount: IntToken.prim\n    };\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: TicketToken.prim,\n      schema: {\n        value: this.valueToken.generateSchema(),\n        ticketer: {\n          __michelsonType: ContractToken.prim,\n          schema: ContractToken.prim\n        },\n        amount: {\n          __michelsonType: IntToken.prim,\n          schema: IntToken.prim\n        }\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (TicketToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    this.valueToken.findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n\n}\n\nTicketToken.prim = 'ticket';\n\nclass NeverTokenError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'NeverTokenError';\n  }\n\n}\n\nclass NeverToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Encode(args) {\n    const val = args.pop();\n    throw new NeverTokenError(val, this, 'Assigning a value to the type never is forbidden.');\n  }\n\n  EncodeObject(val, semantic) {\n    if (semantic && semantic[NeverToken.prim]) {\n      return semantic[NeverToken.prim](val);\n    }\n\n    throw new NeverTokenError(val, this, 'Assigning a value to the type never is forbidden.');\n  }\n\n  Execute(val) {\n    throw new NeverTokenError(val, this, 'There is no literal value for the type never.');\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return NeverToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: NeverToken.prim,\n      schema: NeverToken.prim\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (NeverToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nNeverToken.prim = 'never';\n\nclass SaplingStateValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'SaplingStateValidationError';\n  }\n\n}\n\nclass SaplingStateToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  isValid(val) {\n    return typeof val === 'object' && Object.keys(val).length === 0;\n  }\n\n  Execute(val, semantic) {\n    if (semantic && semantic[SaplingStateToken.prim]) {\n      return semantic[SaplingStateToken.prim](val, this.val);\n    }\n\n    if ('int' in val) {\n      return val.int;\n    } else {\n      throw new SaplingStateValidationError(val, this, `Sapling state is expecting an object with an int property. Got ${JSON.stringify(val)}`);\n    }\n  }\n\n  Encode(args) {\n    const val = args.pop();\n\n    if (this.isValid(val)) {\n      return [];\n    } else {\n      throw new SaplingStateValidationError(val, this, `Invalid sapling_state. Received: ${val} while expecting: {}`);\n    }\n  }\n\n  EncodeObject(val, semantic) {\n    if (semantic && semantic[SaplingStateToken.prim]) {\n      return semantic[SaplingStateToken.prim](val);\n    }\n\n    if (this.isValid(val)) {\n      return [];\n    } else {\n      throw new SaplingStateValidationError(val, this, `Invalid sapling_state. Received: ${val} while expecting: {}`);\n    }\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return {\n      [SaplingStateToken.prim]: {\n        'memo-size': Number(this.val.args[0]['int'])\n      }\n    };\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: SaplingStateToken.prim,\n      schema: {\n        memoSize: this.val.args[0]['int']\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (SaplingStateToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nSaplingStateToken.prim = 'sapling_state';\n\nclass SaplingTransactionValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'SaplingTransactionValidationError';\n  }\n\n}\n\nclass SaplingTransactionToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(_val) {\n    throw new SaplingTransactionValidationError(_val, this, 'There is no literal value for the sapling_transaction type.');\n  }\n\n  validateBytes(val) {\n    const bytes = /^(0x|0X)?([0-9a-fA-F]*$)/.exec(val);\n\n    if (bytes && bytes[2].length % 2 === 0) {\n      return bytes[2];\n    } else {\n      throw new SaplingTransactionValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  convertUint8ArrayToHexString(val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args) {\n    let val = args.pop();\n    val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n    return {\n      bytes: String(val).toString()\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n\n    if (semantic && semantic[SaplingTransactionToken.prim]) {\n      return semantic[SaplingTransactionToken.prim](val);\n    }\n\n    return {\n      bytes: String(val).toString()\n    };\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return {\n      [SaplingTransactionToken.prim]: {\n        'memo-size': Number(this.val.args[0]['int'])\n      }\n    };\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: SaplingTransactionToken.prim,\n      schema: {\n        memoSize: this.val.args[0]['int']\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (SaplingTransactionToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nSaplingTransactionToken.prim = 'sapling_transaction';\n\nclass Bls12381frValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'Bls12381frValidationError';\n  }\n\n}\n\nclass Bls12381frToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  isValid(val) {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381frValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  convertUint8ArrayToHexString(val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args) {\n    let val = args.pop();\n\n    if (typeof val === 'number') {\n      return {\n        int: val.toString()\n      };\n    } else {\n      val = this.convertUint8ArrayToHexString(val);\n      const err = this.isValid(val);\n\n      if (err) {\n        throw err;\n      }\n\n      return {\n        bytes: val\n      };\n    }\n  }\n\n  EncodeObject(val, semantic) {\n    if (semantic && semantic[Bls12381frToken.prim]) {\n      return semantic[Bls12381frToken.prim](val);\n    }\n\n    if (typeof val === 'number') {\n      return {\n        int: val.toString()\n      };\n    } else {\n      val = this.convertUint8ArrayToHexString(val);\n      const err = this.isValid(val);\n\n      if (err) {\n        throw err;\n      }\n\n      return {\n        bytes: val\n      };\n    }\n  }\n\n  Execute(val) {\n    return val.bytes;\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return Bls12381frToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: Bls12381frToken.prim,\n      schema: Bls12381frToken.prim\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (Bls12381frToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n} // An element of the BLS12-381 scalar field Fr\n// see https://tezos.gitlab.io/michelson-reference/#type-bls12_381_fr\n\n\nBls12381frToken.prim = 'bls12_381_fr';\n\nclass Bls12381g1ValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'Bls12381g1ValidationError';\n  }\n\n}\n\nclass Bls12381g1Token extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  isValid(val) {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381g1ValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  convertUint8ArrayToHexString(val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args) {\n    let val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      bytes: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[Bls12381g1Token.prim]) {\n      return semantic[Bls12381g1Token.prim](val);\n    }\n\n    return {\n      bytes: val\n    };\n  }\n\n  Execute(val) {\n    return val.bytes;\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return Bls12381g1Token.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: Bls12381g1Token.prim,\n      schema: Bls12381g1Token.prim\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (Bls12381g1Token.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n} // A point on the BLS12-381 curve G1\n// See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g1\n\n\nBls12381g1Token.prim = 'bls12_381_g1';\n\nclass Bls12381g2ValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'Bls12381g2ValidationError';\n  }\n\n}\n\nclass Bls12381g2Token extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  isValid(val) {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381g2ValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  convertUint8ArrayToHexString(val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args) {\n    let val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      bytes: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[Bls12381g2Token.prim]) {\n      return semantic[Bls12381g2Token.prim](val);\n    }\n\n    return {\n      bytes: val\n    };\n  }\n\n  Execute(val) {\n    return val.bytes;\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return Bls12381g2Token.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: Bls12381g2Token.prim,\n      schema: Bls12381g2Token.prim\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (Bls12381g2Token.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n} // A point on the BLS12-381 curve G2\n// See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g2\n\n\nBls12381g2Token.prim = 'bls12_381_g2';\n\nclass ChestValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'ChestValidationError';\n  }\n\n}\n\nclass ChestToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  isValid(val) {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new ChestValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  convertUint8ArrayToHexString(val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args) {\n    let val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      bytes: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[ChestToken.prim]) {\n      return semantic[ChestToken.prim](val);\n    }\n\n    return {\n      bytes: val\n    };\n  }\n\n  Execute(val) {\n    return val.bytes;\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return ChestToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: ChestToken.prim,\n      schema: ChestToken.prim\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (ChestToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nChestToken.prim = 'chest';\n\nclass ChestKeyValidationError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'ChestKeyValidationError';\n  }\n\n}\n\nclass ChestKeyToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  isValid(val) {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new ChestKeyValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  convertUint8ArrayToHexString(val) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args) {\n    let val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    return {\n      bytes: val\n    };\n  }\n\n  EncodeObject(val, semantic) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[ChestKeyToken.prim]) {\n      return semantic[ChestKeyToken.prim](val);\n    }\n\n    return {\n      bytes: val\n    };\n  }\n\n  Execute(val) {\n    return val.bytes;\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return ChestKeyToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: ChestKeyToken.prim,\n      schema: ChestKeyToken.prim\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (ChestKeyToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nChestKeyToken.prim = 'chest_key';\n\nclass GlobalConstantEncodingError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'GlobalConstantEncodingError';\n  }\n\n}\n\nclass GlobalConstantDecodingError extends TokenValidationError {\n  constructor(value, token, message) {\n    super(value, token, message);\n    this.value = value;\n    this.token = token;\n    this.name = 'GlobalConstantDecodingError';\n  }\n\n}\n\nclass GlobalConstantToken extends Token {\n  constructor(val, idx, fac) {\n    super(val, idx, fac);\n    this.val = val;\n    this.idx = idx;\n    this.fac = fac;\n  }\n\n  Execute(val, semantic) {\n    if (semantic && semantic[GlobalConstantToken.prim]) {\n      return semantic[GlobalConstantToken.prim](val, this.val);\n    } else {\n      throw new GlobalConstantDecodingError(val, this, `Unable to decode a value represented by a global constants. Please provide an expanded script to the Michelson-Encoder or semantics for the decoding. The following global constant hash was encountered: ${this.val.args[0]['string']}.`);\n    }\n  }\n\n  Encode(args) {\n    throw new GlobalConstantEncodingError(args, this, `Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: ${this.val.args[0]['string']}.`);\n  }\n\n  EncodeObject(val, semantic) {\n    if (semantic && semantic[GlobalConstantToken.prim]) {\n      return semantic[GlobalConstantToken.prim](val);\n    }\n\n    throw new GlobalConstantEncodingError(val, this, `Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: ${this.val.args[0]['string']}.`);\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return GlobalConstantToken.prim;\n  }\n\n  generateSchema() {\n    return {\n      __michelsonType: GlobalConstantToken.prim,\n      schema: {\n        hash: this.val.args[0]['string']\n      }\n    };\n  }\n\n  findAndReturnTokens(tokenToFind, tokens) {\n    if (GlobalConstantToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n\n    return tokens;\n  }\n\n}\n\nGlobalConstantToken.prim = 'constant';\nconst tokens = [PairToken, NatToken, StringToken, BigMapToken, AddressToken, TxRollupL2AddressToken, MapToken, BoolToken, OrToken, ContractToken, ListToken, MutezToken, BytesToken, OptionToken, TimestampToken, IntToken, UnitToken, KeyToken, KeyHashToken, SignatureToken, LambdaToken, OperationToken, SetToken, ChainIDToken, TicketToken, NeverToken, SaplingStateToken, SaplingTransactionToken, Bls12381frToken, Bls12381g1Token, Bls12381g2Token, ChestToken, ChestKeyToken, GlobalConstantToken];\n/**\r\n *  @category Error\r\n *  @description Error that indicates a script having an invalid type or it being unsupported by the Michelson Encoder. Note some protocol changes might affect this, we encourage users to open an issue so we can look into implementing support for said types.\r\n */\n\nclass InvalidTokenError extends Error {\n  constructor(message, data) {\n    super(message);\n    this.message = message;\n    this.data = data;\n    this.name = 'Invalid token error';\n  }\n\n}\n\nfunction createToken(val, idx) {\n  if (Array.isArray(val)) {\n    return new PairToken(val, idx, createToken);\n  }\n\n  const t = tokens.find(x => x.prim === val.prim);\n\n  if (!t) {\n    throw new InvalidTokenError('Malformed data expected a value with a valid prim property', val);\n  }\n\n  return new t(val, idx, createToken);\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when encoding (transforming JS parameter into JSON Michelson)the parameter of the view\r\n */\n\n\nclass ViewEncodingError extends Error {\n  constructor(smartContractViewName, originalError) {\n    super(`Unable to encode the parameter of the view: ${smartContractViewName}.`);\n    this.smartContractViewName = smartContractViewName;\n    this.originalError = originalError;\n    this.name = 'ViewEncodingError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid on-chain view found on the script\r\n */\n\n\nclass InvalidScriptError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'InvalidScriptError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid RPC response being passed or used\r\n */\n\n\nclass InvalidRpcResponseError extends Error {\n  constructor(script) {\n    super(`Invalid RPC response passed as argument(s)`);\n    this.script = script;\n    this.name = 'InvalidRpcResponseError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure that occurred during encoding\r\n */\n\n\nclass ParameterEncodingError extends Error {\n  constructor(message, args, originalError) {\n    super(`\n      ${message}. Error encountered when trying to encode arguments: \\n\n      [${args}]\n    `);\n    this.message = message;\n    this.args = args;\n    this.originalError = originalError;\n    this.name = 'ParameterEncodingError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid big map schema being passed or used\r\n */\n\n\nclass InvalidBigMapSchema extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'InvalidBigMapSchema';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates an invalid big map diff being passed or used\r\n */\n\n\nclass InvalidBigMapDiff extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'InvalidBigMapDiff';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when trying to encode big maps\r\n */\n\n\nclass BigMapEncodingError extends Error {\n  constructor(obj, details) {\n    super(`Unable to encode ${obj}. ${details}`);\n    this.obj = obj;\n    this.details = details;\n    this.name = 'BigMapEncodingError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description Error that indicates a failure when trying to encode storage\r\n */\n\n\nclass StorageEncodingError extends Error {\n  constructor(obj, details) {\n    super(`Unable to encode ${obj}. ${details}`);\n    this.obj = obj;\n    this.details = details;\n    this.name = 'StorageEncodingError';\n  }\n\n}\n/**\r\n *  @category Error\r\n *  @description General error that indicates a function not being passed a necessary argument\r\n */\n\n\nclass MissingArgumentError extends Error {\n  constructor(message) {\n    super(message);\n    this.message = message;\n    this.name = 'MissingArgumentError';\n  }\n\n}\n\nvar _a;\n\nconst schemaTypeSymbol = Symbol.for('taquito-schema-type-symbol'); // collapse comb pair\n\nfunction collapse(val) {\n  let prim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PairToken.prim;\n\n  var _b, _c;\n\n  if (Array.isArray(val)) {\n    return collapse({\n      prim: prim,\n      args: val\n    }, prim);\n  }\n\n  const extended = val;\n\n  if (extended.prim === prim && extended.args && extended.args.length > 2) {\n    return Object.assign(Object.assign({}, extended), {\n      args: [(_b = extended.args) === null || _b === void 0 ? void 0 : _b[0], {\n        prim: prim,\n        args: (_c = extended.args) === null || _c === void 0 ? void 0 : _c.slice(1)\n      }]\n    });\n  }\n\n  return extended;\n}\n\nfunction deepEqual(a, b) {\n  const ac = collapse(a);\n  const bc = collapse(b);\n  return ac.prim === bc.prim && (ac.args === undefined && bc.args === undefined || ac.args !== undefined && bc.args !== undefined && ac.args.length === bc.args.length && ac.args.every((v, i) => {\n    var _b, _c;\n\n    return deepEqual(v, (_c = (_b = bc.args) === null || _b === void 0 ? void 0 : _b[i]) !== null && _c !== void 0 ? _c : {});\n  })) && (ac.annots === undefined && bc.annots === undefined || ac.annots !== undefined && bc.annots !== undefined && ac.annots.length === bc.annots.length && ac.annots.every((v, i) => {\n    var _b;\n\n    return v === ((_b = bc.annots) === null || _b === void 0 ? void 0 : _b[i]);\n  }));\n}\n/**\r\n * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\r\n */\n\n\nclass Schema {\n  constructor(val) {\n    this.val = val;\n    this[_a] = true;\n    this.root = createToken(val, 0);\n\n    if (this.root instanceof BigMapToken) {\n      this.bigMap = this.root;\n    } else if (this.isExpressionExtended(val) && val.prim === 'pair') {\n      const exp = val.args[0];\n\n      if (this.isExpressionExtended(exp) && exp.prim === 'big_map') {\n        this.bigMap = new BigMapToken(exp, 0, createToken);\n      }\n    }\n  }\n\n  static isSchema(obj) {\n    return obj && obj[schemaTypeSymbol] === true;\n  }\n\n  static fromRPCResponse(val) {\n    const storage = val && val.script && Array.isArray(val.script.code) && val.script.code.find(x => {\n      if (!Array.isArray(x)) {\n        const checkExtended = x;\n\n        if (checkExtended.prim) {\n          return checkExtended.prim === 'storage';\n        } else {\n          return false;\n        }\n      } else {\n        // storage passed along as original storage value\n        this.fromRPCResponse({\n          script: {\n            code: x,\n            storage: val.script.storage\n          }\n        });\n      }\n    });\n\n    if (!storage || !Array.isArray(storage.args)) {\n      throw new InvalidRpcResponseError(val.script);\n    }\n\n    return new Schema(storage.args[0]);\n  }\n\n  isExpressionExtended(val) {\n    return 'prim' in val && Array.isArray(val.args);\n  }\n\n  removeTopLevelAnnotation(obj) {\n    // PairToken and OrToken can have redundant top level annotation in their storage\n    if (this.root instanceof PairToken || this.root instanceof OrToken) {\n      if (this.root.hasAnnotations() && typeof obj === 'object' && Object.keys(obj).length === 1) {\n        return obj[Object.keys(obj)[0]];\n      }\n    }\n\n    return obj;\n  }\n\n  Execute(val, semantics) {\n    const storage = this.root.Execute(val, semantics);\n    return this.removeTopLevelAnnotation(storage);\n  }\n\n  Typecheck(val) {\n    if (this.root instanceof BigMapToken && Number.isInteger(Number(val))) {\n      return true;\n    }\n\n    try {\n      this.root.EncodeObject(val);\n      return true;\n    } catch (ex) {\n      return false;\n    }\n  }\n\n  ExecuteOnBigMapDiff(diff, semantics) {\n    if (!this.bigMap) {\n      throw new InvalidBigMapSchema('Big map schema is undefined');\n    }\n\n    if (!Array.isArray(diff)) {\n      throw new InvalidBigMapDiff('Big map diff must be an array');\n    }\n\n    const eltFormat = diff.map(_ref11 => {\n      let {\n        key,\n        value\n      } = _ref11;\n      return {\n        args: [key, value]\n      };\n    });\n    return this.bigMap.Execute(eltFormat, semantics);\n  }\n\n  ExecuteOnBigMapValue(key, semantics) {\n    if (!this.bigMap) {\n      throw new InvalidBigMapSchema('No big map schema');\n    }\n\n    return this.bigMap.ValueSchema.Execute(key, semantics);\n  }\n\n  EncodeBigMapKey(key) {\n    if (!this.bigMap) {\n      throw new InvalidBigMapSchema('Big map schema is undefined');\n    }\n\n    try {\n      return this.bigMap.KeySchema.ToBigMapKey(key);\n    } catch (ex) {\n      throw new BigMapEncodingError('big map key', ex);\n    }\n  }\n\n  Encode(value, semantics) {\n    try {\n      return this.root.EncodeObject(value, semantics);\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new StorageEncodingError('storage object', ex);\n    }\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return this.removeTopLevelAnnotation(this.root.ExtractSchema());\n  }\n  /**\r\n   * @description Produce a representation of the storage schema.\r\n   * Note: Provide guidance on how to write the storage object for the origination operation with Taquito.\r\n   */\n\n\n  generateSchema() {\n    return this.removeTopLevelAnnotation(this.root.generateSchema());\n  }\n  /**\r\n   * @deprecated\r\n   */\n\n\n  ComputeState(tx, state) {\n    if (!this.bigMap) {\n      throw new InvalidBigMapSchema('Big map schema is undefined');\n    }\n\n    const bigMap = tx.reduce((prev, current) => {\n      return Object.assign(Object.assign({}, prev), this.ExecuteOnBigMapDiff(current.contents[0].metadata.operation_result.big_map_diff));\n    }, {});\n    return Object.assign(Object.assign({}, this.Execute(state)), {\n      [this.bigMap.annot()]: bigMap\n    });\n  }\n  /**\r\n   * @description Look up in top-level pairs of the storage to find a value matching the specified type\r\n   *\r\n   * @returns The first value found that match the type or `undefined` if no value is found\r\n   *\r\n   * @param storage storage to parse to find the value\r\n   * @param valueType type of value to look for\r\n   *\r\n   */\n\n\n  FindFirstInTopLevelPair(storage, valueType) {\n    return this.findValue(this.root['val'], storage, valueType);\n  } // TODO check these type casts\n\n\n  findValue(schema, storage, valueToFind) {\n    if (deepEqual(valueToFind, schema)) {\n      return storage;\n    }\n\n    if (Array.isArray(schema) || schema.prim === 'pair') {\n      const sch = collapse(schema);\n      const strg = collapse(storage, 'Pair');\n\n      if (sch.args === undefined || strg.args === undefined) {\n        throw new MissingArgumentError('Tokens have no arguments'); // unlikely\n      }\n\n      if (sch.args[0]) return (// unsafe\n        this.findValue(sch.args[0], strg.args[0], valueToFind) || this.findValue(sch.args[1], strg.args[1], valueToFind)\n      );\n    }\n  }\n  /**\r\n   * @description Look up the schema to find any occurrence of a particular token.\r\n   *\r\n   * @returns an array of tokens of the specified kind or an empty array if no token was found\r\n   *\r\n   * @param tokenToFind string representing the prim property of the token to find\r\n   *\r\n   * @example\r\n   * ```\r\n   * Useful to find all global constants in a script, an array of GlobalConstantToken is returned:\r\n   *\r\n   * const schema = new Schema(script);\r\n   * const allGlobalConstantTokens = schema.findToken('constant');\r\n   * ```\r\n   *\r\n   */\n\n\n  findToken(tokenToFind) {\n    const tokens = [];\n    return this.root.findAndReturnTokens(tokenToFind, tokens);\n  }\n\n}\n\n_a = schemaTypeSymbol;\n/**\r\n * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\r\n */\n\nclass ParameterSchema {\n  constructor(val) {\n    this.root = createToken(val, 0);\n  }\n\n  static fromRPCResponse(val) {\n    const parameter = val && val.script && Array.isArray(val.script.code) && val.script.code.find(x => x.prim === 'parameter');\n\n    if (!parameter || !Array.isArray(parameter.args)) {\n      throw new InvalidRpcResponseError(val.script);\n    }\n\n    return new ParameterSchema(parameter.args[0]);\n  }\n\n  get isMultipleEntryPoint() {\n    return this.root instanceof OrToken || this.root instanceof OptionToken && this.root.subToken() instanceof OrToken;\n  }\n\n  get hasAnnotation() {\n    if (this.isMultipleEntryPoint) {\n      return Object.keys(this.ExtractSchema())[0] !== '0';\n    } else {\n      return true;\n    }\n  }\n\n  Execute(val, semantics) {\n    return this.root.Execute(val, semantics);\n  }\n\n  Encode() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    try {\n      return this.root.Encode(args.reverse());\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new ParameterEncodingError('Unable to encode parameter', args.toString(), ex);\n    }\n  }\n\n  EncodeObject(value, semantics) {\n    try {\n      return this.root.EncodeObject(value, semantics);\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new ParameterEncodingError('Unable to encode parameter object', value, ex);\n    }\n  }\n  /**\r\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\r\n   *\r\n   */\n\n\n  ExtractSchema() {\n    return this.root.ExtractSchema();\n  }\n  /**\r\n   * @description Produce a schema grouping together all the entry points of a contract.\r\n   */\n\n\n  generateSchema() {\n    return this.root.generateSchema();\n  }\n\n  ExtractSignatures() {\n    return this.root.ExtractSignature();\n  }\n\n}\n\nclass ViewSchema {\n  constructor(val) {\n    if (val.length !== 4 || !('string' in val[0])) {\n      throw new InvalidScriptError(`Invalid on-chain view: ${JSON.stringify(val)}`);\n    } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n    this.viewName = val[0]['string'];\n    this.viewArgsType = val[1];\n    this.viewReturnType = val[2];\n    this.instructions = val[3];\n    this.rootArgsType = createToken(this.viewArgsType, 0);\n    this.rootReturnType = createToken(this.viewReturnType, 0);\n  }\n  /**\r\n   *\r\n   * @description Create an instance of ViewSchema for each view in a script\r\n   *\r\n   * @param val contract script obtained from the RPC\r\n   * @returns array of ViewSchema or empty array if there is no view in the contract\r\n   */\n\n\n  static fromRPCResponse(val) {\n    const allViewSchema = [];\n    const views = val && val.script && Array.isArray(val.script.code) && val.script.code.filter(x => x.prim === 'view');\n\n    if (views) {\n      views.forEach(view => {\n        if (!view.args || view.args.length !== 4) {\n          throw new InvalidScriptError(`Invalid on-chain view found in the script: ${JSON.stringify(view)}`);\n        }\n\n        allViewSchema.push(new ViewSchema(view.args));\n      });\n    }\n\n    return allViewSchema;\n  }\n  /**\r\n   *\r\n   * @description Transform the view parameter into Michelson\r\n   *\r\n   * @param args parameter of the view in js format\r\n   * @returns parameter of the view in Michelson\r\n   */\n\n\n  encodeViewArgs(args) {\n    try {\n      return this.rootArgsType.EncodeObject(args);\n    } catch (ex) {\n      throw new ViewEncodingError(this.viewName, ex);\n    }\n  }\n  /**\r\n   *\r\n   * @description Transform the view result from Michelson to readable data\r\n   *\r\n   * @param val result of the view in JSON Michelson\r\n   * @param semantics optional semantics to override the default decoding behavior\r\n   * @returns result of the view in a readable format\r\n   */\n\n\n  decodeViewResult(val, semantics) {\n    return this.rootReturnType.Execute(val, semantics);\n  }\n  /**\r\n   *\r\n   * @description Return the signature of the view parameter\r\n   */\n\n\n  extractArgsSchema() {\n    return this.rootArgsType.ExtractSchema();\n  }\n  /**\r\n   *\r\n   * @description Return the format of the view result\r\n   */\n\n\n  extractResultSchema() {\n    return this.rootReturnType.ExtractSchema();\n  }\n\n} // IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n\n\nconst VERSION = {\n  \"commitHash\": \"6d90b3d5e616a6e9b9ad9dd8453b5068e7396fff\",\n  \"version\": \"13.0.1\"\n};\n/**\r\n * @packageDocumentation\r\n * @module @taquito/michelson-encoder\r\n */\n\nconst UnitValue = Symbol();\nconst SaplingStateValue = {};\nexport { AddressValidationError, BigMapEncodingError, BigMapValidationError, BytesValidationError, ChainIDValidationError, ContractValidationError, EncodeTicketError, IntValidationError, InvalidBigMapDiff, InvalidBigMapSchema, InvalidMapTypeError, InvalidRpcResponseError, InvalidScriptError, KeyHashValidationError, KeyValidationError, ListValidationError, MapTypecheckError, MapValidationError, MichelsonMap, MissingArgumentError, MutezValidationError, NatValidationError, OrTokenDecodingError, ParameterEncodingError, ParameterSchema, SaplingStateValue, Schema, SetValidationError, SignatureValidationError, StorageEncodingError, Token, TokenArgumentValidationError, TokenComparisonError, UnitValue, VERSION, ViewEncodingError, ViewSchema };","map":{"version":3,"mappings":"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","names":["InvalidMapTypeError","Error","constructor","mapType","name","michelsonMapTypeSymbol","Symbol","for","isMapType","value","Array","isArray","args","length","MapTypecheckError","type","errorType","MichelsonMap","Map","_a","setType","isMichelsonMap","obj","toString","keySchema","Schema","valueSchema","removeType","undefined","fromLiteral","map","Object","keys","forEach","key","set","typecheckKey","Typecheck","typecheckValue","assertTypecheckValue","assertTypecheckKey","serializeDeterministically","stringify","entries","values","valueMap","keyMap","get","strKey","delete","has","clear","size","cb","TokenValidationError","token","baseMessage","annot","annotText","message","Token","val","idx","fac","typeWithoutAnnotations","handleMichelsonExpression","array","item","extended","prim","x","handleMichelsonExtended","annots","String","replace","hasAnnotations","tokenVal","ExtractSignature","ExtractSchema","ComparableToken","compare","o1","o2","BigMapValidationError","BigMapToken","ValueSchema","createToken","KeySchema","big_map","generateSchema","__michelsonType","schema","isValid","objLitToMichelsonMap","Encode","pop","err","from","sort","a","b","EncodeObject","semantic","Execute","current","ToKey","int","JSON","findAndReturnTokens","tokenToFind","tokens","push","OrTokenDecodingError","OrToken","label","leftToken","keyCount","rightToken","newSig","sig","semantics","traversal","getLeftValue","getRightValue","concat","leftValue","rightValue","res","findToken","tok","val1","val2","labelVal1","labelVal2","encoded1","encoded2","ToBigMapKey","TokenArgumentValidationError","TokenComparisonError","collapse","PairToken","slice","cnt","t","leftSig","rightSig","getValue","result","NatValidationError","NatToken","BigNumber","toFixed","bigNumber","isNaN","isNegative","nat1","nat2","Number","StringToken","string","AddressValidationError","AddressToken","decoded","b58decode","bytes","validateAddress","ValidationResult","VALID","encodePubKey","address1","address2","isImplicit","address","startsWith","implicit1","implicit2","MapValidationError","MapToken","BoolToken","toLowerCase","TxRollupL2AddressValidationError","TxRollupL2AddressToken","b58decodeL2Address","encodeL2Address","ContractValidationError","ContractToken","parameter","ListValidationError","ListToken","reduce","prev","MutezValidationError","MutezToken","mutez1","mutez2","BytesValidationError","BytesToken","test","convertUint8ArrayToHexString","Uint8Array","Buffer","OptionToken","subToken","TimestampToken","Date","toISOString","IntValidationError","IntToken","int1","int2","UnitToken","_val","UnitValue","_val1","_val2","publicKeyPrefixLength","KeyValidationError","KeyToken","encodeKey","validatePublicKey","key1","key2","keyPrefix1","getPrefix","keyPrefix2","Prefix","EDPK","SPPK","P2PK","keyBytes1","getP256PublicKeyComparableBytes","keyBytes2","substring","p2pk","b58cdecode","prefix","KeyHashValidationError","KeyHashToken","encodeKeyHash","validateKeyHash","SignatureValidationError","SignatureToken","validateSignature","LambdaToken","paramSchema","returnSchema","parameters","returns","OperationToken","SetValidationError","SetToken","ChainIDValidationError","ChainIDToken","validateChain","EncodeTicketError","ticketerType","amountType","TicketToken","valueToken","_args","ticketer","amount","NeverTokenError","NeverToken","SaplingStateValidationError","SaplingStateToken","memoSize","SaplingTransactionValidationError","SaplingTransactionToken","validateBytes","exec","Bls12381frValidationError","Bls12381frToken","Bls12381g1ValidationError","Bls12381g1Token","Bls12381g2ValidationError","Bls12381g2Token","ChestValidationError","ChestToken","ChestKeyValidationError","ChestKeyToken","GlobalConstantEncodingError","GlobalConstantDecodingError","GlobalConstantToken","hash","InvalidTokenError","data","find","ViewEncodingError","originalError","smartContractViewName","InvalidScriptError","InvalidRpcResponseError","script","ParameterEncodingError","InvalidBigMapSchema","InvalidBigMapDiff","BigMapEncodingError","details","StorageEncodingError","MissingArgumentError","schemaTypeSymbol","_c","deepEqual","ac","bc","every","v","i","_b","root","bigMap","isExpressionExtended","exp","isSchema","fromRPCResponse","storage","code","checkExtended","removeTopLevelAnnotation","isInteger","ex","ExecuteOnBigMapDiff","diff","eltFormat","ExecuteOnBigMapValue","EncodeBigMapKey","ComputeState","tx","state","contents","metadata","operation_result","big_map_diff","FindFirstInTopLevelPair","valueType","findValue","valueToFind","sch","strg","ParameterSchema","isMultipleEntryPoint","hasAnnotation","reverse","ExtractSignatures","ViewSchema","viewName","viewArgsType","viewReturnType","instructions","rootArgsType","rootReturnType","allViewSchema","views","filter","view","encodeViewArgs","decodeViewResult","extractArgsSchema","extractResultSchema","SaplingStateValue"],"sources":["../src/michelson-map.ts","../src/tokens/token.ts","../src/tokens/bigmap.ts","../src/tokens/or.ts","../src/tokens/pair.ts","../src/tokens/comparable/nat.ts","../src/tokens/comparable/string.ts","../src/tokens/comparable/address.ts","../src/tokens/map.ts","../src/tokens/comparable/bool.ts","../src/tokens/comparable/tx_rollup_l2_address.ts","../src/tokens/contract.ts","../src/tokens/list.ts","../src/tokens/comparable/mutez.ts","../src/tokens/comparable/bytes.ts","../src/tokens/option.ts","../src/tokens/comparable/timestamp.ts","../src/tokens/comparable/int.ts","../src/tokens/unit.ts","../src/tokens/key.ts","../src/tokens/comparable/key_hash.ts","../src/tokens/signature.ts","../src/tokens/lambda.ts","../src/tokens/operation.ts","../src/tokens/set.ts","../src/tokens/chain-id.ts","../src/tokens/ticket.ts","../src/tokens/never.ts","../src/tokens/sapling-state.ts","../src/tokens/sapling-transaction.ts","../src/tokens/bls12-381-fr.ts","../src/tokens/bls12-381-g1.ts","../src/tokens/bls12-381-g2.ts","../src/tokens/chest.ts","../src/tokens/chest-key.ts","../src/tokens/constant.ts","../src/tokens/tokens.ts","../src/tokens/createToken.ts","../src/schema/error.ts","../src/schema/storage.ts","../src/schema/parameter.ts","../src/schema/view-schema.ts","../src/version.ts","../src/taquito-michelson-encoder.ts"],"sourcesContent":["import { MichelsonV1Expression } from '@taquito/rpc';\nimport { Schema } from './schema/storage';\nimport stringify from 'fast-json-stable-stringify';\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid map type being passed or used\n */\nexport class InvalidMapTypeError extends Error {\n  public name = 'InvalidMapTypeError';\n  constructor(public mapType: string) {\n    super(`The map type '${mapType}' is invalid`);\n  }\n}\n\n// Retrieve a unique symbol associated with the key from the environment\n// Used in order to identify all object that are of type MichelsonMap even if they come from different module\nconst michelsonMapTypeSymbol = Symbol.for('taquito-michelson-map-type-symbol');\n\nexport type MichelsonMapKey = Array<any> | object | string | boolean | number;\n\nconst isMapType = (\n  value: MichelsonV1Expression\n): value is { prim: 'map' | 'big_map'; args: [MichelsonV1Expression, MichelsonV1Expression] } => {\n  return 'args' in value && Array.isArray(value.args) && value.args.length === 2;\n};\n\n/**\n *  @category Error\n *  @description Error that indicates a map type mismatch, where an attempt to set a key or value in a Map doesn't match the defined type of the Map\n */\nexport class MapTypecheckError extends Error {\n  name = 'MapTypecheckError';\n\n  constructor(public readonly value: any, public readonly type: any, errorType: 'key' | 'value') {\n    super(`${errorType} not compliant with underlying michelson type`);\n  }\n}\n\n/**\n * @description Michelson Map is an abstraction over the michelson native map. It supports complex Pair as key\n */\nexport class MichelsonMap<K extends MichelsonMapKey, T> {\n  private valueMap = new Map<string, T>();\n  private keyMap = new Map<string, K>();\n\n  public [michelsonMapTypeSymbol] = true;\n\n  // Used to check if an object is a michelson map.\n  // Using instanceof was not working for project that had multiple instance of taquito dependencies\n  // as the class constructor is different\n  static isMichelsonMap(obj: any): obj is MichelsonMap<any, any> {\n    return obj && obj[michelsonMapTypeSymbol] === true;\n  }\n\n  private keySchema?: Schema;\n  private valueSchema?: Schema;\n\n  /**\n   * @param mapType If specified key and value will be type-checked before being added to the map\n   *\n   * @example new MichelsonMap({ prim: \"map\", args: [{prim: \"string\"}, {prim: \"int\"}]})\n   */\n  constructor(mapType?: MichelsonV1Expression) {\n    if (mapType) {\n      this.setType(mapType);\n    }\n  }\n\n  setType(mapType: MichelsonV1Expression) {\n    if (!isMapType(mapType)) {\n      throw new InvalidMapTypeError(mapType.toString());\n    }\n\n    this.keySchema = new Schema(mapType.args[0]);\n    this.valueSchema = new Schema(mapType.args[1]);\n  }\n\n  removeType() {\n    this.keySchema = undefined;\n    this.valueSchema = undefined;\n  }\n\n  static fromLiteral(obj: { [key: string]: any }, mapType?: MichelsonV1Expression) {\n    const map = new MichelsonMap(mapType);\n    Object.keys(obj).forEach((key) => {\n      map.set(key, obj[key]);\n    });\n    return map;\n  }\n\n  private typecheckKey(key: K) {\n    if (this.keySchema) {\n      return this.keySchema.Typecheck(key);\n    }\n\n    return true;\n  }\n\n  private typecheckValue(value: T) {\n    if (this.valueSchema) {\n      return this.valueSchema.Typecheck(value);\n    }\n\n    return true;\n  }\n\n  private assertTypecheckValue(value: T) {\n    if (!this.typecheckValue(value)) {\n      throw new MapTypecheckError(value, this.valueSchema, 'value');\n    }\n  }\n\n  private assertTypecheckKey(key: K) {\n    if (!this.typecheckKey(key)) {\n      throw new MapTypecheckError(key, this.keySchema, 'key');\n    }\n  }\n\n  private serializeDeterministically(key: K): string {\n    return stringify(key);\n  }\n\n  *keys(): Generator<K> {\n    for (const [key] of this.entries()) {\n      yield key;\n    }\n  }\n\n  *values(): Generator<T> {\n    for (const [, value] of this.entries()) {\n      yield value;\n    }\n  }\n\n  *entries(): Generator<[K, T]> {\n    for (const key of this.valueMap.keys()) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      yield [this.keyMap.get(key)!, this.valueMap.get(key)!];\n    }\n  }\n\n  get(key: K): T | undefined {\n    this.assertTypecheckKey(key);\n\n    const strKey = this.serializeDeterministically(key);\n    return this.valueMap.get(strKey);\n  }\n\n  /**\n   *\n   * @description Set a key and a value in the MichelsonMap. If the key already exists, override the current value.\n   *\n   * @example map.set(\"myKey\", \"myValue\") // Using a string as key\n   *\n   * @example map.set({0: \"test\", 1: \"test1\"}, \"myValue\") // Using a pair as key\n   *\n   * @warn The same key can be represented in multiple ways, depending on the type of the key. This duplicate key situation will cause a runtime error (duplicate key) when sending the map data to the Tezos RPC node.\n   *\n   * For example, consider a contract with a map whose key is of type boolean.  If you set the following values in MichelsonMap: map.set(false, \"myValue\") and map.set(null, \"myValue\").\n   *\n   * You will get two unique entries in the MichelsonMap. These values will both be evaluated as falsy by the MichelsonEncoder and ultimately rejected by the Tezos RPC.\n   */\n  set(key: K, value: T) {\n    this.assertTypecheckKey(key);\n    this.assertTypecheckValue(value);\n\n    const strKey = this.serializeDeterministically(key);\n    this.keyMap.set(strKey, key);\n    this.valueMap.set(strKey, value);\n  }\n\n  delete(key: K) {\n    this.assertTypecheckKey(key);\n\n    this.keyMap.delete(this.serializeDeterministically(key));\n    this.valueMap.delete(this.serializeDeterministically(key));\n  }\n\n  has(key: K) {\n    this.assertTypecheckKey(key);\n\n    const strKey = this.serializeDeterministically(key);\n    return this.keyMap.has(strKey) && this.valueMap.has(strKey);\n  }\n\n  clear(): void {\n    this.keyMap.clear();\n    this.valueMap.clear();\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  forEach(cb: (value: T, key: K, map: MichelsonMap<K, T>) => void) {\n    for (const [key, value] of this.entries()) {\n      cb(value, key, this);\n    }\n  }\n}\n","import { MichelsonV1Expression, MichelsonV1ExpressionExtended } from '@taquito/rpc';\nimport { TokenSchema } from '../schema/types';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when encoding invalid or incorrect data (e.g. if an address is expected but a number is received)\n */\nexport abstract class TokenValidationError extends Error {\n  name = 'ValidationError';\n\n  constructor(public value: any, public token: Token, baseMessage: string) {\n    super();\n    const annot = this.token.annot();\n    const annotText = annot ? `[${annot}] ` : '';\n    this.message = `${annotText}${baseMessage}`;\n  }\n}\n\nexport type TokenFactory = (val: any, idx: number) => Token;\n\nexport interface Semantic {\n  [key: string]: (value: MichelsonV1Expression, schema: MichelsonV1Expression) => any;\n}\n\nexport interface SemanticEncoding {\n  [key: string]: (value: any, type?: MichelsonV1Expression) => MichelsonV1Expression;\n}\n\nexport abstract class Token {\n  constructor(\n    protected val: MichelsonV1ExpressionExtended,\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {}\n\n  protected typeWithoutAnnotations() {\n    const handleMichelsonExpression = (val: MichelsonV1Expression): MichelsonV1Expression => {\n      if (typeof val === 'object') {\n        if (Array.isArray(val)) {\n          const array = val as MichelsonV1Expression[];\n          return array.map((item) => handleMichelsonExpression(item));\n        }\n        const extended = val as MichelsonV1ExpressionExtended;\n        if (extended.args) {\n          return {\n            prim: extended.prim,\n            args: extended.args.map((x) => handleMichelsonExpression(x)),\n          };\n        } else {\n          return {\n            prim: extended.prim,\n          };\n        }\n      }\n      return val;\n    };\n\n    const handleMichelsonExtended = (val: MichelsonV1ExpressionExtended): Omit<MichelsonV1ExpressionExtended, 'annots'> => {\n      if (val.args) {\n        return {\n          prim: val.prim,\n          args: val.args.map((x) => handleMichelsonExpression(x)),\n        };\n      } else {\n        return {\n          prim: val.prim,\n        };\n      }\n    };\n\n    return handleMichelsonExtended(this.val);\n  }\n\n  annot() {\n    return (\n      Array.isArray(this.val.annots) && this.val.annots.length > 0\n        ? this.val.annots[0]\n        : String(this.idx)\n    ).replace(/(%|:)(_Liq_entry_)?/, '');\n  }\n\n  hasAnnotations() {\n    return Array.isArray(this.val.annots) && this.val.annots.length;\n  }\n\n  get tokenVal() {\n    return this.val;\n  }\n\n  public createToken = this.fac;\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public abstract ExtractSchema(): any;\n\n  abstract generateSchema(): TokenSchema;\n\n  public abstract Execute(val: any, semantics?: Semantic): any;\n\n  public abstract Encode(_args: any[]): any;\n\n  public abstract EncodeObject(args: any, semantics?: SemanticEncoding): any;\n\n  public ExtractSignature() {\n    return [[this.ExtractSchema()]];\n  }\n\n  abstract findAndReturnTokens(tokenToFind: string, tokens: Array<Token>): Array<Token>;\n}\n\nexport type BigMapKeyType = string | number | object;\n\nexport abstract class ComparableToken extends Token {\n  abstract ToBigMapKey(val: BigMapKeyType): {\n    key: { [key: string]: string | object[] };\n    type: { prim: string; args?: object[] };\n  };\n  abstract ToKey(val: string | MichelsonV1Expression): any;\n\n  compare(o1: string, o2: string): number {\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n}","import { MichelsonMap } from '../michelson-map';\nimport { BigMapTokenSchema } from '../schema/types';\nimport {\n  ComparableToken,\n  Semantic,\n  SemanticEncoding,\n  Token,\n  TokenFactory,\n  TokenValidationError,\n} from './token';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing Big Map types\n */\nexport class BigMapValidationError extends TokenValidationError {\n  name = 'BigMapValidationError';\n  constructor(public value: any, public token: BigMapToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class BigMapToken extends Token {\n  static prim: 'big_map' = 'big_map';\n  constructor(\n    protected val: { prim: string; args: any[]; annots?: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get ValueSchema() {\n    return this.createToken(this.val.args[1], 0);\n  }\n\n  get KeySchema(): ComparableToken {\n    return this.createToken(this.val.args[0], 0) as unknown as ComparableToken;\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return {\n      big_map: {\n        key: this.KeySchema.ExtractSchema(),\n        value: this.ValueSchema.ExtractSchema(),\n      },\n    };\n  }\n\n  generateSchema(): BigMapTokenSchema {\n    return {\n      __michelsonType: BigMapToken.prim,\n      schema: {\n        key: this.KeySchema.generateSchema(),\n        value: this.ValueSchema.generateSchema(),\n      },\n    };\n  }\n\n  private isValid(value: any): BigMapValidationError | null {\n    if (MichelsonMap.isMichelsonMap(value)) {\n      return null;\n    }\n\n    return new BigMapValidationError(value, this, 'Value must be a MichelsonMap');\n  }\n\n  private objLitToMichelsonMap(val: any): any {\n    if (val instanceof MichelsonMap) return val;\n    if (typeof val === 'object') {\n      if (Object.keys(val).length === 0) {\n        return new MichelsonMap();\n      } else {\n        return MichelsonMap.fromLiteral(val);\n      }\n    }\n    return val;\n  }\n\n  public Encode(args: any[]): any {\n    const val: MichelsonMap<any, any> = this.objLitToMichelsonMap(args.pop());\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys())\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .map((key) => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n        };\n      });\n  }\n\n  public EncodeObject(args: any, semantic?: SemanticEncoding): any {\n    const val: MichelsonMap<any, any> = this.objLitToMichelsonMap(args);\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[BigMapToken.prim]) {\n      return semantic[BigMapToken.prim](val, this.val);\n    }\n\n    return Array.from(val.keys())\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .map((key) => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n        };\n      });\n  }\n\n  public Execute(val: any[] | { int: string }, semantic?: Semantic) {\n    if (semantic && semantic[BigMapToken.prim]) {\n      return semantic[BigMapToken.prim](val as any, this.val);\n    }\n\n    if (Array.isArray(val)) {\n      // Athens is returning an empty array for big map in storage\n      // Internal: In taquito v5 it is still used to decode big map diff (as if they were a regular map)\n      const map = new MichelsonMap(this.val);\n      val.forEach((current) => {\n        map.set(this.KeySchema.ToKey(current.args[0]), this.ValueSchema.Execute(current.args[1]));\n      });\n      return map;\n    } else if ('int' in val) {\n      // Babylon is returning an int with the big map id in contract storage\n      return val.int;\n    } else {\n      throw new BigMapValidationError(\n        val,\n        this,\n        `Big map is expecting either an array (Athens) or an object with an int property (Babylon). Got ${JSON.stringify(\n          val\n        )}`\n      );\n    }\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (BigMapToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    this.KeySchema.findAndReturnTokens(tokenToFind, tokens);\n    this.ValueSchema.findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n}\n","import { OrTokenSchema } from '../schema/types';\nimport { Token, TokenFactory, Semantic, ComparableToken, SemanticEncoding } from './token';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when decoding OR Token methods\n */\nexport class OrTokenDecodingError extends Error {\n  public name = 'OrTokenDecodingError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\nexport class OrToken extends ComparableToken {\n  static prim: 'or' = 'or';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Encode(args: any[]): any {\n    const label = args[args.length - 1];\n\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n      args.pop();\n      return { prim: 'Left', args: [leftToken.Encode(args)] };\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n      args.pop();\n      return { prim: 'Right', args: [rightToken.Encode(args)] };\n    } else {\n      if (leftToken instanceof OrToken) {\n        const val = leftToken.Encode(args);\n        if (val) {\n          return { prim: 'Left', args: [val] };\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        const val = rightToken.Encode(args);\n        if (val) {\n          return { prim: 'Right', args: [val] };\n        }\n      }\n      return null;\n    }\n  }\n\n  public ExtractSignature(): any {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    const newSig = [];\n\n    if (leftToken instanceof OrToken) {\n      newSig.push(...leftToken.ExtractSignature());\n    } else {\n      for (const sig of leftToken.ExtractSignature()) {\n        newSig.push([leftToken.annot(), ...sig]);\n      }\n    }\n\n    if (rightToken instanceof OrToken) {\n      newSig.push(...rightToken.ExtractSignature());\n    } else {\n      for (const sig of rightToken.ExtractSignature()) {\n        newSig.push([rightToken.annot(), ...sig]);\n      }\n    }\n\n    return newSig;\n  }\n\n  public EncodeObject(args: any, semantic?: SemanticEncoding): any {\n    const label = Object.keys(args)[0];\n\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n      return { prim: 'Left', args: [leftToken.EncodeObject(args[label], semantic)] };\n    } else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n      return { prim: 'Right', args: [rightToken.EncodeObject(args[label], semantic)] };\n    } else {\n      if (leftToken instanceof OrToken) {\n        const val = leftToken.EncodeObject(args, semantic);\n        if (val) {\n          return { prim: 'Left', args: [val] };\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        const val = rightToken.EncodeObject(args, semantic);\n        if (val) {\n          return { prim: 'Right', args: [val] };\n        }\n      }\n      return null;\n    }\n  }\n\n  public Execute(val: any, semantics?: Semantic): any {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (val.prim === 'Right') {\n      if (rightToken instanceof OrToken) {\n        return rightToken.Execute(val.args[0], semantics);\n      } else {\n        return {\n          [rightToken.annot()]: rightToken.Execute(val.args[0], semantics),\n        };\n      }\n    } else if (val.prim === 'Left') {\n      if (leftToken instanceof OrToken) {\n        return leftToken.Execute(val.args[0], semantics);\n      }\n      return {\n        [leftToken.annot()]: leftToken.Execute(val.args[0], semantics),\n      };\n    } else {\n      throw new OrTokenDecodingError(`Was expecting Left or Right prim but got: ${val.prim}`);\n    }\n  }\n\n  private traversal(\n    getLeftValue: (token: Token) => any,\n    getRightValue: (token: Token) => any,\n    concat: (left: any, right: any) => any\n  ) {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    let leftValue;\n    if (leftToken instanceof OrToken && !leftToken.hasAnnotations()) {\n      leftValue = getLeftValue(leftToken);\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    } else {\n      leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n    let rightValue;\n    if (rightToken instanceof OrToken && !rightToken.hasAnnotations()) {\n      rightValue = getRightValue(rightToken);\n    } else {\n      rightValue = { [rightToken.annot()]: getRightValue(rightToken) };\n    }\n\n    const res = concat(leftValue, rightValue);\n\n    return res;\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema(): any {\n    return this.traversal(\n      (leftToken) => leftToken.ExtractSchema(),\n      (rightToken) => rightToken.ExtractSchema(),\n      (leftValue, rightValue) => ({\n        ...leftValue,\n        ...rightValue,\n      })\n    );\n  }\n\n  generateSchema(): OrTokenSchema {\n    return {\n      __michelsonType: OrToken.prim,\n      schema: this.traversal(\n        (leftToken) => {\n          if (leftToken instanceof OrToken && !leftToken.hasAnnotations()) {\n            return leftToken.generateSchema().schema;\n          } else {\n            return leftToken.generateSchema();\n          }\n        },\n        (rightToken) => {\n          if (rightToken instanceof OrToken && !rightToken.hasAnnotations()) {\n            return rightToken.generateSchema().schema;\n          } else {\n            return rightToken.generateSchema();\n          }\n        },\n        (leftValue, rightValue) => ({\n          ...leftValue,\n          ...rightValue,\n        })\n      ),\n    };\n  }\n\n  private findToken(label: any): Token | null {\n    const leftToken = this.createToken(this.val.args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n\n    if (\n      String(leftToken.annot()) === String(label) &&\n      !(leftToken instanceof OrToken) &&\n      leftToken instanceof ComparableToken\n    ) {\n      return leftToken;\n    } else if (\n      String(rightToken.annot()) === String(label) &&\n      !(rightToken instanceof OrToken) &&\n      rightToken instanceof ComparableToken\n    ) {\n      return rightToken;\n    } else {\n      if (leftToken instanceof OrToken) {\n        const tok = leftToken.findToken(label);\n        if (tok) {\n          return tok;\n        }\n      }\n\n      if (rightToken instanceof OrToken) {\n        const tok = rightToken.findToken(label);\n        if (tok) {\n          return tok;\n        }\n      }\n      return null;\n    }\n  }\n\n  compare(val1: any, val2: any): any {\n    const labelVal1 = Object.keys(val1)[0];\n    const labelVal2 = Object.keys(val2)[0];\n\n    if (labelVal1 === labelVal2) {\n      const token = this.findToken(labelVal1);\n      if (token instanceof ComparableToken) {\n        return token.compare(val1[labelVal1], val2[labelVal1]);\n      }\n    } else {\n      const encoded1 = JSON.stringify(this.EncodeObject(val1));\n      const encoded2 = JSON.stringify(this.EncodeObject(val2));\n      return encoded1 < encoded2 ? -1 : 1;\n    }\n  }\n\n  public ToKey(val: any) {\n    return this.Execute(val);\n  }\n\n  public ToBigMapKey(val: any) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations(),\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (OrToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    this.traversal(\n      (leftToken) => leftToken.findAndReturnTokens(tokenToFind, tokens),\n      (rightToken) => rightToken.findAndReturnTokens(tokenToFind, tokens),\n      (leftValue, rightValue) => ({\n        ...leftValue,\n        ...rightValue,\n      })\n    );\n    return tokens;\n  }\n}\n","import { Token, TokenFactory, Semantic, ComparableToken, SemanticEncoding } from './token';\nimport { OrToken } from './or';\nimport { PairTokenSchema } from '../schema/types';\nimport { MichelsonV1Expression, MichelsonV1ExpressionExtended } from '@taquito/rpc';\n\n/**\n *  @category Error\n *  @description Error that indicates in invalid token argument being passed\n */\nexport class TokenArgumentValidationError extends Error {\n  public name = 'TokenArgumentValidationError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure occurring when doing a comparison of tokens\n */\nexport class TokenComparisonError extends Error {\n  public name = 'TokenComparisonError';\n  constructor(public val1: string, public val2: string) {\n    super(`Tokens ${val1} and ${val2} are not comparable`);\n  }\n}\n\n// collapse comb pair\nfunction collapse(val: Token['val'] | any[], prim: string = PairToken.prim): [any, any] {\n  if (Array.isArray(val)) {\n    return collapse(\n      {\n        prim: prim,\n        args: val,\n      },\n      prim\n    );\n  }\n  if (val.args === undefined) {\n    throw new TokenArgumentValidationError(\n      'Encountered an invalid PairToken with no arguments, a pair must have two or more arguments'\n    );\n  }\n  if (val.args.length > 2) {\n    return [\n      val.args[0],\n      {\n        prim: prim,\n        args: val.args.slice(1),\n      },\n    ];\n  }\n  return [val.args[0], val.args[1]];\n}\nexport class PairToken extends ComparableToken {\n  static prim: 'pair' = 'pair';\n\n  constructor(\n    val: MichelsonV1Expression,\n    idx: number,\n    fac: TokenFactory\n  ) {\n    super(\n      Array.isArray(val)\n        ? {\n            prim: PairToken.prim,\n            args: val,\n          }\n        : (val as MichelsonV1ExpressionExtended).prim ? val as MichelsonV1ExpressionExtended : {\n          prim: PairToken.prim,\n          args: val,\n        } as MichelsonV1ExpressionExtended,\n      idx,\n      fac\n    );\n  }\n\n  private args(): [any, any] {\n    // collapse comb pair\n    return collapse(this.val);\n  }\n\n  private tokens(): [Token, Token] {\n    let cnt = 0;\n    return this.args().map((a) => {\n      const tok = this.createToken(a, this.idx + cnt);\n      if (tok instanceof PairToken) {\n        cnt += Object.keys(tok.ExtractSchema()).length;\n      } else {\n        cnt++;\n      }\n      return tok;\n    }) as [Token, Token];\n  }\n\n  public Encode(args: any[]): any {\n    return {\n      prim: 'Pair',\n      args: this.tokens().map((t) => t.Encode(args)),\n    };\n  }\n\n  public ExtractSignature(): any {\n    const args = this.args();\n    const leftToken = this.createToken(args[0], this.idx);\n    let keyCount = 1;\n    if (leftToken instanceof OrToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n\n    const rightToken = this.createToken(args[1], this.idx + keyCount);\n\n    const newSig = [];\n\n    for (const leftSig of leftToken.ExtractSignature()) {\n      for (const rightSig of rightToken.ExtractSignature()) {\n        newSig.push([...leftSig, ...rightSig]);\n      }\n    }\n\n    return newSig;\n  }\n\n  public ToBigMapKey(val: any) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations(),\n    };\n  }\n\n  public ToKey(val: any) {\n    return this.Execute(val);\n  }\n\n  public EncodeObject(args: any, semantic?: SemanticEncoding): any {\n    const [leftToken, rightToken] = this.tokens();\n\n    let leftValue;\n    if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n      leftValue = args;\n    } else {\n      leftValue = args[leftToken.annot()];\n    }\n\n    let rightValue;\n    if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n      rightValue = args;\n    } else {\n      rightValue = args[rightToken.annot()];\n    }\n\n    return {\n      prim: 'Pair',\n      args: [\n        leftToken.EncodeObject(leftValue, semantic),\n        rightToken.EncodeObject(rightValue, semantic),\n      ],\n    };\n  }\n\n  private traversal(getLeftValue: (token: Token) => any, getRightValue: (token: Token) => any) {\n    const args = this.args();\n\n    const leftToken = this.createToken(args[0], this.idx);\n    let keyCount = 1;\n    let leftValue;\n    if (leftToken instanceof PairToken) {\n      keyCount = Object.keys(leftToken.ExtractSchema()).length;\n    }\n    if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n      leftValue = getLeftValue(leftToken);\n    } else {\n      leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };\n    }\n\n    const rightToken = this.createToken(args[1], this.idx + keyCount);\n    let rightValue;\n    if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n      rightValue = getRightValue(rightToken);\n    } else {\n      rightValue = { [rightToken.annot()]: getRightValue(rightToken) };\n    }\n\n    const res = {\n      ...leftValue,\n      ...rightValue,\n    };\n\n    return res;\n  }\n\n  public Execute(val: any, semantics?: Semantic): { [key: string]: any } {\n    const args = collapse(val, 'Pair');\n    return this.traversal(\n      (leftToken) => leftToken.Execute(args[0], semantics),\n      (rightToken) => rightToken.Execute(args[1], semantics)\n    );\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema(): any {\n    return this.traversal(\n      (leftToken) => leftToken.ExtractSchema(),\n      (rightToken) => rightToken.ExtractSchema()\n    );\n  }\n\n  generateSchema(): PairTokenSchema {\n    return {\n      __michelsonType: PairToken.prim,\n      schema: this.traversal(\n        (leftToken) => {\n          if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n            return leftToken.generateSchema().schema;\n          } else {\n            return leftToken.generateSchema();\n          }\n        },\n        (rightToken) => {\n          if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n            return rightToken.generateSchema().schema;\n          } else {\n            return rightToken.generateSchema();\n          }\n        }\n      ),\n    };\n  }\n\n  public compare(val1: any, val2: any) {\n    const [leftToken, rightToken] = this.tokens();\n\n    const getValue = (token: Token, args: any) => {\n      if (token instanceof PairToken && !token.hasAnnotations()) {\n        return args;\n      } else {\n        return args[token.annot()];\n      }\n    };\n\n    if (leftToken instanceof ComparableToken && rightToken instanceof ComparableToken) {\n      const result: number = leftToken.compare(\n        getValue(leftToken, val1),\n        getValue(leftToken, val2)\n      );\n\n      if (result === 0) {\n        return rightToken.compare(getValue(rightToken, val1), getValue(rightToken, val2));\n      }\n\n      return result;\n    }\n\n    throw new TokenComparisonError(val1, val2);\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (PairToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    this.tokens().map((t) => t.findAndReturnTokens(tokenToFind, tokens));\n    return tokens;\n  }\n}\n","import {\n  Token,\n  TokenFactory,\n  ComparableToken,\n  TokenValidationError,\n  SemanticEncoding,\n} from '../token';\nimport BigNumber from 'bignumber.js';\nimport { BaseTokenSchema } from '../../schema/types';\n\nexport class NatValidationError extends TokenValidationError {\n  name = 'NatValidationError';\n  constructor(public value: any, public token: NatToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class NatToken extends ComparableToken {\n  static prim: 'nat' = 'nat';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): { [key: string]: any } {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: new BigNumber(val).toFixed() };\n  }\n\n  private isValid(val: any): NatValidationError | null {\n    const bigNumber = new BigNumber(val);\n    if (bigNumber.isNaN()) {\n      return new NatValidationError(val, this, `Value is not a number: ${val}`);\n    } else if (bigNumber.isNegative()) {\n      return new NatValidationError(val, this, `Value cannot be negative: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[NatToken.prim]) {\n      return semantic[NatToken.prim](val);\n    }\n\n    return { int: new BigNumber(val).toFixed() };\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return NatToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: NatToken.prim,\n      schema: NatToken.prim,\n    };\n  }\n\n  public ToBigMapKey(val: string | number) {\n    return {\n      key: { int: String(val) },\n      type: { prim: NatToken.prim },\n    };\n  }\n\n  public ToKey({ int }: any) {\n    return new BigNumber(int);\n  }\n\n  compare(nat1: string | number, nat2: string | number) {\n    const o1 = Number(nat1);\n    const o2 = Number(nat2);\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (NatToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../../schema/types';\nimport { Token, TokenFactory, ComparableToken, SemanticEncoding } from '../token';\n\nexport class StringToken extends ComparableToken {\n  static prim: 'string' = 'string';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): string {\n    return val[Object.keys(val)[0]];\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return StringToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: StringToken.prim,\n      schema: StringToken.prim,\n    };\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return { string: val };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    if (semantic && semantic[StringToken.prim]) {\n      return semantic[StringToken.prim](val);\n    }\n    return { string: val };\n  }\n\n  public ToKey({ string }: any) {\n    return string;\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: StringToken.prim },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (StringToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import {\n  Token,\n  TokenFactory,\n  ComparableToken,\n  TokenValidationError,\n  SemanticEncoding,\n} from '../token';\nimport { b58decode, encodePubKey, validateAddress, ValidationResult } from '@taquito/utils';\nimport { BaseTokenSchema } from '../../schema/types';\n\nexport class AddressValidationError extends TokenValidationError {\n  name = 'AddressValidationError';\n  constructor(public value: any, public token: AddressToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class AddressToken extends ComparableToken {\n  static prim: 'address' = 'address';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public ToBigMapKey(val: any) {\n    const decoded = b58decode(val);\n    return {\n      key: { bytes: decoded },\n      type: { prim: 'bytes' },\n    };\n  }\n\n  private isValid(value: any): AddressValidationError | null {\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      return new AddressValidationError(value, this, `Address is not valid: ${value}`);\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[AddressToken.prim]) {\n      return semantic[AddressToken.prim](val);\n    }\n\n    return { string: val };\n  }\n\n  public Execute(val: { bytes: string; string: string }): string {\n    if (val.string) {\n      return val.string;\n    }\n    if (!val.bytes) {\n      throw new AddressValidationError(val, this, `cannot be missing both string and bytes: ${val}`)\n    }\n\n    return encodePubKey(val.bytes);\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return AddressToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: AddressToken.prim,\n      schema: AddressToken.prim,\n    };\n  }\n\n  public ToKey({ bytes, string }: any) {\n    if (string) {\n      return string;\n    }\n    if (!bytes) {\n      throw new AddressValidationError({bytes, string}, this, `cannot be missing both string and bytes ${{string, bytes}}`)\n    }\n\n    return encodePubKey(bytes);\n  }\n  compare(address1: string, address2: string) {\n    const isImplicit = (address: string) => {\n      return address.startsWith('tz')\n    }\n    const implicit1 = isImplicit(address1)\n    const implicit2 = isImplicit(address2)\n\n    if (implicit1 && !implicit2) {\n      return -1;\n    } else if (implicit2 && !implicit1) {\n      return 1;\n    }\n    return super.compare(address1, address2)\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (AddressToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { MichelsonMap } from '../michelson-map';\nimport { MapTokenSchema } from '../schema/types';\nimport {\n  ComparableToken,\n  Semantic,\n  SemanticEncoding,\n  Token,\n  TokenFactory,\n  TokenValidationError,\n} from './token';\n\nexport class MapValidationError extends TokenValidationError {\n  name = 'MapValidationError';\n  constructor(public value: any, public token: MapToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class MapToken extends Token {\n  static prim: 'map' = 'map';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get ValueSchema() {\n    return this.createToken(this.val.args[1], 0);\n  }\n\n  get KeySchema(): ComparableToken {\n    return this.createToken(this.val.args[0], 0) as any;\n  }\n\n  private isValid(value: any): MapValidationError | null {\n    if (MichelsonMap.isMichelsonMap(value)) {\n      return null;\n    }\n\n    return new MapValidationError(value, this, 'Value must be a MichelsonMap');\n  }\n\n  public Execute(val: any[], semantics?: Semantic): { [key: string]: any } {\n    const map = new MichelsonMap(this.val);\n\n    val.forEach((current) => {\n      map.set(\n        this.KeySchema.ToKey(current.args[0]),\n        this.ValueSchema.Execute(current.args[1], semantics)\n      );\n    });\n    return map;\n  }\n\n  private objLitToMichelsonMap(val: any): any {\n    if (val instanceof MichelsonMap) return val;\n    if (typeof val === 'object') {\n      if (Object.keys(val).length === 0) {\n        return new MichelsonMap();\n      } else {\n        return MichelsonMap.fromLiteral(val);\n      }\n    }\n    return val;\n  }\n\n  public Encode(args: any[]): any {\n    const val: MichelsonMap<any, any> = this.objLitToMichelsonMap(args.pop());\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return Array.from(val.keys())\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .map((key) => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n        };\n      });\n  }\n\n  public EncodeObject(args: any, semantic?: SemanticEncoding): any {\n    const val: MichelsonMap<any, any> = this.objLitToMichelsonMap(args);\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[MapToken.prim]) {\n      return semantic[MapToken.prim](val);\n    }\n\n    return Array.from(val.keys())\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .map((key) => {\n        return {\n          prim: 'Elt',\n          args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n        };\n      });\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return {\n      map: {\n        key: this.KeySchema.ExtractSchema(),\n        value: this.ValueSchema.ExtractSchema(),\n      },\n    };\n  }\n\n  generateSchema(): MapTokenSchema {\n    return {\n      __michelsonType: MapToken.prim,\n      schema: {\n        key: this.KeySchema.generateSchema(),\n        value: this.ValueSchema.generateSchema(),\n      },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (MapToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    this.KeySchema.findAndReturnTokens(tokenToFind, tokens);\n    this.ValueSchema.findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../../schema/types';\nimport { Token, TokenFactory, ComparableToken, SemanticEncoding } from '../token';\n\nexport class BoolToken extends ComparableToken {\n  static prim: 'bool' = 'bool';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): boolean {\n    return String(val.prim).toLowerCase() === 'true' ? true : false;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return { prim: val ? 'True' : 'False' };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding) {\n    if (semantic && semantic[BoolToken.prim]) {\n      return semantic[BoolToken.prim](val);\n    }\n    return { prim: val ? 'True' : 'False' };\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return BoolToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: BoolToken.prim,\n      schema: BoolToken.prim,\n    };\n  }\n\n  ToBigMapKey(val: string): { key: { [key: string]: string }; type: { prim: string } } {\n    return {\n      key: this.EncodeObject(val) as any,\n      type: { prim: BoolToken.prim },\n    };\n  }\n\n  ToKey(val: string) {\n    return this.EncodeObject(val);\n  }\n\n  compare(val1: any, val2: any) {\n    if ((val1 && val2) || (!val1 && !val2)) {\n      return 0;\n    } else if (val1) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (BoolToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../../schema/types';\nimport { b58decodeL2Address, encodeL2Address, validateAddress, ValidationResult } from '@taquito/utils';\nimport { ComparableToken, SemanticEncoding, Token, TokenFactory, TokenValidationError } from \"../token\";\n\nexport class TxRollupL2AddressValidationError extends TokenValidationError {\n  name = 'TxRollupL2AddressValidationError';\n  constructor(public value: unknown, public token: TxRollupL2AddressToken, message: string) {\n    super(value, token, message)\n  }\n}\n\nexport class TxRollupL2AddressToken extends ComparableToken {\n  static prim: 'tx_rollup_l2_address' = 'tx_rollup_l2_address';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac)\n  }\n\n  public ToBigMapKey(val: any) {\n    const decoded = b58decodeL2Address(val)\n    return {\n      key: { bytes: decoded },\n      type: { prim: 'bytes' }\n    }\n  }\n\n  private isValid(value: any): null {\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      throw new TxRollupL2AddressValidationError(value, this, `tx_rollup_l2_address is not valid: ${value}`)\n    }\n    return null\n  }\n\n  public Encode(args: string[]): any {\n    const val = args.pop();\n    if (!val) {\n      throw new TxRollupL2AddressValidationError(val, this, `arg missing to encode: this -> \"${val}\"`)\n    }\n    // no need to test since method throws\n    this.isValid(val)\n\n    return { string: val }\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    // no need to test since method throws\n    this.isValid(val)\n\n    if (semantic && semantic[TxRollupL2AddressToken.prim]) {\n      return semantic[TxRollupL2AddressToken.prim](val)\n    }\n    return { string: val }\n  }\n\n  public Execute(val: {bytes?: string; string?: string}): string {\n    if (val.string) {\n      return val.string\n    }\n    if (!val.bytes) {\n      throw new TxRollupL2AddressValidationError(val, this, `value cannot be missing string and byte value. must have one ${JSON.stringify(val)}`)\n    }\n    return encodeL2Address(val.bytes)\n  }\n  public ExtractSchema() {\n    return TxRollupL2AddressToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: TxRollupL2AddressToken.prim,\n      schema: TxRollupL2AddressToken.prim\n    }\n  }\n\n  public ToKey({bytes, string}: {bytes?: string, string?: string}) {\n    if (string) {\n      return string\n    }\n    if (!bytes) {\n      throw new TxRollupL2AddressValidationError(bytes, this, `value cannot be missing string and byte value. must have one: bytes = ${bytes}`)\n    }\n    return encodeL2Address(bytes)\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]): Token[] {\n    if(TxRollupL2AddressToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens\n  }\n}\n","import { TokenSchema } from './../schema/types';\nimport { encodePubKey, validateAddress, ValidationResult } from '@taquito/utils';\nimport { ContractTokenSchema } from '../schema/types';\nimport { SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class ContractValidationError extends TokenValidationError {\n  name = 'ContractValidationError';\n  constructor(public value: any, public token: ContractToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class ContractToken extends Token {\n  static prim: 'contract' = 'contract';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(value: any): ContractValidationError | null {\n    // tz1,tz2 and tz3 seems to be valid contract values (for Unit contract)\n    if (validateAddress(value) !== ValidationResult.VALID) {\n      return new ContractValidationError(value, this, 'Contract address is not valid');\n    }\n\n    return null;\n  }\n\n  public Execute(val: { bytes: string; string: string }) {\n    if (val.string) {\n      return val.string;\n    }\n    if (!val.bytes) {\n      throw new ContractValidationError(val, this, 'must contain bytes or string')\n    }\n\n    return encodePubKey(val.bytes);\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { string: val };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    if (semantic && semantic[ContractToken.prim]) {\n      return semantic[ContractToken.prim](val);\n    }\n    return { string: val };\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return ContractToken.prim;\n  }\n\n  generateSchema(): ContractTokenSchema {\n    const valueSchema = this.createToken(this.val.args[0], 0);\n    return {\n      __michelsonType: ContractToken.prim,\n      schema: {\n        parameter: this.val.args[0] ? valueSchema.generateSchema() : {} as TokenSchema,\n      },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (ContractToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { ListTokenSchema } from '../schema/types';\nimport { Token, TokenFactory, Semantic, TokenValidationError, SemanticEncoding } from './token';\n\nexport class ListValidationError extends TokenValidationError {\n  name = 'ListValidationError';\n  constructor(public value: any, public token: ListToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class ListToken extends Token {\n  static prim: 'list' = 'list';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get valueSchema() {\n    return this.createToken(this.val.args[0], this.idx);\n  }\n\n  private isValid(value: any): ListValidationError | null {\n    if (Array.isArray(value)) {\n      return null;\n    }\n\n    return new ListValidationError(value, this, 'Value must be an array');\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    const schema = this.createToken(this.val.args[0], 0);\n    return val.reduce((prev: any, current: any) => {\n      return [...prev, schema.EncodeObject(current)];\n    }, []);\n  }\n\n  public Execute(val: any, semantics?: Semantic) {\n    const schema = this.createToken(this.val.args[0], 0);\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return val.reduce((prev: any, current: any) => {\n      return [...prev, schema.Execute(current, semantics)];\n    }, []);\n  }\n\n  public EncodeObject(args: any, semantic?: SemanticEncoding): any {\n    const schema = this.createToken(this.val.args[0], 0);\n\n    const err = this.isValid(args);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[ListToken.prim]) {\n      return semantic[ListToken.prim](args);\n    }\n\n    return args.reduce((prev: any, current: any) => {\n      return [...prev, schema.EncodeObject(current)];\n    }, []);\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return {\n      [ListToken.prim]: this.valueSchema.ExtractSchema(),\n    };\n  }\n\n  generateSchema(): ListTokenSchema {\n    return {\n      __michelsonType: ListToken.prim,\n      schema: this.valueSchema.generateSchema(),\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (ListToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    this.createToken(this.val.args[0], this.idx).findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n}\n","import {\n  Token,\n  TokenFactory,\n  ComparableToken,\n  TokenValidationError,\n  SemanticEncoding,\n} from '../token';\nimport BigNumber from 'bignumber.js';\nimport { BaseTokenSchema } from '../../schema/types';\n\nexport class MutezValidationError extends TokenValidationError {\n  name = 'MutezValidationError';\n  constructor(public value: any, public token: MutezToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class MutezToken extends ComparableToken {\n  static prim: 'mutez' = 'mutez';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any) {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return MutezToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: MutezToken.prim,\n      schema: MutezToken.prim,\n    };\n  }\n\n  private isValid(val: any): MutezValidationError | null {\n    const bigNumber = new BigNumber(val);\n    if (bigNumber.isNaN()) {\n      return new MutezValidationError(val, this, `Value is not a number: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: String(val).toString() };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[MutezToken.prim]) {\n      return semantic[MutezToken.prim](val);\n    }\n\n    return { int: String(val).toString() };\n  }\n\n  public ToBigMapKey(val: string | number) {\n    return {\n      key: { int: String(val) },\n      type: { prim: MutezToken.prim },\n    };\n  }\n\n  public ToKey({ int }: any) {\n    return int;\n  }\n\n  compare(mutez1: string | number, mutez2: string | number) {\n    const o1 = Number(mutez1);\n    const o2 = Number(mutez2);\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (MutezToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../../schema/types';\nimport {\n  TokenFactory,\n  ComparableToken,\n  TokenValidationError,\n  Token,\n  SemanticEncoding,\n} from '../token';\n\nexport class BytesValidationError extends TokenValidationError {\n  name = 'BytesValidationError';\n  constructor(public value: any, public token: BytesToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class BytesToken extends ComparableToken {\n  static prim: 'bytes' = 'bytes';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { bytes: val },\n      type: { prim: BytesToken.prim },\n    };\n  }\n\n  private isValid(val: any): BytesValidationError | null {\n    if (typeof val === 'string' && /^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new BytesValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: any) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  public Encode(args: any[]): any {\n    let val = args.pop();\n\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { bytes: String(val).toString() };\n  }\n\n  public EncodeObject(val: string | Uint8Array, semantic?: SemanticEncoding) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[BytesToken.prim]) {\n      return semantic[BytesToken.prim](val);\n    }\n\n    return { bytes: String(val).toString() };\n  }\n\n  public Execute(val: any): string {\n    return val.bytes;\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return BytesToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: BytesToken.prim,\n      schema: BytesToken.prim,\n    };\n  }\n\n  public ToKey({ bytes, string }: any) {\n    if (string) {\n      return string;\n    }\n\n    return bytes;\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (BytesToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { OptionTokenSchema } from '../schema/types';\nimport { Token, TokenFactory, Semantic, ComparableToken, SemanticEncoding } from './token';\n\nexport class OptionToken extends ComparableToken {\n  static prim: 'option' = 'option';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public subToken(): Token {\n    return this.createToken(this.val.args[0], this.idx);\n  }\n\n  schema(): Token {\n    return this.createToken(this.val.args[0], 0);\n  }\n\n  annot(): string {\n    return Array.isArray(this.val.annots)\n      ? super.annot()\n      : this.createToken(this.val.args[0], this.idx).annot();\n  }\n\n  public Encode(args: any): any {\n    const value = args;\n    if (value === undefined || value === null) {\n      return { prim: 'None' };\n    } else if (\n      Array.isArray(value) &&\n      (value[value.length - 1] === undefined || value[value.length - 1] === null)\n    ) {\n      value.pop();\n      return { prim: 'None' };\n    }\n\n    return { prim: 'Some', args: [this.schema().Encode(args)] };\n  }\n\n  public EncodeObject(args: any, semantic?: SemanticEncoding): any {\n    const value = args;\n\n    if (value === undefined || value === null) {\n      return { prim: 'None' };\n    }\n\n    return { prim: 'Some', args: [this.schema().EncodeObject(value, semantic)] };\n  }\n\n  public Execute(val: any, semantics?: Semantic) {\n    if (val.prim === 'None') {\n      return null;\n    }\n\n    return this.schema().Execute(val.args[0], semantics);\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return this.schema().ExtractSchema();\n  }\n\n  generateSchema(): OptionTokenSchema {\n    return {\n      __michelsonType: OptionToken.prim,\n      schema: this.schema().generateSchema(),\n    };\n  }\n\n  public ExtractSignature() {\n    return [...this.schema().ExtractSignature(), []];\n  }\n\n  get KeySchema(): ComparableToken {\n    return this.schema() as any;\n  }\n\n  compare(val1: any, val2: any) {\n    if (!val1) {\n      return -1;\n    } else if (!val2) {\n      return 1;\n    }\n    return this.KeySchema.compare(val1, val2);\n  }\n\n  public ToKey(val: any) {\n    return this.Execute(val);\n  }\n\n  public ToBigMapKey(val: any) {\n    return {\n      key: this.EncodeObject(val),\n      type: this.typeWithoutAnnotations(),\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (OptionToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    this.subToken().findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../../schema/types';\nimport { Token, TokenFactory, ComparableToken, SemanticEncoding } from '../token';\n\nexport class TimestampToken extends ComparableToken {\n  static prim: 'timestamp' = 'timestamp';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { string?: string; int?: string }) {\n    if (val.string && /^\\d+$/.test(val.string)) {\n      return new Date(Number(val.string) * 1000).toISOString();\n    } else if (val.string) {\n      return new Date(val.string).toISOString();\n    } else if (val.int) {\n      return new Date(Number(val.int) * 1000).toISOString();\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return { string: val };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    if (semantic && semantic[TimestampToken.prim]) {\n      return semantic[TimestampToken.prim](val);\n    }\n    return { string: val };\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return TimestampToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: TimestampToken.prim,\n      schema: TimestampToken.prim,\n    };\n  }\n\n  public ToKey({ string }: any) {\n    return string;\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: TimestampToken.prim },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (TimestampToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import {\n  Token,\n  TokenFactory,\n  ComparableToken,\n  TokenValidationError,\n  SemanticEncoding,\n} from '../token';\nimport BigNumber from 'bignumber.js';\nimport { BaseTokenSchema } from '../../schema/types';\n\nexport class IntValidationError extends TokenValidationError {\n  name = 'IntValidationError';\n  constructor(public value: any, public token: IntToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class IntToken extends ComparableToken {\n  static prim: 'int' = 'int';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { [key: string]: string }): { [key: string]: any } {\n    return new BigNumber(val[Object.keys(val)[0]]);\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return IntToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: IntToken.prim,\n      schema: IntToken.prim,\n    };\n  }\n\n  private isValid(val: any): IntValidationError | null {\n    const bigNumber = new BigNumber(val);\n    if (bigNumber.isNaN()) {\n      return new IntValidationError(val, this, `Value is not a number: ${val}`);\n    } else {\n      return null;\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { int: new BigNumber(val).toFixed() };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[IntToken.prim]) {\n      return semantic[IntToken.prim](val);\n    }\n\n    return { int: new BigNumber(val).toFixed() };\n  }\n\n  public ToBigMapKey(val: string | number) {\n    return {\n      key: { int: String(val) },\n      type: { prim: IntToken.prim },\n    };\n  }\n\n  public ToKey({ int }: any) {\n    return int;\n  }\n\n  compare(int1: string | number, int2: string | number) {\n    const o1 = Number(int1);\n    const o2 = Number(int2);\n    if (o1 === o2) {\n      return 0;\n    }\n\n    return o1 < o2 ? -1 : 1;\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (IntToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { ComparableToken, SemanticEncoding, Token, TokenFactory } from './token';\nimport { BaseTokenSchema } from '../schema/types';\nimport { UnitValue } from '../taquito-michelson-encoder';\n\nexport class UnitToken extends ComparableToken {\n  static prim: 'unit' = 'unit';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Encode(args: any[]): any {\n    args.pop();\n    return { prim: 'Unit' };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    if (semantic && semantic[UnitToken.prim]) {\n      return semantic[UnitToken.prim](val);\n    }\n    return { prim: 'Unit' };\n  }\n\n  public Execute(_val: { prim: string }) {\n    return UnitValue;\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return UnitToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: UnitToken.prim,\n      schema: UnitToken.prim,\n    };\n  }\n\n  compare(_val1: any, _val2: any) {\n    return 0;\n  }\n\n  ToKey(_val: any) {\n    return UnitValue;\n  }\n\n  ToBigMapKey(_val: any) {\n    return {\n      key: { prim: 'Unit' },\n      type: { prim: UnitToken.prim },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (UnitToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import {\n  ComparableToken,\n  SemanticEncoding,\n  Token,\n  TokenFactory,\n  TokenValidationError,\n} from './token';\nimport {\n  encodeKey,\n  validatePublicKey,\n  ValidationResult,\n  Prefix,\n  b58cdecode,\n  prefix,\n} from '@taquito/utils';\nimport { BaseTokenSchema } from '../schema/types';\n\nconst publicKeyPrefixLength = 4;\n\nexport class KeyValidationError extends TokenValidationError {\n  name = 'KeyValidationError';\n  constructor(public value: any, public token: KeyToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class KeyToken extends ComparableToken {\n  static prim: 'key' = 'key';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { bytes: string; string: string }) {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodeKey(val.bytes);\n  }\n\n  private isValid(value: any): KeyValidationError | null {\n    if (validatePublicKey(value) !== ValidationResult.VALID) {\n      return new KeyValidationError(value, this, 'Key is not valid');\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[KeyToken.prim]) {\n      return semantic[KeyToken.prim](val);\n    }\n\n    return { string: val };\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return KeyToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: KeyToken.prim,\n      schema: KeyToken.prim,\n    };\n  }\n\n  ToKey(val: any) {\n    return this.Execute(val);\n  }\n\n  ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: KeyToken.prim },\n    };\n  }\n\n  compare(key1: string, key2: string): number {\n    const keyPrefix1 = this.getPrefix(key1);\n    const keyPrefix2 = this.getPrefix(key2);\n\n    if (keyPrefix1 === Prefix.EDPK && keyPrefix2 !== Prefix.EDPK) {\n      return -1;\n    } else if (keyPrefix1 === Prefix.SPPK && keyPrefix2 !== Prefix.SPPK) {\n      return keyPrefix2 === Prefix.EDPK ? 1 : -1;\n    } else if (keyPrefix1 === Prefix.P2PK) {\n      if (keyPrefix2 !== Prefix.P2PK) {\n        return 1;\n      }\n\n      const keyBytes1 = this.getP256PublicKeyComparableBytes(key1);\n      const keyBytes2 = this.getP256PublicKeyComparableBytes(key2);\n      return Buffer.compare(keyBytes1, keyBytes2);\n    }\n\n    return super.compare(key1, key2);\n  }\n\n  private getPrefix(val: string) {\n    return val.substring(0, publicKeyPrefixLength);\n  }\n\n  private getP256PublicKeyComparableBytes(p2pk: string) {\n    return b58cdecode(p2pk, prefix[Prefix.P2PK]).slice(1);\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (KeyToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import {\n  Token,\n  TokenFactory,\n  ComparableToken,\n  TokenValidationError,\n  SemanticEncoding,\n} from '../token';\nimport { encodeKeyHash, validateKeyHash, ValidationResult } from '@taquito/utils';\nimport { BaseTokenSchema } from '../../schema/types';\n\nexport class KeyHashValidationError extends TokenValidationError {\n  name = 'KeyHashValidationError';\n  constructor(public value: any, public token: KeyHashToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class KeyHashToken extends ComparableToken {\n  static prim: 'key_hash' = 'key_hash';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { bytes: string; string: string }) {\n    if (val.string) {\n      return val.string;\n    }\n\n    return encodeKeyHash(val.bytes);\n  }\n\n  private isValid(value: any): KeyHashValidationError | null {\n    if (validateKeyHash(value) !== ValidationResult.VALID) {\n      return new KeyHashValidationError(value, this, `KeyHash is not valid: ${value}`);\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[KeyHashToken.prim]) {\n      return semantic[KeyHashToken.prim](val);\n    }\n\n    return { string: val };\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return KeyHashToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: KeyHashToken.prim,\n      schema: KeyHashToken.prim,\n    };\n  }\n\n  public ToKey({ string, bytes }: any) {\n    if (string) {\n      return string;\n    }\n\n    return encodeKeyHash(bytes);\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: KeyHashToken.prim },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (KeyHashToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { ComparableToken, SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';\nimport { validateSignature, ValidationResult } from '@taquito/utils';\nimport { BaseTokenSchema } from '../schema/types';\n\nexport class SignatureValidationError extends TokenValidationError {\n  name = 'SignatureValidationError';\n  constructor(public value: any, public token: SignatureToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class SignatureToken extends ComparableToken {\n  static prim: 'signature' = 'signature';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: { [key: string]: string }): string {\n    if (val.string) {\n      return val.string;\n    }\n    // TODO decode the signature\n    return val.bytes;\n  }\n\n  private isValid(value: any): SignatureValidationError | null {\n    if (validateSignature(value) !== ValidationResult.VALID) {\n      return new SignatureValidationError(value, this, 'Signature is not valid');\n    }\n\n    return null;\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[SignatureToken.prim]) {\n      return semantic[SignatureToken.prim](val);\n    }\n    \n    return { string: val };\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return SignatureToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: SignatureToken.prim,\n      schema: SignatureToken.prim,\n    };\n  }\n\n  ToKey(val: any) {\n    return this.Execute(val);\n  }\n\n  ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: SignatureToken.prim },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (SignatureToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { LambdaTokenSchema } from '../schema/types';\nimport { SemanticEncoding, Token, TokenFactory } from './token';\n\nexport class LambdaToken extends Token {\n  static prim: 'lambda' = 'lambda';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get paramSchema() {\n    return this.createToken(this.val.args[0], this.idx);\n  }\n\n  get returnSchema() {\n    return this.createToken(this.val.args[1], this.idx + 1);\n  }\n\n  public Execute(val: any) {\n    if (val.string) {\n      return val.string;\n    } else {\n      return val;\n    }\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    return val;\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    if (semantic && semantic[LambdaToken.prim]) {\n      return semantic[LambdaToken.prim](val);\n    }\n    return val;\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return {\n      [LambdaToken.prim]: {\n        parameters: this.paramSchema.ExtractSchema(),\n        returns: this.returnSchema.ExtractSchema(),\n      },\n    };\n  }\n\n  generateSchema(): LambdaTokenSchema {\n    return {\n      __michelsonType: LambdaToken.prim,\n      schema: {\n        parameters: this.paramSchema.generateSchema(),\n        returns: this.returnSchema.generateSchema(),\n      },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (LambdaToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    this.createToken(this.val.args[0], this.idx).findAndReturnTokens(tokenToFind, tokens);\n    this.createToken(this.val.args[1], this.idx).findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../schema/types';\nimport { SemanticEncoding, Token, TokenFactory } from './token';\n\nexport class OperationToken extends Token {\n  static prim: 'operation' = 'operation';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any): { [key: string]: any } {\n    return val.string;\n  }\n\n  public Encode(...args: any[]): any {\n    const val = args.pop();\n    return { string: val };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    if (semantic && semantic[OperationToken.prim]) {\n      return semantic[OperationToken.prim](val);\n    }\n    return { string: val };\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return OperationToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: OperationToken.prim,\n      schema: OperationToken.prim,\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (OperationToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { SetTokenSchema } from '../schema/types';\nimport {\n  Token,\n  TokenFactory,\n  Semantic,\n  TokenValidationError,\n  ComparableToken,\n  SemanticEncoding,\n} from './token';\n\nexport class SetValidationError extends TokenValidationError {\n  name = 'SetValidationError';\n  constructor(public value: any, public token: SetToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class SetToken extends Token {\n  static prim: 'set' = 'set';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get KeySchema(): ComparableToken {\n    return this.createToken(this.val.args[0], 0) as any;\n  }\n\n  private isValid(value: any): SetValidationError | null {\n    if (Array.isArray(value)) {\n      return null;\n    }\n\n    return new SetValidationError(value, this, 'Value must be an array');\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return val\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .reduce((prev: any, current: any) => {\n        return [...prev, this.KeySchema.EncodeObject(current)];\n      }, []);\n  }\n\n  public Execute(val: any, semantics?: Semantic) {\n    return val.reduce((prev: any, current: any) => {\n      return [...prev, this.KeySchema.Execute(current, semantics)];\n    }, []);\n  }\n\n  public EncodeObject(args: any, semantic?: SemanticEncoding): any {\n    const err = this.isValid(args);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[SetToken.prim]) {\n      return semantic[SetToken.prim](args);\n    }\n\n    return args\n      .sort((a: any, b: any) => this.KeySchema.compare(a, b))\n      .reduce((prev: any, current: any) => {\n        return [...prev, this.KeySchema.EncodeObject(current)];\n      }, []);\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return SetToken.prim;\n  }\n\n  generateSchema(): SetTokenSchema {\n    return {\n      __michelsonType: SetToken.prim,\n      schema: this.KeySchema.generateSchema(),\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (SetToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    this.KeySchema.findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n}\n","import {\n  Token,\n  TokenFactory,\n  ComparableToken,\n  TokenValidationError,\n  SemanticEncoding,\n} from './token';\nimport { validateChain, ValidationResult } from '@taquito/utils';\nimport { BaseTokenSchema } from '../schema/types';\n\nexport class ChainIDValidationError extends TokenValidationError {\n  name = 'ChainIDValidationError';\n  constructor(public value: any, public token: ChainIDToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class ChainIDToken extends ComparableToken {\n  static prim: 'chain_id' = 'chain_id';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(value: any): ChainIDValidationError | null {\n    if (validateChain(value) !== ValidationResult.VALID) {\n      return new ChainIDValidationError(value, this, 'ChainID is not valid');\n    }\n\n    return null;\n  }\n\n  public Execute(val: any): string {\n    return val[Object.keys(val)[0]];\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return ChainIDToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: ChainIDToken.prim,\n      schema: ChainIDToken.prim,\n    };\n  }\n\n  public Encode(args: any[]): any {\n    const val = args.pop();\n\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    return { string: val };\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[ChainIDToken.prim]) {\n      return semantic[ChainIDToken.prim](val);\n    }\n\n    return { string: val };\n  }\n\n  public ToKey({ string }: any) {\n    return string;\n  }\n\n  public ToBigMapKey(val: string) {\n    return {\n      key: { string: val },\n      type: { prim: ChainIDToken.prim },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (ChainIDToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { TicketTokenSchema } from '../schema/types';\nimport { IntToken } from './comparable/int';\nimport { ContractToken } from './contract';\nimport { Token, TokenFactory, Semantic, SemanticEncoding } from './token';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when encoding and sending a ticket to the blockchain\n */\nexport class EncodeTicketError extends Error {\n  name = 'TicketEncodeError';\n\n  constructor() {\n    super('Tickets cannot be sent to the blockchain; they are created on-chain');\n  }\n}\n\nconst ticketerType = { prim: 'contract' };\nconst amountType = { prim: 'int' };\n\nexport class TicketToken extends Token {\n  static prim: 'ticket' = 'ticket';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  get valueToken() {\n    return this.createToken(this.val.args[0], this.idx);\n  }\n\n  public Encode(_args: any[]): any {\n    throw new EncodeTicketError();\n  }\n\n  public EncodeObject(args: any, semantic?: SemanticEncoding): any {\n    if (semantic && semantic[TicketToken.prim]) {\n      return semantic[TicketToken.prim](args, this.val);\n    }\n    throw new EncodeTicketError();\n  }\n\n  public Execute(val: any, semantics?: Semantic) {\n    if (semantics && semantics[TicketToken.prim]) {\n      return semantics[TicketToken.prim](val, this.val);\n    }\n    const ticketer = this.createToken(ticketerType, this.idx);\n    const value = this.valueToken;\n    const amount = this.createToken(amountType, this.idx);\n\n    if (undefined === val.args[2] && undefined !== val.args[1].args) {\n      return {\n        ticketer: ticketer.Execute(val.args[0], semantics),\n        value: value.Execute(val.args[1].args[0], semantics),\n        amount: amount.Execute(val.args[1].args[1], semantics),\n      };\n    }\n\n    return {\n      ticketer: ticketer.Execute(val.args[0], semantics),\n      value: value.Execute(val.args[1], semantics),\n      amount: amount.Execute(val.args[2], semantics),\n    };\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return {\n      ticketer: ContractToken.prim,\n      value: this.valueToken.ExtractSchema(),\n      amount: IntToken.prim,\n    };\n  }\n\n  generateSchema(): TicketTokenSchema {\n    return {\n      __michelsonType: TicketToken.prim,\n      schema: {\n        value: this.valueToken.generateSchema(),\n        ticketer: {\n          __michelsonType: ContractToken.prim,\n          schema: ContractToken.prim,\n        },\n        amount: {\n          __michelsonType: IntToken.prim,\n          schema: IntToken.prim,\n        },\n      },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (TicketToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    this.valueToken.findAndReturnTokens(tokenToFind, tokens);\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../schema/types';\nimport { SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class NeverTokenError extends TokenValidationError {\n  name = 'NeverTokenError';\n  constructor(public value: any, public token: NeverToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class NeverToken extends Token {\n  static prim: 'never' = 'never';\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n  public Encode(args: any[]): any {\n    const val = args.pop();\n    throw new NeverTokenError(val, this, 'Assigning a value to the type never is forbidden.');\n  }\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    if (semantic && semantic[NeverToken.prim]) {\n      return semantic[NeverToken.prim](val);\n    }\n    throw new NeverTokenError(val, this, 'Assigning a value to the type never is forbidden.');\n  }\n  public Execute(val: any) {\n    throw new NeverTokenError(val, this, 'There is no literal value for the type never.');\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return NeverToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: NeverToken.prim,\n      schema: NeverToken.prim,\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (NeverToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { SaplingStateTokenSchema } from '../schema/types';\nimport { Semantic, SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class SaplingStateValidationError extends TokenValidationError {\n  name = 'SaplingStateValidationError';\n  constructor(public value: any, public token: SaplingStateToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class SaplingStateToken extends Token {\n  static prim: 'sapling_state' = 'sapling_state';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(val: any) {\n    return typeof val === 'object' && Object.keys(val).length === 0;\n  }\n\n  Execute(val: { int: string }, semantic?: Semantic) {\n    if (semantic && semantic[SaplingStateToken.prim]) {\n      return semantic[SaplingStateToken.prim](val, this.val);\n    }\n    if ('int' in val) {\n      return val.int;\n    } else {\n      throw new SaplingStateValidationError(\n        val,\n        this,\n        `Sapling state is expecting an object with an int property. Got ${JSON.stringify(val)}`\n      );\n    }\n  }\n\n  Encode(args: any[]): any {\n    const val = args.pop();\n    if (this.isValid(val)) {\n      return [];\n    } else {\n      throw new SaplingStateValidationError(\n        val,\n        this,\n        `Invalid sapling_state. Received: ${val} while expecting: {}`\n      );\n    }\n  }\n\n  EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    if (semantic && semantic[SaplingStateToken.prim]) {\n      return semantic[SaplingStateToken.prim](val);\n    }\n    if (this.isValid(val)) {\n      return [];\n    } else {\n      throw new SaplingStateValidationError(\n        val,\n        this,\n        `Invalid sapling_state. Received: ${val} while expecting: {}`\n      );\n    }\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  ExtractSchema() {\n    return {\n      [SaplingStateToken.prim]: {\n        'memo-size': Number(this.val.args[0]['int']),\n      },\n    };\n  }\n\n  generateSchema(): SaplingStateTokenSchema {\n    return {\n      __michelsonType: SaplingStateToken.prim,\n      schema: {\n        memoSize: this.val.args[0]['int'],\n      },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (SaplingStateToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { SaplingTransactionTokenSchema } from '../schema/types';\nimport { SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class SaplingTransactionValidationError extends TokenValidationError {\n  name = 'SaplingTransactionValidationError';\n  constructor(public value: any, public token: SaplingTransactionToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class SaplingTransactionToken extends Token {\n  static prim: 'sapling_transaction' = 'sapling_transaction';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  Execute(_val: any) {\n    throw new SaplingTransactionValidationError(\n      _val,\n      this,\n      'There is no literal value for the sapling_transaction type.'\n    );\n  }\n\n  private validateBytes(val: any) {\n    const bytes = /^(0x|0X)?([0-9a-fA-F]*$)/.exec(val);\n    if (bytes && bytes[2].length % 2 === 0) {\n      return bytes[2];\n    } else {\n      throw new SaplingTransactionValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: Uint8Array | string) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args: any[]): any {\n    let val = args.pop();\n    val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n    return { bytes: String(val).toString() };\n  }\n\n  EncodeObject(val: string | Uint8Array, semantic?: SemanticEncoding) {\n    val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n    if (semantic && semantic[SaplingTransactionToken.prim]) {\n      return semantic[SaplingTransactionToken.prim](val);\n    }\n    return { bytes: String(val).toString() };\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  ExtractSchema() {\n    return {\n      [SaplingTransactionToken.prim]: {\n        'memo-size': Number(this.val.args[0]['int']),\n      },\n    };\n  }\n\n  generateSchema(): SaplingTransactionTokenSchema {\n    return {\n      __michelsonType: SaplingTransactionToken.prim,\n      schema: {\n        memoSize: this.val.args[0]['int'],\n      },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (SaplingTransactionToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../schema/types';\nimport { SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class Bls12381frValidationError extends TokenValidationError {\n  name = 'Bls12381frValidationError';\n  constructor(public value: any, public token: Bls12381frToken, message: string) {\n    super(value, token, message);\n  }\n}\nexport class Bls12381frToken extends Token {\n  // An element of the BLS12-381 scalar field Fr\n  // see https://tezos.gitlab.io/michelson-reference/#type-bls12_381_fr\n  static prim: 'bls12_381_fr' = 'bls12_381_fr';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(val: any): Bls12381frValidationError | null {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381frValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: any) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args: any[]) {\n    let val = args.pop();\n    if (typeof val === 'number') {\n      return { int: val.toString() };\n    } else {\n      val = this.convertUint8ArrayToHexString(val);\n      const err = this.isValid(val);\n      if (err) {\n        throw err;\n      }\n      return { bytes: val };\n    }\n  }\n\n  EncodeObject(val: string | Uint8Array | number, semantic?: SemanticEncoding) {\n    if (semantic && semantic[Bls12381frToken.prim]) {\n      return semantic[Bls12381frToken.prim](val);\n    }\n    if (typeof val === 'number') {\n      return { int: val.toString() };\n    } else {\n      val = this.convertUint8ArrayToHexString(val);\n      const err = this.isValid(val);\n      if (err) {\n        throw err;\n      }\n      return { bytes: val };\n    }\n  }\n\n  Execute(val: any): string {\n    return val.bytes;\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return Bls12381frToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: Bls12381frToken.prim,\n      schema: Bls12381frToken.prim,\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (Bls12381frToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../schema/types';\nimport { SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class Bls12381g1ValidationError extends TokenValidationError {\n  name = 'Bls12381g1ValidationError';\n  constructor(public value: any, public token: Bls12381g1Token, message: string) {\n    super(value, token, message);\n  }\n}\nexport class Bls12381g1Token extends Token {\n  // A point on the BLS12-381 curve G1\n  // See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g1\n  static prim: 'bls12_381_g1' = 'bls12_381_g1';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(val: any): Bls12381g1ValidationError | null {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381g1ValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: any) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args: any[]) {\n    let val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { bytes: val };\n  }\n\n  EncodeObject(val: string | Uint8Array, semantic?: SemanticEncoding) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    if (semantic && semantic[Bls12381g1Token.prim]) {\n      return semantic[Bls12381g1Token.prim](val);\n    }\n    return { bytes: val };\n  }\n\n  Execute(val: any): string {\n    return val.bytes;\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return Bls12381g1Token.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: Bls12381g1Token.prim,\n      schema: Bls12381g1Token.prim,\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (Bls12381g1Token.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../schema/types';\nimport { SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class Bls12381g2ValidationError extends TokenValidationError {\n  name = 'Bls12381g2ValidationError';\n  constructor(public value: any, public token: Bls12381g2Token, message: string) {\n    super(value, token, message);\n  }\n}\nexport class Bls12381g2Token extends Token {\n  // A point on the BLS12-381 curve G2\n  // See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g2\n  static prim: 'bls12_381_g2' = 'bls12_381_g2';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(val: any): Bls12381g2ValidationError | null {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new Bls12381g2ValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: any) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args: any[]) {\n    let val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { bytes: val };\n  }\n\n  EncodeObject(val: string | Uint8Array, semantic?: SemanticEncoding) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    if (semantic && semantic[Bls12381g2Token.prim]) {\n      return semantic[Bls12381g2Token.prim](val);\n    }\n    return { bytes: val };\n  }\n\n  Execute(val: any): string {\n    return val.bytes;\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return Bls12381g2Token.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: Bls12381g2Token.prim,\n      schema: Bls12381g2Token.prim,\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (Bls12381g2Token.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../schema/types';\nimport { SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class ChestValidationError extends TokenValidationError {\n  name = 'ChestValidationError';\n  constructor(public value: any, public token: ChestToken, message: string) {\n    super(value, token, message);\n  }\n}\nexport class ChestToken extends Token {\n  static prim: 'chest' = 'chest';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(val: any): ChestValidationError | null {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new ChestValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: any) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args: any[]) {\n    let val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { bytes: val };\n  }\n\n  EncodeObject(val: string | Uint8Array, semantic?: SemanticEncoding) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[ChestToken.prim]) {\n      return semantic[ChestToken.prim](val);\n    }\n\n    return { bytes: val };\n  }\n\n  Execute(val: any): string {\n    return val.bytes;\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return ChestToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: ChestToken.prim,\n      schema: ChestToken.prim,\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (ChestToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { BaseTokenSchema } from '../schema/types';\nimport { SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class ChestKeyValidationError extends TokenValidationError {\n  name = 'ChestKeyValidationError';\n  constructor(public value: any, public token: ChestKeyToken, message: string) {\n    super(value, token, message);\n  }\n}\nexport class ChestKeyToken extends Token {\n  static prim: 'chest_key' = 'chest_key';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  private isValid(val: any): ChestKeyValidationError | null {\n    if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n      return null;\n    } else {\n      return new ChestKeyValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n  }\n\n  private convertUint8ArrayToHexString(val: any) {\n    return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n  }\n\n  Encode(args: any[]) {\n    let val = args.pop();\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n    return { bytes: val };\n  }\n\n  EncodeObject(val: string | Uint8Array, semantic?: SemanticEncoding) {\n    val = this.convertUint8ArrayToHexString(val);\n    const err = this.isValid(val);\n    if (err) {\n      throw err;\n    }\n\n    if (semantic && semantic[ChestKeyToken.prim]) {\n      return semantic[ChestKeyToken.prim](val);\n    }\n\n    return { bytes: val };\n  }\n\n  Execute(val: any): string {\n    return val.bytes;\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return ChestKeyToken.prim;\n  }\n\n  generateSchema(): BaseTokenSchema {\n    return {\n      __michelsonType: ChestKeyToken.prim,\n      schema: ChestKeyToken.prim,\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (ChestKeyToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { ConstantTokenSchema } from '../schema/types';\nimport { Semantic, SemanticEncoding, Token, TokenFactory, TokenValidationError } from './token';\n\nexport class GlobalConstantEncodingError extends TokenValidationError {\n  name = 'GlobalConstantEncodingError';\n  constructor(public value: any, public token: GlobalConstantToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class GlobalConstantDecodingError extends TokenValidationError {\n  name = 'GlobalConstantDecodingError';\n  constructor(public value: any, public token: GlobalConstantToken, message: string) {\n    super(value, token, message);\n  }\n}\n\nexport class GlobalConstantToken extends Token {\n  static prim: 'constant' = 'constant';\n\n  constructor(\n    protected val: { prim: string; args: any[]; annots?: any[] },\n    protected idx: number,\n    protected fac: TokenFactory\n  ) {\n    super(val, idx, fac);\n  }\n\n  public Execute(val: any, semantic?: Semantic) {\n    if (semantic && semantic[GlobalConstantToken.prim]) {\n      return semantic[GlobalConstantToken.prim](val as any, this.val);\n    } else {\n      throw new GlobalConstantDecodingError(\n        val,\n        this,\n        `Unable to decode a value represented by a global constants. Please provide an expanded script to the Michelson-Encoder or semantics for the decoding. The following global constant hash was encountered: ${this.val.args[0]['string']}.`\n      );\n    }\n  }\n\n  public Encode(args: any[]): any {\n    throw new GlobalConstantEncodingError(\n      args,\n      this,\n      `Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: ${this.val.args[0]['string']}.`\n    );\n  }\n\n  public EncodeObject(val: any, semantic?: SemanticEncoding): any {\n    if (semantic && semantic[GlobalConstantToken.prim]) {\n      return semantic[GlobalConstantToken.prim](val);\n    }\n    throw new GlobalConstantEncodingError(\n      val,\n      this,\n      `Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: ${this.val.args[0]['string']}.`\n    );\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  public ExtractSchema() {\n    return GlobalConstantToken.prim;\n  }\n\n  generateSchema(): ConstantTokenSchema {\n    return {\n      __michelsonType: GlobalConstantToken.prim,\n      schema: {\n        hash: this.val.args[0]['string'],\n      },\n    };\n  }\n\n  findAndReturnTokens(tokenToFind: string, tokens: Token[]) {\n    if (GlobalConstantToken.prim === tokenToFind) {\n      tokens.push(this);\n    }\n    return tokens;\n  }\n}\n","import { PairToken } from './pair';\n\nimport { NatToken } from './comparable/nat';\n\nimport { StringToken } from './comparable/string';\n\nimport { BigMapToken } from './bigmap';\n\nimport { AddressToken } from './comparable/address';\n\nimport { MapToken } from './map';\n\nimport { BoolToken } from './comparable/bool';\n\nimport { TxRollupL2AddressToken } from './comparable/tx_rollup_l2_address';\n\nimport { OrToken } from './or';\n\nimport { ContractToken } from './contract';\n\nimport { ListToken } from './list';\nimport { MutezToken } from './comparable/mutez';\nimport { BytesToken } from './comparable/bytes';\nimport { OptionToken } from './option';\nimport { TimestampToken } from './comparable/timestamp';\nimport { IntToken } from './comparable/int';\nimport { UnitToken } from './unit';\nimport { KeyToken } from './key';\nimport { KeyHashToken } from './comparable/key_hash';\nimport { SignatureToken } from './signature';\nimport { LambdaToken } from './lambda';\nimport { OperationToken } from './operation';\nimport { SetToken } from './set';\nimport { ChainIDToken } from './chain-id';\nimport { TicketToken } from './ticket';\nimport { NeverToken } from './never';\nimport { SaplingStateToken } from './sapling-state';\nimport { SaplingTransactionToken } from './sapling-transaction';\nimport { Bls12381frToken } from './bls12-381-fr';\nimport { Bls12381g1Token } from './bls12-381-g1';\nimport { Bls12381g2Token } from './bls12-381-g2';\nimport { ChestToken } from './chest';\nimport { ChestKeyToken } from './chest-key';\nimport { GlobalConstantToken } from './constant';\n\nexport const tokens = [\n  PairToken,\n  NatToken,\n  StringToken,\n  BigMapToken,\n  AddressToken,\n  TxRollupL2AddressToken,\n  MapToken,\n  BoolToken,\n  OrToken,\n  ContractToken,\n  ListToken,\n  MutezToken,\n  BytesToken,\n  OptionToken,\n  TimestampToken,\n  IntToken,\n  UnitToken,\n  KeyToken,\n  KeyHashToken,\n  SignatureToken,\n  LambdaToken,\n  OperationToken,\n  SetToken,\n  ChainIDToken,\n  TicketToken,\n  NeverToken,\n  SaplingStateToken,\n  SaplingTransactionToken,\n  Bls12381frToken,\n  Bls12381g1Token,\n  Bls12381g2Token,\n  ChestToken,\n  ChestKeyToken,\n  GlobalConstantToken\n];\n","import { tokens } from './tokens';\nimport { Token } from './token';\nimport { PairToken } from './pair';\n\n/**\n *  @category Error\n *  @description Error that indicates a script having an invalid type or it being unsupported by the Michelson Encoder. Note some protocol changes might affect this, we encourage users to open an issue so we can look into implementing support for said types.\n */\nexport class InvalidTokenError extends Error {\n  name = 'Invalid token error';\n  constructor(public message: string, public data: any) {\n    super(message);\n  }\n}\n\nexport function createToken(val: any, idx: number): Token {\n  if (Array.isArray(val)) {\n    return new PairToken(val, idx, createToken);\n  }\n\n  const t = tokens.find((x) => x.prim === val.prim);\n  if (!t) {\n    throw new InvalidTokenError('Malformed data expected a value with a valid prim property', val);\n  }\n  return new t(val, idx, createToken);\n}\n","/**\n *  @category Error\n *  @description Error that indicates a failure when encoding (transforming JS parameter into JSON Michelson)the parameter of the view\n */\nexport class ViewEncodingError extends Error {\n  name = 'ViewEncodingError';\n\n  constructor(public smartContractViewName: string, public originalError: any) {\n    super(`Unable to encode the parameter of the view: ${smartContractViewName}.`);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid on-chain view found on the script\n */\nexport class InvalidScriptError extends Error {\n  name = 'InvalidScriptError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid RPC response being passed or used\n */\nexport class InvalidRpcResponseError extends Error {\n  public name = 'InvalidRpcResponseError';\n  constructor(public script: any) {\n    super(`Invalid RPC response passed as argument(s)`);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure that occurred during encoding\n */\nexport class ParameterEncodingError extends Error {\n  public name = 'ParameterEncodingError';\n  constructor(public message: string, public args: any, public originalError: any) {\n    super(`\n      ${message}. Error encountered when trying to encode arguments: \\n\n      [${args}]\n    `);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid big map schema being passed or used\n */\nexport class InvalidBigMapSchema extends Error {\n  public name = 'InvalidBigMapSchema';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid big map diff being passed or used\n */\nexport class InvalidBigMapDiff extends Error {\n  public name = 'InvalidBigMapDiff';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when trying to encode big maps\n */\nexport class BigMapEncodingError extends Error {\n  public name = 'BigMapEncodingError';\n  constructor(private obj: string, public details: any) {\n    super(`Unable to encode ${obj}. ${details}`);\n  }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when trying to encode storage\n */\nexport class StorageEncodingError extends Error {\n  public name = 'StorageEncodingError';\n  constructor(private obj: string, public details: any) {\n    super(`Unable to encode ${obj}. ${details}`);\n  }\n}\n\n/**\n *  @category Error\n *  @description General error that indicates a function not being passed a necessary argument\n */\nexport class MissingArgumentError extends Error {\n  public name = 'MissingArgumentError';\n  constructor(public message: string) {\n    super(message);\n  }\n}\n","import { MichelsonV1Expression, MichelsonV1ExpressionBase, MichelsonV1ExpressionExtended, ScriptResponse } from '@taquito/rpc';\nimport { BigMapToken } from '../tokens/bigmap';\nimport { createToken } from '../tokens/createToken';\nimport { OrToken } from '../tokens/or';\nimport { PairToken } from '../tokens/pair';\nimport {\n  BigMapKeyType,\n  Semantic,\n  SemanticEncoding,\n  Token,\n  TokenValidationError,\n} from '../tokens/token';\nimport {\n  InvalidRpcResponseError,\n  InvalidBigMapSchema,\n  InvalidBigMapDiff,\n  BigMapEncodingError,\n  StorageEncodingError,\n  MissingArgumentError,\n} from './error';\nimport { RpcTransaction } from './model';\nimport { Falsy, TokenSchema } from './types';\n\nconst schemaTypeSymbol = Symbol.for('taquito-schema-type-symbol');\n\n// collapse comb pair\nfunction collapse(val: Token['val'] | MichelsonV1Expression, prim: string = PairToken.prim): Token['val'] {\n  if (Array.isArray(val)) {\n    return collapse(\n      {\n        prim: prim,\n        args: val,\n      },\n      prim\n    );\n  }\n  const extended = val as MichelsonV1ExpressionExtended\n  if (extended.prim === prim && extended.args && extended.args.length > 2) {\n    return {\n      ...extended,\n      args: [\n        extended.args?.[0],\n        {\n          prim: prim,\n          args: extended.args?.slice(1),\n        },\n      ],\n    };\n  }\n  return extended;\n}\n\nfunction deepEqual(a: MichelsonV1Expression, b: MichelsonV1Expression): boolean {\n  const ac = collapse(a);\n  const bc = collapse(b);\n  return (\n    ac.prim === bc.prim &&\n    ((ac.args === undefined && bc.args === undefined) ||\n      (ac.args !== undefined &&\n        bc.args !== undefined &&\n        ac.args.length === bc.args.length &&\n        ac.args.every((v, i) => deepEqual(v, bc.args?.[i] ?? {})))) &&\n    ((ac.annots === undefined && bc.annots === undefined) ||\n      (ac.annots !== undefined &&\n        bc.annots !== undefined &&\n        ac.annots.length === bc.annots.length &&\n        ac.annots.every((v, i) => v === bc.annots?.[i])))\n  );\n}\n\n/**\n * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\n */\nexport class Schema {\n  private root: Token;\n\n  public [schemaTypeSymbol] = true;\n\n  public static isSchema(obj: Schema): boolean {\n    return obj && obj[schemaTypeSymbol] === true;\n  }\n\n  // TODO: Should we deprecate this?\n  private bigMap?: BigMapToken;\n\n  static fromRPCResponse(val: { script: ScriptResponse }) {\n    const storage: Falsy<MichelsonV1ExpressionExtended> =\n      val &&\n      val.script &&\n      Array.isArray(val.script.code) &&\n      (val.script.code.find((x) => {\n        if (!Array.isArray(x)) {\n          const checkExtended = x as MichelsonV1ExpressionExtended;\n          if (checkExtended.prim) {\n            return checkExtended.prim === 'storage'\n          } else {\n            return false\n          }\n        } else {\n          // storage passed along as original storage value\n          this.fromRPCResponse({script: {code: x, storage: val.script.storage}})\n        }\n      }) as MichelsonV1ExpressionExtended);\n\n    if (!storage || !Array.isArray(storage.args)) {\n      throw new InvalidRpcResponseError(val.script);\n    }\n\n    return new Schema(storage.args[0]);\n  }\n\n  private isExpressionExtended(\n    val: any\n  ): val is Required<Pick<MichelsonV1ExpressionExtended, 'prim' | 'args'>> {\n    return 'prim' in val && Array.isArray(val.args);\n  }\n\n  constructor(readonly val: MichelsonV1Expression) {\n    this.root = createToken(val, 0);\n\n    if (this.root instanceof BigMapToken) {\n      this.bigMap = this.root;\n    } else if (this.isExpressionExtended(val) && val.prim === 'pair') {\n      const exp = val.args[0];\n      if (this.isExpressionExtended(exp) && exp.prim === 'big_map') {\n        this.bigMap = new BigMapToken(exp, 0, createToken);\n      }\n    }\n  }\n\n  private removeTopLevelAnnotation(obj: any) {\n    // PairToken and OrToken can have redundant top level annotation in their storage\n    if (this.root instanceof PairToken || this.root instanceof OrToken) {\n      if (this.root.hasAnnotations() && typeof obj === 'object' && Object.keys(obj).length === 1) {\n        return obj[Object.keys(obj)[0]];\n      }\n    }\n\n    return obj;\n  }\n\n  Execute(val: any, semantics?: Semantic) {\n    const storage = this.root.Execute(val, semantics);\n\n    return this.removeTopLevelAnnotation(storage);\n  }\n\n  Typecheck(val: any) {\n    if (this.root instanceof BigMapToken && Number.isInteger(Number(val))) {\n      return true;\n    }\n    try {\n      this.root.EncodeObject(val);\n      return true;\n    } catch (ex) {\n      return false;\n    }\n  }\n\n  ExecuteOnBigMapDiff(diff: any[], semantics?: Semantic) {\n    if (!this.bigMap) {\n      throw new InvalidBigMapSchema('Big map schema is undefined');\n    }\n\n    if (!Array.isArray(diff)) {\n      throw new InvalidBigMapDiff('Big map diff must be an array');\n    }\n\n    const eltFormat = diff.map(({ key, value }) => ({ args: [key, value] }));\n\n    return this.bigMap.Execute(eltFormat, semantics);\n  }\n\n  ExecuteOnBigMapValue(key: any, semantics?: Semantic) {\n    if (!this.bigMap) {\n      throw new InvalidBigMapSchema('No big map schema');\n    }\n\n    return this.bigMap.ValueSchema.Execute(key, semantics);\n  }\n\n  EncodeBigMapKey(key: BigMapKeyType) {\n    if (!this.bigMap) {\n      throw new InvalidBigMapSchema('Big map schema is undefined');\n    }\n\n    try {\n      return this.bigMap.KeySchema.ToBigMapKey(key);\n    } catch (ex) {\n      throw new BigMapEncodingError('big map key', ex);\n    }\n  }\n\n  Encode(value?: any, semantics?: SemanticEncoding) {\n    try {\n      return this.root.EncodeObject(value, semantics);\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new StorageEncodingError('storage object', ex);\n    }\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  ExtractSchema() {\n    return this.removeTopLevelAnnotation(this.root.ExtractSchema());\n  }\n\n  /**\n   * @description Produce a representation of the storage schema.\n   * Note: Provide guidance on how to write the storage object for the origination operation with Taquito.\n   */\n  generateSchema(): TokenSchema {\n    return this.removeTopLevelAnnotation(this.root.generateSchema());\n  }\n\n  /**\n   * @deprecated\n   */\n  ComputeState(tx: RpcTransaction[], state: any) {\n    if (!this.bigMap) {\n      throw new InvalidBigMapSchema('Big map schema is undefined');\n    }\n\n    const bigMap = tx.reduce((prev, current) => {\n      return {\n        ...prev,\n        ...this.ExecuteOnBigMapDiff(current.contents[0].metadata.operation_result.big_map_diff),\n      };\n    }, {});\n\n    return {\n      ...this.Execute(state),\n      [this.bigMap.annot()]: bigMap,\n    };\n  }\n\n  /**\n   * @description Look up in top-level pairs of the storage to find a value matching the specified type\n   *\n   * @returns The first value found that match the type or `undefined` if no value is found\n   *\n   * @param storage storage to parse to find the value\n   * @param valueType type of value to look for\n   *\n   */\n   FindFirstInTopLevelPair<T extends MichelsonV1Expression>(storage: any, valueType: any) {\n    return this.findValue(this.root['val'], storage, valueType) as T | undefined;\n  }\n\n  // TODO check these type casts\n  private findValue(schema: MichelsonV1Expression, storage: any, valueToFind: any): MichelsonV1ExpressionBase | undefined {\n    if (deepEqual(valueToFind, schema)) {\n      return storage;\n    }\n    if (Array.isArray(schema) || (schema as MichelsonV1ExpressionExtended).prim === 'pair') {\n      const sch = collapse(schema);\n      const strg = collapse(storage, 'Pair');\n      if (sch.args === undefined || strg.args === undefined) {\n        throw new MissingArgumentError('Tokens have no arguments'); // unlikely\n      }\n      if (sch.args[0])\n      return (\n        // unsafe\n        this.findValue(sch.args[0] as MichelsonV1ExpressionExtended, strg.args[0], valueToFind) ||\n        this.findValue(sch.args[1] as MichelsonV1ExpressionExtended, strg.args[1], valueToFind)\n      );\n    }\n  }\n  /**\n   * @description Look up the schema to find any occurrence of a particular token.\n   *\n   * @returns an array of tokens of the specified kind or an empty array if no token was found\n   *\n   * @param tokenToFind string representing the prim property of the token to find\n   *\n   * @example\n   * ```\n   * Useful to find all global constants in a script, an array of GlobalConstantToken is returned:\n   *\n   * const schema = new Schema(script);\n   * const allGlobalConstantTokens = schema.findToken('constant');\n   * ```\n   *\n   */\n  findToken(tokenToFind: string): Array<Token> {\n    const tokens: Array<Token> = [];\n    return this.root.findAndReturnTokens(tokenToFind, tokens);\n  }\n}\n","import { createToken } from '../tokens/createToken';\nimport { Token, Semantic, TokenValidationError, SemanticEncoding } from '../tokens/token';\nimport { OrToken } from '../tokens/or';\nimport { OptionToken } from '../tokens/option';\nimport { ScriptResponse, MichelsonV1ExpressionExtended, MichelsonV1Expression } from '@taquito/rpc';\nimport { Falsy, TokenSchema } from './types';\nimport { InvalidRpcResponseError, ParameterEncodingError } from './error';\n\n/**\n * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\n */\nexport class ParameterSchema {\n  private root: Token;\n\n  static fromRPCResponse(val: { script: ScriptResponse }) {\n    const parameter: Falsy<MichelsonV1ExpressionExtended> =\n      val &&\n      val.script &&\n      Array.isArray(val.script.code) &&\n      (val.script.code.find((x: any) => x.prim === 'parameter') as MichelsonV1ExpressionExtended);\n    if (!parameter || !Array.isArray(parameter.args)) {\n      throw new InvalidRpcResponseError(val.script);\n    }\n\n    return new ParameterSchema(parameter.args[0]);\n  }\n\n  get isMultipleEntryPoint() {\n    return (\n      this.root instanceof OrToken ||\n      (this.root instanceof OptionToken && this.root.subToken() instanceof OrToken)\n    );\n  }\n\n  get hasAnnotation() {\n    if (this.isMultipleEntryPoint) {\n      return Object.keys(this.ExtractSchema())[0] !== '0';\n    } else {\n      return true;\n    }\n  }\n\n  constructor(val: MichelsonV1Expression) {\n    this.root = createToken(val, 0);\n  }\n\n  Execute(val: any, semantics?: Semantic) {\n    return this.root.Execute(val, semantics);\n  }\n\n  Encode(...args: any[]) {\n    try {\n      return this.root.Encode(args.reverse());\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new ParameterEncodingError('Unable to encode parameter', args.toString(), ex);\n    }\n  }\n\n  EncodeObject(value?: any, semantics?: SemanticEncoding) {\n    try {\n      return this.root.EncodeObject(value, semantics);\n    } catch (ex) {\n      if (ex instanceof TokenValidationError) {\n        throw ex;\n      }\n\n      throw new ParameterEncodingError('Unable to encode parameter object', value, ex);\n    }\n  }\n\n  /**\n   * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n   *\n   */\n  ExtractSchema() {\n    return this.root.ExtractSchema();\n  }\n\n  /**\n   * @description Produce a schema grouping together all the entry points of a contract.\n   */\n  generateSchema(): TokenSchema {\n    return this.root.generateSchema();\n  }\n\n  ExtractSignatures() {\n    return this.root.ExtractSignature();\n  }\n}\n","import { MichelsonV1Expression, MichelsonV1ExpressionExtended, ScriptResponse } from '@taquito/rpc';\nimport { createToken } from '../tokens/createToken';\nimport { Semantic, Token } from '../tokens/token';\nimport { InvalidScriptError, ViewEncodingError } from './error';\n\nexport class ViewSchema {\n  readonly viewName: string;\n  readonly viewArgsType: MichelsonV1ExpressionExtended;\n  readonly viewReturnType: MichelsonV1ExpressionExtended;\n  readonly instructions: MichelsonV1ExpressionExtended[];\n  private rootArgsType: Token;\n  private rootReturnType: Token;\n\n  /**\n   *\n   * @description Create an instance of ViewSchema for each view in a script\n   *\n   * @param val contract script obtained from the RPC\n   * @returns array of ViewSchema or empty array if there is no view in the contract\n   */\n  static fromRPCResponse(val: { script: ScriptResponse }) {\n    const allViewSchema: ViewSchema[] = [];\n\n    const views =\n      val &&\n      val.script &&\n      Array.isArray(val.script.code) &&\n      (val.script.code.filter((x: any) => x.prim === 'view') as MichelsonV1ExpressionExtended[]);\n\n    if (views) {\n      views.forEach((view) => {\n        if (!view.args || view.args.length !== 4) {\n          throw new InvalidScriptError(\n            `Invalid on-chain view found in the script: ${JSON.stringify(view)}`\n          );\n        }\n        allViewSchema.push(new ViewSchema(view.args));\n      });\n    }\n    return allViewSchema;\n  }\n\n  constructor(val: MichelsonV1Expression[]) {\n    if (val.length !== 4 || !('string' in val[0])) {\n      throw new InvalidScriptError(`Invalid on-chain view: ${JSON.stringify(val)}`);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.viewName = val[0]['string']!;\n    this.viewArgsType = val[1] as MichelsonV1ExpressionExtended;\n    this.viewReturnType = val[2] as MichelsonV1ExpressionExtended;\n    this.instructions = val[3] as MichelsonV1ExpressionExtended[];\n\n    this.rootArgsType = createToken(this.viewArgsType, 0);\n    this.rootReturnType = createToken(this.viewReturnType, 0);\n  }\n\n  /**\n   *\n   * @description Transform the view parameter into Michelson\n   *\n   * @param args parameter of the view in js format\n   * @returns parameter of the view in Michelson\n   */\n  encodeViewArgs(args: any) {\n    try {\n      return this.rootArgsType.EncodeObject(args);\n    } catch (ex) {\n      throw new ViewEncodingError(this.viewName, ex);\n    }\n  }\n\n  /**\n   *\n   * @description Transform the view result from Michelson to readable data\n   *\n   * @param val result of the view in JSON Michelson\n   * @param semantics optional semantics to override the default decoding behavior\n   * @returns result of the view in a readable format\n   */\n  decodeViewResult(val: any, semantics?: Semantic) {\n    return this.rootReturnType.Execute(val, semantics);\n  }\n\n  /**\n   *\n   * @description Return the signature of the view parameter\n   */\n  extractArgsSchema() {\n    return this.rootArgsType.ExtractSchema();\n  }\n\n  /**\n   *\n   * @description Return the format of the view result\n   */\n  extractResultSchema() {\n    return this.rootReturnType.ExtractSchema();\n  }\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"6d90b3d5e616a6e9b9ad9dd8453b5068e7396fff\",\n    \"version\": \"13.0.1\"\n};\n","/**\n * @packageDocumentation\n * @module @taquito/michelson-encoder\n */\n\nexport * from './schema/storage';\nexport * from './schema/parameter';\nexport * from './schema/view-schema';\nexport * from './schema/error';\nexport * from './schema/types';\nexport { Semantic, SemanticEncoding, BigMapKeyType } from './tokens/token';\nexport * from './errors';\n\nexport const UnitValue = Symbol();\nexport const SaplingStateValue = {};\nexport * from './michelson-map';\nexport { VERSION } from './version';\nexport { Token } from './tokens/token';\n"]},"metadata":{},"sourceType":"module"}